<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Word排版技巧</title>
      <link href="/2024/04/04/Word%E6%8E%92%E7%89%88%E6%8A%80%E5%B7%A7/"/>
      <url>/2024/04/04/Word%E6%8E%92%E7%89%88%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/01/hello-world/"/>
      <url>/2024/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>template-02-Java开发工具类</title>
      <link href="/2023/11/26/template-02-Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2023/11/26/template-02-Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>俗话说得好：学渣就是一个字，抄！</p><p>本文章主要是将日常学习中用到的Java工具类模板记录下来。</p></blockquote><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JWT依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>annotation<ul><li>@WebFilter(urlPatterns &#x3D; “&#x2F;*”)</li><li>@ServletComponentScan： 启动类上添加</li></ul></li><li>JwtUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/6 13:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 签名密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGN_KEY</span> <span class="operator">=</span> <span class="string">&quot;lwsj&quot;</span>;</span><br><span class="line">    <span class="comment">// 过期时间（一天）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Jwt令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims JWT第二部分负载payload中存储的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个Jwt令牌字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">            <span class="comment">// 自定义信息（有效载荷）</span></span><br><span class="line">            .addClaims(claims)</span><br><span class="line">            <span class="comment">// 签名算法（头部）</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, SIGN_KEY)</span><br><span class="line">            <span class="comment">// 过期时间</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">            .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT第二部分负载payload中存储的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">            <span class="comment">// 指定签名秘钥</span></span><br><span class="line">            .setSigningKey(SIGN_KEY)</span><br><span class="line">            <span class="comment">// 指定JWT令牌</span></span><br><span class="line">            .parseClaimsJws(jwt)</span><br><span class="line">            .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从jwt解析当前登录用户的id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt 输入一个令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getUserId</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) JwtUtil.parseJWT(jwt).get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/26/template-02-Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20231106192840135.png" alt="image-20231106192840135"></p><h2 id="WebConfig"><a href="#WebConfig" class="headerlink" title="WebConfig"></a>WebConfig</h2><ul><li>跨域问题</li><li>拦截器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.web.interceptor.JwtInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/16 10:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用@Configuration注解和代码，替代xml文件进行配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (新增代码)添加jwt拦截器,并指定拦截路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(jwtInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/auth/**&quot;</span>)</span><br><span class="line">            <span class="comment">//不需要被校验url: 查询所有一级栏目及其二级栏目的接口(供前台使用)</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/auth/category/queryAllParent&quot;</span>,</span><br><span class="line">                                 <span class="string">&quot;/auth/comment/queryByArticleId/&#123;id&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (新增代码)创建jwt拦截器对象并加入spring容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtInterceptor <span class="title function_">jwtInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (原有代码)跨域配置: 通过跨域过滤器实现</span></span><br><span class="line">    <span class="comment">// OPTIONS预检请求其实就是为了解决跨域问题</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许跨域的头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许跨域的方法</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 可访问的外部域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 需要跨域用户凭证（cookie、HTTP认证及客户端SSL证明等）</span></span><br><span class="line">        <span class="comment">//config.setAllowCredentials(true);</span></span><br><span class="line">        <span class="comment">//config.addAllowedOriginPattern(&quot;*&quot;);</span></span><br><span class="line">        <span class="comment">// 跨域路径配置</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JwtInterceptor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.exception.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.briup.cms.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.briup.cms.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.briup.cms.util.UserInfoUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.MalformedJwtException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JwtInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/16 9:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、判断是否可以直接放行</span></span><br><span class="line">        <span class="comment">// 1、1、如果不是映射方法直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1、2、预检请求直接放行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取token</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2023/11/16 前后端交流决定是 Authorization</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;token无效，请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、验证token</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Claims claims = JwtUtil.parseJWT(token);</span></span><br><span class="line">            <span class="comment">// String userId = String.valueOf(claims.get(&quot;userId&quot;));</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> JwtUtil.getUserId(token);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将userId放入到request当中，方便后面/auth/user/info 代码使用</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ThreadLocal&lt;String&gt; categoryThreadLocal = new ThreadLocal&lt;&gt;();</span></span><br><span class="line">            <span class="comment">// categoryThreadLocal.set(userId);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录到期,请重新登录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;令牌失效,请重新登录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResultCode.SYSTEM_INNER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4、放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一响应实体"><a href="#统一响应实体" class="headerlink" title="统一响应实体"></a>统一响应实体</h2><ul><li>Result<T></T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据类型</span></span><br><span class="line"><span class="comment"> * 统一响应实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;统一响应实体&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;响应码，200 代表成功; 其他代表失败 默认0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;响应信息 描述字符串&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回的数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置响应消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resultCode 结果枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setResultCode</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.code();</span><br><span class="line">        <span class="built_in">this</span>.msg = resultCode.msg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成功响应,无数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setResultCode(ResultCode.SUCCESS);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成功响应,有数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 响应数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setResultCode(ResultCode.SUCCESS);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 失败响应,默认失败状态码为 0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 返回的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">0</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 失败响应, 自定义失败状态码及失败响应消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 返回的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 失败响应, 从响应枚举中获取失败 响应状态码及响应消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resultCode 结果枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 返回的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setResultCode(resultCode);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="统一响应格式"><a href="#统一响应格式" class="headerlink" title="统一响应格式"></a>统一响应格式</h2><ul><li>ResultCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.response;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一响应格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line">    <span class="comment">/* 成功状态码 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;success&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：10001-19999 */</span></span><br><span class="line">    PARAM_IS_INVALID(<span class="number">10001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">10002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_BIND_ERROR(<span class="number">10003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">10004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误：20001-29999*/</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">20001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_LOGIN_ERROR(<span class="number">20002</span>, <span class="string">&quot;账号不存在或密码错误&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_FORBIDDEN(<span class="number">20003</span>, <span class="string">&quot;账号已被禁用&quot;</span>),</span><br><span class="line">    USER_NOT_EXIST(<span class="number">20004</span>, <span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line">    USER_HAS_EXISTED(<span class="number">20005</span>, <span class="string">&quot;用户已存在&quot;</span>),</span><br><span class="line">    <span class="comment">/*token相关:*/</span></span><br><span class="line">    TOKEN_MISSION(<span class="number">20006</span>, <span class="string">&quot;token不存在，请进行登录&quot;</span>),</span><br><span class="line">    TOKEN_TIMEOUT(<span class="number">20007</span>, <span class="string">&quot;token令牌已过期&quot;</span>),</span><br><span class="line">    TOKEN_IS_INVALID(<span class="number">20008</span>, <span class="string">&quot;token令牌无效&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 系统错误：40001-49999 */</span></span><br><span class="line">    SYSTEM_INNER_ERROR(<span class="number">40001</span>, <span class="string">&quot;系统内部错误，请稍后重试&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数据错误：50001-599999 */</span></span><br><span class="line">    DATA_NONE(<span class="number">50001</span>, <span class="string">&quot;数据未找到&quot;</span>),</span><br><span class="line">    DATA_WRONG(<span class="number">50002</span>, <span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line">    DATA_EXISTED(<span class="number">50003</span>, <span class="string">&quot;数据已存在&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接口错误：60001-69999 */</span></span><br><span class="line">    INTERFACE_INNER_INVOKE_ERROR(<span class="number">60001</span>, <span class="string">&quot;内部系统接口调用异常&quot;</span>),</span><br><span class="line">    INTERFACE_OUTTER_INVOKE_ERROR(<span class="number">60002</span>, <span class="string">&quot;外部系统接口调用异常&quot;</span>),</span><br><span class="line">    INTERFACE_FORBID_VISIT(<span class="number">60003</span>, <span class="string">&quot;该接口禁止访问&quot;</span>),</span><br><span class="line">    INTERFACE_ADDRESS_INVALID(<span class="number">60004</span>, <span class="string">&quot;接口地址无效&quot;</span>),</span><br><span class="line">    INTERFACE_REQUEST_TIMEOUT(<span class="number">60005</span>, <span class="string">&quot;接口请求超时&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 权限错误：70001-79999 */</span></span><br><span class="line">    PERMISSION_NO_ACCESS(<span class="number">70001</span>, <span class="string">&quot;无访问权限&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><ul><li>GlobalExceptionHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.response.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ControllerAdvice + @ResponseBody</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        Result&lt;String&gt; result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServiceException) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;系统错误：&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            result = Result.error(((ServiceException) e).getResultCode());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;系统错误：&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            result = Result.error(<span class="number">500</span>, <span class="string">&quot;服务器意外错误：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ServiceException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.response.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义service层异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResultCode resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(resultCode.msg());</span><br><span class="line">        <span class="built_in">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">getResultCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResultCode</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getSerialVersionUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> serialVersionUID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mybatisPlus代码生成器"><a href="#mybatisPlus代码生成器" class="headerlink" title="mybatisPlus代码生成器"></a>mybatisPlus代码生成器</h2><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatisPlus启动类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatisPlus代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker 代码生成的时候需要--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MybatisPlusGenerator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.LikeTable;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.querys.MySqlQuery;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.query.SQLQuery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MybatisPlusGenerator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/13 11:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/cms?characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectAbPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\languages\\idea_workspace\\cms\\&quot;</span>;</span><br><span class="line">        FastAutoGenerator.create(url, username, password)</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="string">&quot;Luozw&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                    .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                    .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(projectAbPath + <span class="string">&quot;src\\main\\java&quot;</span>) <span class="comment">// 指定输出目录</span></span><br><span class="line">                    .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                    .disableOpenDir();</span><br><span class="line">            &#125;)</span><br><span class="line">            .dataSourceConfig(builder -&gt; builder.databaseQueryClass(SQLQuery.class).typeConvert(<span class="keyword">new</span> <span class="title class_">MySqlTypeConvert</span>()).dbQuery(<span class="keyword">new</span> <span class="title class_">MySqlQuery</span>()))</span><br><span class="line">            .packageConfig(builder -&gt; &#123;</span><br><span class="line">                builder.parent(<span class="string">&quot;com.briup.cms&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                    <span class="comment">// .moduleName(&quot;system&quot;) // 设置父包模块名</span></span><br><span class="line">                    .entity(<span class="string">&quot;bean&quot;</span>)</span><br><span class="line">                    .controller(<span class="string">&quot;web.controller&quot;</span>)</span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, projectAbPath + <span class="string">&quot;src\\main\\resources\\mappers&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                <span class="comment">// 设置entity类信息</span></span><br><span class="line">                builder.entityBuilder().enableFileOverride().enableLombok().build();</span><br><span class="line">                <span class="comment">// 设置产生为RestController</span></span><br><span class="line">                builder.controllerBuilder().enableRestStyle().build();</span><br><span class="line">                builder.mapperBuilder().enableFileOverride().enableBaseResultMap().enableBaseColumnList().build();</span><br><span class="line">                builder.likeTable(<span class="keyword">new</span> <span class="title class_">LikeTable</span>(<span class="string">&quot;cms_&quot;</span>))</span><br><span class="line">                    .addTablePrefix(<span class="string">&quot;cms_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">            .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Knife4jConfig"><a href="#Knife4jConfig" class="headerlink" title="Knife4jConfig"></a>Knife4jConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="comment">//Swagger界面中显示的基本信息</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//配置基本信息</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">briup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;briup&quot;</span>, <span class="string">&quot;http://www.briup.com/index.php/&quot;</span>, <span class="string">&quot;briup@briup.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            <span class="comment">//标题</span></span><br><span class="line">            .title(<span class="string">&quot;CMS内容管理系统&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;欢迎访问CMS接口文档&quot;</span>)</span><br><span class="line">            <span class="comment">//基本信息</span></span><br><span class="line">            .contact(briup)</span><br><span class="line">            <span class="comment">//版本号</span></span><br><span class="line">            .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">            <span class="comment">//创建</span></span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Controller的包路径</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//传入要扫描的包结构</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.web.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><blockquote><p>主要用户密码或者敏感信息加密</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MD5Utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/16 9:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Utils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MD5</span><span class="params">(String inStr)</span> &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] byteArray = inStr.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] md5Bytes = md5.digest(byteArray);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> md5Byte : md5Bytes) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> ((<span class="type">int</span>) md5Byte) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; <span class="number">16</span>)</span><br><span class="line">                hexValue.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可逆的加密算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">KL</span><span class="params">(String inStr)</span> &#123;</span><br><span class="line">        <span class="comment">// String s = new String(inStr);</span></span><br><span class="line">        <span class="type">char</span>[] a = inStr.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = (<span class="type">char</span>) (a[i] ^ <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密后解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">JM</span><span class="params">(String inStr)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] a = inStr.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = (<span class="type">char</span>) (a[i] ^ <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExcelUtils"><a href="#ExcelUtils" class="headerlink" title="ExcelUtils"></a>ExcelUtils</h2><blockquote><p>对excel基本导入导出功能的封装，比如导出一个sheet和导出多个sheet。</p><p>但是对于复杂excel的导入导出还需要自己设计</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.ExcelWriter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.converters.Converter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.builder.ExcelReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.builder.ExcelWriterBuilder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.WriteSheet;</span><br><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 使用EasyExcel操作excel导入导出数据的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/22-10:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无需注册自定义类型转换时导入使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">importData</span><span class="params">(MultipartFile file, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                  AnalysisEventListener&lt;T&gt; listener)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> importData(file, tClass, listener, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Excel文件中导入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      数据文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass    待导入数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener  自定义监听器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converter 自定义参数转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;       泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 导入的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">importData</span><span class="params">(MultipartFile file, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                  AnalysisEventListener&lt;T&gt; listener, Converter&lt;?&gt; converter)</span> &#123;</span><br><span class="line">        <span class="comment">//获取文件的输入流</span></span><br><span class="line">        <span class="meta">@Cleanup</span><span class="comment">//添加一个finally代码块进行关闭资源的操作</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用read方法</span></span><br><span class="line">        <span class="type">ExcelReaderBuilder</span> <span class="variable">readerBuilder</span> <span class="operator">=</span> EasyExcel.read(in)</span><br><span class="line">            <span class="comment">//注册自定义监听器，字段校验可以在监听器内实现</span></span><br><span class="line">            .registerReadListener(listener)</span><br><span class="line">            <span class="comment">//对应导入的实体类</span></span><br><span class="line">            .head(tClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册自定义参数转换器</span></span><br><span class="line">        <span class="keyword">if</span> (converter != <span class="literal">null</span>) &#123;</span><br><span class="line">            readerBuilder.registerConverter(converter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取 所有sheet页的数据</span></span><br><span class="line">        <span class="keyword">return</span> readerBuilder</span><br><span class="line">            <span class="comment">//列表头行数，1代表列表头有1行，第二行开始为数据行</span></span><br><span class="line">            .headRowNumber(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">//开始读Excel，返回一个List&lt;T&gt;集合，继续后续入库操作</span></span><br><span class="line">            .doReadAllSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无需注册自定义类型转换时导出使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(HttpServletResponse response, List&lt;T&gt; list, Class&lt;T&gt; tClass, String fileName)</span> &#123;</span><br><span class="line">        exportExcel(response, list, tClass, fileName, (Converter&lt;?&gt;[]) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出数据到excel,单sheet表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list       待导出的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass     导出数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName   文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters 自定义参数转换器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(HttpServletResponse response, List&lt;T&gt; list, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                String fileName, Converter&lt;?&gt;... converters)</span> &#123;</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        <span class="meta">@Cleanup</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应结果</span></span><br><span class="line">        <span class="built_in">this</span>.setExcelResponseProp(response, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取导出对象</span></span><br><span class="line">        <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> getExcelWriter(outputStream, tClass, converters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个sheet表</span></span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.writerSheet().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//导出数据</span></span><br><span class="line">        excelWriter.write(list, sheet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//导出完毕后刷新等收尾工作</span></span><br><span class="line">        excelWriter.finish();</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无需自定义类型转换时导出多sheet表使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">exportManySheet</span><span class="params">(HttpServletResponse response, List&lt;T&gt; list, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                    String fileName)</span> &#123;</span><br><span class="line">        exportManySheet(response, list, tClass, fileName, (Converter&lt;?&gt;[]) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出数据到excel,多sheet表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response  响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      待导出的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass    导出数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName  文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converter 自定义参数转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">exportManySheet</span><span class="params">(HttpServletResponse response, List&lt;T&gt; list, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                    String fileName, Converter&lt;?&gt;... converter)</span> &#123;</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        <span class="meta">@Cleanup</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//设置响应结果</span></span><br><span class="line">        <span class="built_in">this</span>.setExcelResponseProp(response, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取导出对象</span></span><br><span class="line">        <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> getExcelWriter(outputStream, tClass, converter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将需要导出的数据进行分割,每1000条数据放入到一个sheet中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i += <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="comment">//创建sheet对象,命名方式 如:日志信息1、日志信息2....</span></span><br><span class="line">            <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(fileName + total++).build();</span><br><span class="line">            <span class="comment">//将数据写出到sheet中</span></span><br><span class="line">            excelWriter.write(list.subList(i, size &gt;= <span class="number">1000</span> ? i + <span class="number">1000</span> : size), writeSheet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//导出完毕后刷新等收尾工作</span></span><br><span class="line">        excelWriter.finish();</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据已有条件,创建导出对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; ExcelWriter <span class="title function_">getExcelWriter</span><span class="params">(OutputStream outputStream, Class&lt;T&gt; tClass,</span></span><br><span class="line"><span class="params">                                           Converter&lt;?&gt;... converters)</span> &#123;</span><br><span class="line">        <span class="comment">//获取导出对象建造者</span></span><br><span class="line">        <span class="type">ExcelWriterBuilder</span> <span class="variable">writerBuilder</span> <span class="operator">=</span> EasyExcel.write(outputStream, tClass)</span><br><span class="line">            .excelType(ExcelTypeEnum.XLSX);</span><br><span class="line">        <span class="comment">//注册自定义类型转换器</span></span><br><span class="line">        <span class="keyword">if</span> (converters != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Converter&lt;?&gt; converter : converters) &#123;</span><br><span class="line">                writerBuilder.registerConverter(converter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> writerBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置响应结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response    响应结果对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawFileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException 不支持的编码异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setExcelResponseProp</span><span class="params">(HttpServletResponse response, String rawFileName)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//设置编码格式</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//设置导出文件名称（避免乱码）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(rawFileName.concat(<span class="string">&quot;.xlsx&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//设置内容类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应的编码格式</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis-plus代码生成器"><a href="#mybatis-plus代码生成器" class="headerlink" title="mybatis-plus代码生成器"></a>mybatis-plus代码生成器</h2><ul><li>mavne</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatisPlus启动类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatisPlus代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker 代码生成的时候需要--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MybatisPlusGenerator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.LikeTable;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.querys.MySqlQuery;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.query.SQLQuery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MybatisPlusGenerator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/13 11:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/cms?characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectAbPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\languages\\idea_workspace\\cms\\&quot;</span>;</span><br><span class="line">        FastAutoGenerator.create(url, username, password)</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="string">&quot;Luozw&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                    .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                    .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(projectAbPath + <span class="string">&quot;src\\main\\java&quot;</span>) <span class="comment">// 指定输出目录</span></span><br><span class="line">                    .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                    .disableOpenDir();</span><br><span class="line">            &#125;)</span><br><span class="line">            .dataSourceConfig(builder -&gt; builder.databaseQueryClass(SQLQuery.class).typeConvert(<span class="keyword">new</span> <span class="title class_">MySqlTypeConvert</span>()).dbQuery(<span class="keyword">new</span> <span class="title class_">MySqlQuery</span>()))</span><br><span class="line">            .packageConfig(builder -&gt; &#123;</span><br><span class="line">                builder.parent(<span class="string">&quot;com.briup.cms&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                    <span class="comment">// .moduleName(&quot;system&quot;) // 设置父包模块名</span></span><br><span class="line">                    .entity(<span class="string">&quot;bean&quot;</span>)</span><br><span class="line">                    .controller(<span class="string">&quot;web.controller&quot;</span>)</span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, projectAbPath + <span class="string">&quot;src\\main\\resources\\mappers&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                <span class="comment">// 设置entity类信息</span></span><br><span class="line">                builder.entityBuilder().enableFileOverride().enableTableFieldAnnotation().enableLombok().build();</span><br><span class="line">                <span class="comment">// 设置产生为RestController</span></span><br><span class="line">                builder.controllerBuilder().enableRestStyle().build();</span><br><span class="line">                builder.mapperBuilder().enableFileOverride().enableBaseResultMap().enableBaseColumnList().build();</span><br><span class="line">                builder.likeTable(<span class="keyword">new</span> <span class="title class_">LikeTable</span>(<span class="string">&quot;cms_&quot;</span>))</span><br><span class="line">                    .addTablePrefix(<span class="string">&quot;cms_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">            .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>mp分页功能开启</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.briup.cms.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<span class="comment">//如果配置多个插件,切记分页最后添加</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IP工具类"><a href="#IP工具类" class="headerlink" title="IP工具类"></a>IP工具类</h2><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--google json处理工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.bean.Ip;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ConnectException;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketTimeoutException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ip工具类用于ip的获取与解析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/18-9:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IPUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IP地址查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IP_URL</span> <span class="operator">=</span> <span class="string">&quot;http://whois.pconline.com.cn/ipJson.jsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未知地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNKNOWN</span> <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共对外接口,获取ip对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ip对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Ip <span class="title function_">getIP</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getIp(getIpAddress(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 IP地址</span></span><br><span class="line"><span class="comment">     * 使用 Nginx等反向代理软件， 则不能通过 request.getRemoteAddr()获取 IP地址</span></span><br><span class="line"><span class="comment">     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，</span></span><br><span class="line"><span class="comment">     * X-Forwarded-For中第一个非 unknown的有效IP字符串，则为真实IP地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getIpAddress</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//X-Forwarded-For：Squid 服务代理</span></span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || UNKNOWN.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">//Proxy-Client-IP：apache 服务代理</span></span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || UNKNOWN.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">//WL-Proxy-Client-IP：weblogic 服务代理</span></span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || UNKNOWN.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">//HTTP_CLIENT_IP：有些代理服务器</span></span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有些网络通过多层代理，那么获取到的ip就会有多个，一般都是通过逗号（,）分割开来，并且第一个ip为客户端的真实IP</span></span><br><span class="line">        <span class="keyword">if</span> (ip != <span class="literal">null</span> &amp;&amp; ip.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            ip = ip.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || UNKNOWN.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">//X-Real-IP：nginx服务代理</span></span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || UNKNOWN.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return &quot;0:0:0:0:0:0:0:1&quot;.equals(ip) ? &quot;127.0.0.1&quot; : ip;</span></span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据IP地址,解析该IP,获取基础信息</span></span><br><span class="line"><span class="comment">     * 调用sendGet()方法 解析ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Ip <span class="title function_">getIp</span><span class="params">(String ipAddress)</span> &#123;</span><br><span class="line">        <span class="type">Ip</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ip</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rspStr</span> <span class="operator">=</span> sendGet(<span class="string">&quot;ip=&quot;</span> + ipAddress + <span class="string">&quot;&amp;json=true&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasText(rspStr)) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;获取地理位置异常 &#123;&#125;&quot;</span>, ipAddress);</span><br><span class="line">                ip.setIp(UNKNOWN);</span><br><span class="line">                <span class="keyword">return</span> ip;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            ip = gson.fromJson(rspStr, Ip.class);</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取地理位置异常 &#123;&#125;&quot;</span>, ip);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回格式</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        ip: &quot;58.63.47.115&quot;,</span></span><br><span class="line"><span class="comment">        pro: &quot;广东省&quot;,</span></span><br><span class="line"><span class="comment">        proCode: &quot;440000&quot;,</span></span><br><span class="line"><span class="comment">        city: &quot;广州市&quot;,</span></span><br><span class="line"><span class="comment">        cityCode: &quot;440100&quot;,</span></span><br><span class="line"><span class="comment">        region: &quot;天河区&quot;,</span></span><br><span class="line"><span class="comment">        regionCode: &quot;440106&quot;,</span></span><br><span class="line"><span class="comment">        addr: &quot;广东省广州市天河区 电信&quot;,</span></span><br><span class="line"><span class="comment">        regionNames: &quot;&quot;,</span></span><br><span class="line"><span class="comment">        err: &quot;&quot;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">sendGet</span><span class="params">(String param)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">urlNameString</span> <span class="operator">=</span> IPUtils.IP_URL + <span class="string">&quot;?&quot;</span> + param;</span><br><span class="line">            log.info(<span class="string">&quot;sendGet - &#123;&#125;&quot;</span>, urlNameString);</span><br><span class="line">            <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlNameString);</span><br><span class="line">            <span class="comment">//连接设置</span></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> realUrl.openConnection();</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line">            <span class="comment">//发送连接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">//获取解析后的返回的响应数据</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//拼接结果</span></span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;recv - &#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConnectException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用HttpUtils.sendGet ConnectException, url=&quot;</span> + IPUtils.IP_URL + <span class="string">&quot;,param=&quot;</span> + param, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用HttpUtils.sendGet SocketTimeoutException, url=&quot;</span> + IPUtils.IP_URL + <span class="string">&quot;,param=&quot;</span> + param, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用HttpUtils.sendGet IOException, url=&quot;</span> + IPUtils.IP_URL + <span class="string">&quot;,param=&quot;</span> + param, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用HttpsUtil.sendGet Exception, url=&quot;</span> + IPUtils.IP_URL + <span class="string">&quot;,param=&quot;</span> + param, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;调用in.close Exception, url=&quot;</span> + IPUtils.IP_URL + <span class="string">&quot;,param=&quot;</span> + param, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project-03-看点资讯管理系统</title>
      <link href="/2023/11/21/project-03-%E7%9C%8B%E7%82%B9%E8%B5%84%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/21/project-03-%E7%9C%8B%E7%82%B9%E8%B5%84%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>项目简介：cms主要是通过用户管理、角色管理、栏目管理、评论管理、资讯管理等模块实现对文章、新闻等数据内容的管理</p><p>项目代码：<a href="https://gitee.com/luozongwei/cms">https://gitee.com/luozongwei/cms</a></p></blockquote><h1 id="项目特色"><a href="#项目特色" class="headerlink" title="项目特色"></a>项目特色</h1><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><blockquote><p>官网yyds：<a href="https://baomidou.com/">https://baomidou.com/</a></p></blockquote><p>通过MyBatis-Plus我们可以学到：</p><ul><li>mp注解使用、</li><li>代码生成器(快速搭建基本架构)</li><li>CRUD接口：单表的操作基本上不在需要写sql语句啦！</li><li>条件构造器：根据自己的业务需求，创建单表的where条件</li><li>主键策略：<ul><li>AUTO：数据库ID自增</li><li>NONE：不设置主键类型（默认跟随全局~&#x3D;INPUT）</li><li>INPUT：用户自定义ID策略，比如 JD234351</li><li>ASSIGN_ID：雪花算法</li><li>ASSIGN_UUID：UUID算法</li></ul></li></ul><p><font color="#d12920">注意：使用雪花算法作为id生成策略会存在Bug！！</font></p><p>官方雪花算法长度过长导致JS精度丢失问题：</p><p><img src="/2023/11/21/project-03-%E7%9C%8B%E7%82%B9%E8%B5%84%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20231121102323682.png" alt="image-20231121102323682"></p><p>解决方案：</p><p>注解：@JsonSerialize(using &#x3D; ToStringSerializer.class)，将后端–&gt;Long–&gt;String–&gt;前端; 前端–&gt;String–&gt;Long–&gt;后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 文章id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = ToStringSerializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p><strong>建议：雪花算法生成的ID值，数据库中varchar或char类型，Java类中用String类型</strong></p><ul><li>自定义ID生成器</li></ul><p>自定义id生成器 实现 IdentifierGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户自定义的id生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdentifierGenerator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Number <span class="title function_">nextId</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成一个数字id</span></span><br><span class="line">        <span class="keyword">return</span> Math.random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nextUUID</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成一个字符串id</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;JD&quot;</span>+System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MybatisPlusConfig注册CustomIdGenerator到IOC容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IdentifierGenerator <span class="title function_">idGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomIdGenerator</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>逻辑删除</li></ul><p>在application.yml中设置全局逻辑删除字段和值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">cms_</span></span><br><span class="line">      <span class="comment"># 逻辑删除字段名</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：未删除为0</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 逻辑删除字面值：删除为1</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 雪花算法全局设置</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.briup.cms.bean</span></span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<span class="comment">//如果配置多个插件,切记分页最后添加</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体的使用请看官网</li></ul><p><img src="/2023/11/21/project-03-%E7%9C%8B%E7%82%B9%E8%B5%84%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20231121113009900.png" alt="image-20231121113009900"></p><p><img src="/2023/11/21/project-03-%E7%9C%8B%E7%82%B9%E8%B5%84%E8%AE%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20231121113026102.png" alt="image-20231121113026102"></p><p><strong>印象深刻点</strong>：selectMaps 可以有选择的  展示列、聚合函数</p><p>注意：因为要使用自定义列的形式，应当使用QueryWrapper&lt;&gt; 而非 lqw</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借助mybatisPlus简化操作</span></span><br><span class="line">QueryWrapper&lt;Category&gt; categoryQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">categoryQueryWrapper.select(<span class="string">&quot;max(order_num) as num&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = categoryMapper.selectMaps(categoryQueryWrapper);</span><br><span class="line">orderNum = (Integer) maps.get(<span class="number">0</span>).get(<span class="string">&quot;num&quot;</span>);</span><br></pre></td></tr></table></figure><p>lqw.select(可变长函数接口);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> LambdaQueryWrapper&lt;T&gt; <span class="title function_">select</span><span class="params">(SFunction&lt;T, ?&gt;... columns)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.select(Arrays.asList(columns));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qw.select(可变长字符串);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> QueryWrapper&lt;T&gt; <span class="title function_">select</span><span class="params">(String... columns)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.select(Arrays.asList(columns));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用mp还能通过流的形式来实现，但是这只是对于数据量比较小的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先一次性从数据库中将数据查询出来</span></span><br><span class="line">List&lt;Category&gt; categoryList = categoryMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// findAny 返回的是一个Optional类型；orElse表示前面没有结果则返回null</span></span><br><span class="line"><span class="type">Category</span> <span class="variable">oldCategory</span> <span class="operator">=</span> categoryList.stream().filter(e -&gt; e.getId().equals(id)).findAny().orElse(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// anyMatch只要匹配到一个就返回true</span></span><br><span class="line"><span class="keyword">return</span> categoryList.stream().anyMatch(e -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.getParentId() == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> e.getParentId().equals(id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h2><blockquote><p>入坑：<a href="https://easyexcel.opensource.alibaba.com/">EasyExcel官方文档 </a></p></blockquote><h3 id="读EasyExcel"><a href="#读EasyExcel" class="headerlink" title="读EasyExcel"></a>读EasyExcel</h3><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RequestPart 变成参数必选，可以设置参数名对应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;导入栏目数据从excel中&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/import&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">imports</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">// 主要是为了得到一个输入流</span></span><br><span class="line">    categoryService.imports(file.getInputStream());</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;数据导入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式实现excel字段和Java对象字段转换功能：</p><p>难点：excel–&gt;converter–&gt;listener–&gt;service 如何能够顺利得实现父栏目名称转变成父栏目id</p><h4 id="第一种实现方法：使用转换器转换器Converter"><a href="#第一种实现方法：使用转换器转换器Converter" class="headerlink" title="第一种实现方法：使用转换器转换器Converter"></a>第一种实现方法：使用转换器转换器Converter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栏目删除状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="meta">@ExcelProperty(value = &quot;栏目删除状态&quot;, converter = DeletedConverter.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父栏目id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ExcelProperty(value = &quot;父栏目&quot;, converter = CategoryParentIdConverter.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer parentId;</span><br></pre></td></tr></table></figure><p>两个转换器如下：</p><ul><li>DeletedConverter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeletedConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启对Integer的支持 （感觉开启对应Java属性的类型，相当于多了一个泛型检查）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer.class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Excel文件中单元格的数据类型-String (对应位置导出到Excel的数据类型)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用：将单元格里的数据转为java对象，也就是 被删除-&gt;1，未被删除-&gt;0</span></span><br><span class="line"><span class="comment">     * 用于导入excel时对逻辑字段删除字段进行转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData            数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentProperty     单元格内容属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> globalConfiguration 全局配置对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer -&gt; java实体类属性中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> cellData.getStringValue().equals(<span class="string">&quot;被删除&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用：将单元格里的数据转为java对象，也就是 被删除-&gt;1，未被删除-&gt;0</span></span><br><span class="line"><span class="comment">     * 用于导入excel时对逻辑字段删除字段进行转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 读取转换器上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadConverterContext&lt;?&gt; context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getReadCellData().getStringValue().equals(<span class="string">&quot;被删除&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在导出时，将逻辑删除字段中的 0-&gt;未被删除；1-&gt;被删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value               逻辑删除字段的值 1-&gt;被删除；0-&gt;未被删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentProperty     单元格内容属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> globalConfiguration 全局配置对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(Integer value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;Integer&gt;(value.equals(<span class="number">1</span>) ? <span class="string">&quot;被删除&quot;</span> : <span class="string">&quot;未被删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在导出时,将逻辑删除字段中的 0 转换为 未被删除 1 转换为 被删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 编写转换器上下文对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(WriteConverterContext&lt;Integer&gt; context) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;Integer&gt;(context.getValue().equals(<span class="number">1</span>) ? <span class="string">&quot;被删除&quot;</span> : <span class="string">&quot;未被删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>CategoryParentIdConverter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryParentIdConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存放父栏目数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Category&gt; categoryList;</span><br><span class="line">    <span class="comment">// 用来存放parentName和返回值的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, String&gt; parentNameMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 父栏目名称 找寻 父栏目id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentName 父栏目名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 父栏目id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">convertNameToId</span><span class="params">(String parentName)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(parentName) &amp;&amp; !parentName.trim().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 根据parentName查找category对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryList.stream().filter(e -&gt; e.getName().equals(parentName))</span><br><span class="line">                .findAny().orElse(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 判断category是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (category == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 不存在</span></span><br><span class="line">                <span class="comment">// throw new ServiceException(ResultCode.PCATEGORY_IS_INVALID);</span></span><br><span class="line">                <span class="comment">// 通过时间戳计算出一个唯一的Long类型id</span></span><br><span class="line">                <span class="comment">// parentNameMap.put(System.currentTimeMillis(),)</span></span><br><span class="line">                <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> random.nextInt(Integer.MAX_VALUE);</span><br><span class="line">                <span class="keyword">while</span> (parentNameMap.containsKey(-randomNum)) &#123;</span><br><span class="line">                    randomNum = -random.nextInt(Integer.MAX_VALUE);</span><br><span class="line">                &#125;</span><br><span class="line">                parentNameMap.put(-randomNum, parentName);</span><br><span class="line">                <span class="keyword">return</span> -randomNum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存在 获取id，数据库中存在该parentName对应的 parentId</span></span><br><span class="line">            <span class="keyword">return</span> category.getId();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CategoryListener</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析一行，回调方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category        从excel中导入的栏目对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> analysisContext 分析上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Category category, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">    <span class="comment">// 校验名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> category.getName();</span><br><span class="line">    <span class="comment">// 判断栏目名是否有效</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(name) || name.trim().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;第%s行名称为空，请核实&quot;</span>,</span><br><span class="line">                                                 analysisContext.readRowHolder().getRowIndex() + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断栏目名是否重复存在</span></span><br><span class="line">    <span class="keyword">if</span> (names.contains(name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;第%s行名称已重复，请核实&quot;</span>,</span><br><span class="line">                                                 analysisContext.readRowHolder().getRowIndex() + <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是一级栏目直接插入，生成id</span></span><br><span class="line">        <span class="keyword">if</span> (category.getParentId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            categoryMapper.insert(category);</span><br><span class="line">            CategoryParentIdConverter.categoryList.add(category);</span><br><span class="line">        &#125;</span><br><span class="line">        names.add(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CategoryServiceImpl</li></ul><p>关于ExcelUtils可以看gitee仓库代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">imports</span><span class="params">(InputStream file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、先更新CategoryParentIdConverter中的categoryList数据</span></span><br><span class="line">    CategoryParentIdConverter.categoryList = categoryMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取数据</span></span><br><span class="line">    <span class="comment">// 方法一：使用工具类excelUtils</span></span><br><span class="line">    <span class="comment">// List&lt;Category&gt; list = excelUtils.importData(file, Category.class, new CategoryListener());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二：使用原生的EasyExcel，其实主要目的是为了可以返回指定的List&lt;Category&gt;集合</span></span><br><span class="line">    <span class="type">ExcelReaderBuilder</span> <span class="variable">readerBuilder</span> <span class="operator">=</span> EasyExcel.read(file, Category.class, <span class="keyword">new</span> <span class="title class_">CategoryListener</span>(categoryMapper));</span><br><span class="line">    <span class="comment">// headRowNumber(1)表示 从第二行开始才是数据</span></span><br><span class="line">    List&lt;Category&gt; list = readerBuilder.headRowNumber(<span class="number">1</span>).doReadAllSync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将一级栏目和二级栏目进行分离</span></span><br><span class="line">    List&lt;Category&gt; secondLevelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (category.getParentId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            secondLevelList.add(category);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、将数据放入数据库当中</span></span><br><span class="line">    <span class="comment">// 注入parentNameMap</span></span><br><span class="line">    Map&lt;Integer, String&gt; parentNameMap = CategoryParentIdConverter.parentNameMap;</span><br><span class="line">    List&lt;Category&gt; categoryList = categoryMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 从parentNameMap获取randomNum-&gt;得到parentName--&gt;真正parentId</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; secondLevelList.size(); i++) &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> secondLevelList.get(i);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">randomNum</span> <span class="operator">=</span> category.getParentId();</span><br><span class="line">        <span class="keyword">if</span> (randomNum &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parentName</span> <span class="operator">=</span> parentNameMap.get(randomNum);</span><br><span class="line">        <span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> categoryList.stream().filter(e -&gt; e.getName().equals(parentName)).findAny().orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResultCode.PARAM_IS_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">        category.setParentId(c.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对parentNameMap进行置空</span></span><br><span class="line">    parentNameMap.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入二级栏目</span></span><br><span class="line">    <span class="built_in">this</span>.saveBatch(secondLevelList, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二种实现方法：不使用转换器Converter"><a href="#第二种实现方法：不使用转换器Converter" class="headerlink" title="第二种实现方法：不使用转换器Converter"></a>第二种实现方法：不使用转换器Converter</h4><ul><li>使用CategoryImportData接受Excel数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栏目删除状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="meta">@ExcelProperty(value = &quot;栏目删除状态&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String deleted;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父栏目id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ExcelProperty(value = &quot;父栏目&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String parentName;</span><br></pre></td></tr></table></figure><ul><li>CategoryServiceImpl 具体的实现逻辑都在这里 【推荐】</li></ul><p>本质就是所有的判断逻辑都在service层实现，包括字段的转换、数据是否为空的判断等等，</p><p>可使用mp提供的批量插入方法，先批量插入一级栏目，再批量插入二级栏目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">imports</span><span class="params">(InputStream file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ExcelReaderBuilder</span> <span class="variable">readerBuilder</span> <span class="operator">=</span> EasyExcel.read(file, CategoryImportData.class, <span class="keyword">new</span> <span class="title class_">CategoryListener</span>(categoryMapper));</span><br><span class="line">    List&lt;CategoryImportData&gt; importDataList = readerBuilder.headRowNumber(<span class="number">1</span>).doReadAllSync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询</span></span><br><span class="line">    List&lt;Category&gt; categoryOneList = importDataList.stream()</span><br><span class="line">        .filter(e -&gt; e.getParentName() == <span class="literal">null</span>)</span><br><span class="line">        .map(e -&gt; &#123;</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> convertData(e);</span><br><span class="line">            category.setParentId(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> category;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="built_in">this</span>.saveBatch(categoryOneList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二级栏目</span></span><br><span class="line">    List&lt;Category&gt; categoryTwoList = importDataList.stream()</span><br><span class="line">        .filter(e -&gt; e.getParentName() != <span class="literal">null</span>)</span><br><span class="line">        .map(e -&gt; &#123;</span><br><span class="line">            <span class="comment">// parentName-&gt; category</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">parentCategory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaQueryChainWrapper</span>&lt;Category&gt;(categoryMapper)</span><br><span class="line">                .eq(Category::getName, e.getParentName()).one();</span><br><span class="line">            <span class="comment">// 判空代码的三种方法</span></span><br><span class="line">            <span class="comment">// 1、if条件判空</span></span><br><span class="line">            <span class="comment">// if (c == null) &#123;</span></span><br><span class="line">            <span class="comment">//     throw new ServiceException(ResultCode.PARAM_IS_INVALID);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、使用Optional</span></span><br><span class="line">            <span class="comment">// Optional.ofNullable(c).orElseThrow(()-&gt;new ServiceException(ResultCode.PARAM_IS_INVALID))</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、使用Assert</span></span><br><span class="line">            AssertCmsUtil.notNull(parentCategory, <span class="string">&quot;父栏目&quot;</span>);</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> convertData(e);</span><br><span class="line">            category.setParentId(parentCategory.getId());</span><br><span class="line">            <span class="keyword">return</span> category;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="built_in">this</span>.saveBatch(categoryTwoList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Category <span class="title function_">convertData</span><span class="params">(CategoryImportData e)</span> &#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">    BeanUtils.copyProperties(e, category, <span class="string">&quot;deleted&quot;</span>, <span class="string">&quot;parentId&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">deleted</span> <span class="operator">=</span> <span class="string">&quot;被删除&quot;</span>.equals(e.getDeleted()) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    category.setParentId(deleted);</span><br><span class="line">    <span class="keyword">return</span> category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学习：三种判空手段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判空代码的三种方法</span></span><br><span class="line"><span class="comment">// 1、if条件判空</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResultCode.PARAM_IS_INVALID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、使用Optional</span></span><br><span class="line">Optional.ofNullable(c).orElseThrow(()-&gt;<span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResultCode.PARAM_IS_INVALID));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、使用Asserta</span></span><br><span class="line">AssertCmsUtil.notNull(parentCategory, <span class="string">&quot;父栏目&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>自定义AssertCmsUtil工具类，模仿springframework写滴，其实就是将空值条件封装起来，提供统一方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.exception.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.briup.cms.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AssertCmsUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/23 10:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AssertCmsUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isNUll</span><span class="params">(<span class="meta">@Nullable</span> Object object, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isNull</span><span class="params">(<span class="meta">@Nullable</span> Object object, ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(resultCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(<span class="meta">@Nullable</span> Object object, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(<span class="meta">@Nullable</span> Object object, ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(resultCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写EasyExcel"><a href="#写EasyExcel" class="headerlink" title="写EasyExcel"></a>写EasyExcel</h3><p>提供了很多的实体类：</p><ul><li>HttpServletResponse.SC_OK &#x3D; 200</li><li>MediaType.APPLICATION_OCTET_STREAM_VALUE &#x3D; application&#x2F;octet-stream 要和前端一起沟通决定传输方式</li><li>ExcelTypeEnum.XLSX</li></ul><p> “Content-disposition” : “attachment;filename*&#x3D;utf-8’’” 表示要以附件的形式下载文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1、更新数据 + 获取</span></span><br><span class="line">    List&lt;Category&gt; list = categoryMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    CategoryParentIdConverter.categoryList = list;</span><br><span class="line">    <span class="comment">// 2、导出数据</span></span><br><span class="line">    <span class="comment">// 方法一：使用工具类</span></span><br><span class="line">    <span class="comment">// excelUtils.exportExcel(response, list, Category.class, &quot;栏目信息表&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二：</span></span><br><span class="line">    <span class="comment">// 设置响应状态</span></span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK); <span class="comment">// 200 </span></span><br><span class="line">    <span class="comment">// 设置Excel表名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;栏目信息表&quot;</span>;</span><br><span class="line">    <span class="comment">// 设置响应得头部信息</span></span><br><span class="line">    <span class="comment">// 设置编码格式，主要是给tomcat使用的编码格式</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// http服务器设置响应头</span></span><br><span class="line">    response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE); <span class="comment">// application/octet-stream</span></span><br><span class="line">    <span class="comment">// 设置响应的编码格式 </span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取导出对象builder</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="type">ExcelWriterBuilder</span> <span class="variable">writerBuilder</span> <span class="operator">=</span> EasyExcel.write(os, Category.class).excelType(ExcelTypeEnum.XLSX);</span><br><span class="line">    <span class="comment">// writer</span></span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">writer</span> <span class="operator">=</span> writerBuilder.build();</span><br><span class="line">    <span class="comment">// sheet</span></span><br><span class="line">    <span class="type">WriteSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.writerSheet().build();</span><br><span class="line">    <span class="comment">// 调用write方法</span></span><br><span class="line">    writer.write(list, sheet);</span><br><span class="line">    writer.finish();</span><br><span class="line">    os.flush();</span><br><span class="line">    writer.close();</span><br><span class="line">    os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="md5算法-Jwt-ThreadLocal"><a href="#md5算法-Jwt-ThreadLocal" class="headerlink" title="md5算法+Jwt+ThreadLocal"></a>md5算法+Jwt+ThreadLocal</h2></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>temp-01-个人项目汇总</title>
      <link href="/2023/11/10/temp-01-%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
      <url>/2023/11/10/temp-01-%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>众里寻他千百度，蓦然回首，那人却在，灯火阑珊处！</p></blockquote><h1 id="Java项目集合"><a href="#Java项目集合" class="headerlink" title="Java项目集合"></a>Java项目集合</h1><blockquote><p><a href="https://www.lzwgxust.top/post/b374ca99.html">project-01-物联网环境检测系统</a></p></blockquote><blockquote><p><a href="https://www.lzwgxust.top/post/f11e7a87.html">project-02-苍穹外卖</a></p></blockquote><blockquote><p><a href="https://www.lzwgxust.top/post/33997261.html">project-03-看点资讯管理系统</a>：进行ing，待完成</p></blockquote><blockquote><p>故事未完，敬请期待！！！！</p></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> temp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expand-99-23种设计模式</title>
      <link href="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>23种设计模式并非朝夕之间就能吃透滴！ 注定是一个漫长的过程, 与诸君共同求索！</p></blockquote><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>单例模式指的是在应用的整个生命周期内只能存在一个实例！</p><p>他有很多好处，能够避免实例对象的重复创建，减少创建实例的系统开销，节省内存。</p></blockquote><p>单例模式的5种实现方案</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>该方式是使用 synchronized 关键字进行加锁，保证了线程安全性</p><ul><li>优点：在第一次调用才初始化，避免了内存浪费</li><li>缺点：对获取实例方法加锁，大大降低了并发效率</li></ul><p>由于加了锁，对性能影响较大，不推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazy instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLazy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唯一公开获取实例的方法（静态工厂方法），该方法使用synchronized加锁，来保证线程安全性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonLazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">SingletonLazy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式是利用类加载机制来避免了多线程的同步问题，所以线程安全的</p><ul><li>优点：未加锁，执行效率高</li><li>缺点：类加载时就初始化实例，造成内存浪费</li></ul><p>如果对内存要求不高的情况，还是比较推荐使用这种方式滴~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonEager</span> &#123;</span><br><span class="line"><span class="comment">// 私有实例，静态变量会在类加载的时候初始化，是线程安全的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingletonEager</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonEager</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonEager</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonEager <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双重锁校验"><a href="#双重锁校验" class="headerlink" title="双重锁校验"></a>双重锁校验</h2><p>利用volatile修饰符的线程可见性（被一个线程修改后，其他线程立即可见），即保证了懒加载，又保证了高性能，所以推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDCL</span> &#123;</span><br><span class="line"><span class="comment">// 私有实例，volatile修饰的变量是具有可见性的（即被一个线程修改后，其他线程立即可见）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDCL instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonDCL</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonDCL <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个判断是为了防止已经创建了instance实例后，不在需要拿锁，进而提高了效率</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDCL.class) &#123;</span><br><span class="line">                <span class="comment">// 第二个判断是为了避免重复创建instance实例对象</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">SingletonDCL</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>该模式利用了静态内部类延迟初始化的特性，来达到双重校验锁方式一样的功能。由于需要借助辅助类，并不常用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonInnerClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonInnerClass</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonInnerClass <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有的静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyHolder</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingletonInnerClass</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonInnerClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>该方式利用了枚举类的特性，不仅能避免线程同步问题，还防止反序列化重新创建新的对象。</p><p>但由于这种编码方式还不能适应，所以实际工作种很少适用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举种定义方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>代理模式是一种常见的设计模式，它提供间接对目标对象访问的方式，通 过代理对象访问目标对象，从而在在目标对象现有的功能能上，增加额外 的功能补充，实现扩展目标对象的功能</p></blockquote><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231107183753479.png" alt="image-20231107183753479"></p><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231107183828297.png" alt="image-20231107183828297"></p><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231107183941583.png" alt="image-20231107183941583"></p><blockquote><p>可以看出，在不改变目标对象功能的基础上，使用代理对象，可以给目标 对象添加的额外的功能。</p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><blockquote><p>静态代理是代理模式的实现方式之一，在程序运行前，<strong>手动创建代理类</strong>，从而 实现对目标类中的方法进行增强。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.springbootaopquickstart.service.impl;</span><br><span class="line"><span class="comment">// 实现对应的 目标类的接口，可能不止一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImplProxy</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个目标类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookServiceImpl bookServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBook</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 对removeBook的逻辑增强</span></span><br><span class="line">        <span class="comment">// 日志和事务管理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开始事务&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用主体逻辑， 目标类</span></span><br><span class="line">        bookServiceImpl.removeBook(id);</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;回滚事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"><span class="comment">// 跟上面一样，只是调用主体逻辑不同</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231107185059938.png" alt="image-20231107185059938"></p><blockquote><p>注意：在动态代理中，代理类是在<strong>运行时期</strong>生成的！</p></blockquote><h3 id="JDK动态代理-（针对接口实现类）"><a href="#JDK动态代理-（针对接口实现类）" class="headerlink" title="JDK动态代理 （针对接口实现类）"></a>JDK动态代理 （针对接口实现类）</h3><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231107185410156.png" alt="image-20231107185410156"></p><p>Proxy类中的 newProxyInstance 方法，可以在运行启动期间，动态生成指定 接口的代理类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * loader,目标类的类加载器</span></span><br><span class="line"><span class="comment">    * interfaces，目标类所实现的接口，可以是多个</span></span><br><span class="line"><span class="comment">    * InvocationHandler，InvocationHandler接口的实现类对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.lang.reflect.InvocationHandler 接口中只有一个抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * proxy,将来动态生成的代理类对象</span></span><br><span class="line"><span class="comment">    * method，将来需要代理的目标对象中的方法</span></span><br><span class="line"><span class="comment">    * args，将来调用目标对象方法时所传入的参数列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在实际的操作中，主要使用的是第二和第三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">BookServiceImpl2</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookServiceImpl2</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个动态代理对象</span></span><br><span class="line">    <span class="comment">// 1、类加载器</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">// 2、主题接口</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">    <span class="comment">// 3、方法增强处理器</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, (proxy, method, args) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 处理的主题逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method name: &quot;</span> + method.getName()); <span class="comment">// 下面使用：method name: getBookById</span></span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用代理类对象</span></span><br><span class="line">    <span class="comment">// proxyInstance = class com.sun.proxy.$Proxy131</span></span><br><span class="line">    System.out.println(<span class="string">&quot;proxyInstance = &quot;</span> + proxyInstance.getClass()); </span><br><span class="line">    <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) proxyInstance;</span><br><span class="line">    <span class="comment">// 下面一行代码：会报空指针异常，可能和代理类的生命周期有关？我猜的哈哈</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(<span class="number">2</span>); </span><br><span class="line">    System.out.println(<span class="string">&quot;book = &quot;</span> + book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231108193919835.png" alt="image-20231108193919835"></p><h3 id="CGLIB动态代理（针对继承子类）"><a href="#CGLIB动态代理（针对继承子类）" class="headerlink" title="CGLIB动态代理（针对继承子类）"></a>CGLIB动态代理（针对继承子类）</h3><blockquote><p>使用JDK动态代理，有一个前提条件，就是目标对象必须实现了一个或多个接 口，那么产生的代理对象就是用来代理这个接口中的方法。</p></blockquote><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231108193436851.png" alt="image-20231108193436851"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCglib</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">    enhancer.setSuperclass(BookServiceImpl2.class);</span><br><span class="line">    enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象实例</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 目标类种的方法对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 方法代理对象</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开启事务: &quot;</span> + method.getName());</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) enhancer.create();</span><br><span class="line">    System.out.println(<span class="string">&quot;bookService.getClass() = &quot;</span> + bookService.getClass());</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;book = &quot;</span> + book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231108193612242.png" alt="image-20231108193612242"></p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote><p>工厂模式最主要解决的问题就是创建者和调用者的耦合，代码层面其实是取消对象new的使用。</p><p><font color="#d12920">原材料(铁、铜)—&gt;Build建造者—&gt;原件（合金）—&gt;factory工厂—&gt;产品</font></p></blockquote><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><blockquote><p>简单工厂模式——也叫静态工厂模式，这里举个例子：你要去买一台手机，你不用关心手机是怎么生产出来的，里面的零件具体又是怎么制造的，这些通通都交给工厂去处理，你尽管去买手机就好了</p></blockquote><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231111183706960.png" alt="image-20231111183706960"></p><ul><li>Phone接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>品牌类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMi</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：小米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MeiZu</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：魅族&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增加的手机型号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWei</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：刘德华为华为代言&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PhoneFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title function_">getPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XiaoMi&quot;</span>.equalsIgnoreCase(phone)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMi</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;MeiZu&quot;</span>.equalsIgnoreCase(phone)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MeiZu</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;HuaWei&quot;</span>.equalsIgnoreCase(phone)) &#123;</span><br><span class="line">            <span class="comment">// 新增会修改源码，违反了开闭原则</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWei</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Customer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">xiaoMi</span> <span class="operator">=</span> PhoneFactory.getPhone(<span class="string">&quot;xiaoMi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;xiaoMi = &quot;</span> + xiaoMi);</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">meiZu</span> <span class="operator">=</span> PhoneFactory.getPhone(<span class="string">&quot;meiZu&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;meiZu = &quot;</span> + meiZu);</span><br><span class="line">        <span class="comment">// 新增的手机型号</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">huaWei</span> <span class="operator">=</span> PhoneFactory.getPhone(<span class="string">&quot;huaWei&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;huaWei = &quot;</span> + huaWei);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>那么简单工厂模式会遇到什么问题呢？</strong><br>随着手机品牌增多，工厂生产也需要对应的增加，工厂内部就需要不断的调整。<br>从代码层面——对内部代码需要增加(也就是需要修改内部代码：那么就会违反OOP原则</p><p>开闭原则：<strong>一个软件实体应当对扩展开放，对修改关闭</strong>。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><blockquote><p>当新的手机品牌出现，不是放在同一个工厂生产，而是<strong>自己拥有独立工厂生产</strong>。</p></blockquote><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231112165639690.png" alt="image-20231112165639690"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将工厂抽象出来</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每一个品牌创建自己的工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiFactory</span> <span class="keyword">implements</span> <span class="title class_">PhoneFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMi</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MeiZuFactory</span> <span class="keyword">implements</span> <span class="title class_">PhoneFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MeiZu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiFactory</span> <span class="keyword">implements</span> <span class="title class_">PhoneFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWei</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>品牌类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMi</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：小米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MeiZu</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：魅族&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWei</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;官方正品：刘德华为华为代言&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Customer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过自己的工厂将品牌创建出来</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">xiaoMi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoMiFactory</span>().getPhone();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">meiZu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MeiZuFactory</span>().getPhone();</span><br><span class="line">        <span class="comment">// 新增型号</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">huaWei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiFactory</span>().getPhone();</span><br><span class="line">        xiaoMi.getBrand();</span><br><span class="line">        meiZu.getBrand();</span><br><span class="line">        huaWei.getBrand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：工厂方法模式解决简单工厂模式是需要付出代价的！</p><p>主要是每新增一个品牌，我们就需要创建一个新的工厂，需要花费很大的成本。</p><p>可以通过反射来减少new的使用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException,IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classPath);</span><br><span class="line">        <span class="keyword">return</span> (Phone) aClass.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        PhoneFactory.getInstance(<span class="string">&quot;Factory.Xiaomi&quot;</span>).getBrand();</span><br><span class="line">        PhoneFactory.getInstance(<span class="string">&quot;Factory.Meizu&quot;</span>).getBrand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote><p>这个抽象工厂模式理解起来有些困难，需要多看，多理解</p></blockquote><p>现实生活中许多工厂是综合型的工厂，能生产多等级（种类）的产品，比如</p><ul><li>农场里既可以养动物又可以种植物</li><li>电器厂即可生产电视机又可生产洗衣机或空调</li><li>一个大学里边不单单有软件专业也可能有生物专业</li></ul><p>说白了，就是一个工厂不单单只有一种功能，它可以生产很多不同类型的产品！</p><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231113125712685.png" alt="image-20231113125712685"></p><ul><li><p>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。</p></li><li><p>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</p></li><li><p>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</p></li><li><p>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系</p></li></ul><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231113130225363.png" alt="image-20231113130225363"></p><ul><li>Phone抽象和Router抽象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小米实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiPhone</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiRouter</span> <span class="keyword">implements</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>华为实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhone</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiRouter</span> <span class="keyword">implements</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">    Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">    Router <span class="title function_">getRouter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>各个工厂实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiFactory</span> <span class="keyword">implements</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiFactory</span> <span class="keyword">implements</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Customer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================小米系列========================&quot;</span>);</span><br><span class="line">        <span class="type">XiaoMiFactory</span> <span class="variable">xiaoMiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoMiFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> xiaoMiFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSms();</span><br><span class="line">        <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> xiaoMiFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.setting();</span><br><span class="line">        System.out.println(<span class="string">&quot;=================华为系列========================&quot;</span>);</span><br><span class="line">        <span class="type">HuaWeiFactory</span> <span class="variable">huaWeiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiFactory</span>();</span><br><span class="line">        phone = huaWeiFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSms();</span><br><span class="line">        router = huaWeiFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.setting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>简单工厂模式：在实际开发中会发现比较常用，尽管上面讲了不符合（面向对象）OOP原则</li><li>工厂方法模式：不修改工厂类的前提，也就是不修改已有类，实现对扩展是开发，对修改关闭。</li><li>抽象工厂模式：<ul><li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则</li><li>其缺点是：当产品族中需要增加一个新的产品（海尔冰箱）时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</li></ul></li></ul><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><blockquote><p>在开发中，有时候我们需要创建出一个很复杂的对象，这个对象的创建有一个固定的步骤，并且每个步骤中会涉及到多个组件对象，这个时候就可以考虑使用建造者模式。</p><p>使用建造者模式将原本复杂的对象创建过程按照规律将其分解成多个小步骤，这样在构建对象时可以灵活的选择或修改步骤。</p><p><strong>建造者模式将对象的创建和表示过程(使用过程)进行分离</strong>，这样我们可以使用同样的过程，只需修改这个过程中的小步骤，便能够构建出不同的对象。而对于调用方来说，我们只需要传入需要构建的类型，便能够得到需要的对象，并不需要关系创建的过程，从而实现解耦。</p></blockquote><p>建造者模式结构</p><ul><li>产品（Product）：表明需要创建的产品对象</li><li>抽象建造者（Builder）：抽象出来的构建者，用于定义创建对象所需的步骤以及创建的步骤的调用过程</li><li>具体建造者（ConcreteBuilder）：抽象建造者的具体实现，对于不同的创建过程可以用不同的类进行实现</li><li>指挥者（Director）：使用Builder的类，提供给调用方使用，调用方通过使用指挥者来获取产品</li></ul><p><img src="/2023/11/07/expand-99-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20231113203016603.png" alt="image-20231113203016603"></p><ul><li>产品类，定义三个部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object part1;</span><br><span class="line">    <span class="keyword">private</span> Object part2;</span><br><span class="line">    <span class="keyword">private</span> Object part3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart1</span><span class="params">(Object part1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart2</span><span class="params">(Object part2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart3</span><span class="params">(Object part3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;part1=&quot;</span> + part1 +</span><br><span class="line">            <span class="string">&quot;, part2=&quot;</span> + part2 +</span><br><span class="line">            <span class="string">&quot;, part3=&quot;</span> + part3 +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象建造者类，构建了一个产品对象，并定义了构建产品三个部分所需要的三个方法以及获取产品的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPart1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPart2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPart3</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">getProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体建造者 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart1</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart1(<span class="string">&quot;builder 1 set part 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart2</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart2(<span class="string">&quot;builder 1 set part 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart3</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart3(<span class="string">&quot;builder 1 set part 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;builder 1 build product&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体建造者 2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder2</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart1</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart1(<span class="string">&quot;builder 2 set part 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart2</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart2(<span class="string">&quot;builder 2 set part 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart3</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPart3(<span class="string">&quot;builder 2 set part 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;builder 2 build product&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指挥者对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        builder.buildPart1();</span><br><span class="line">        builder.buildPart2();</span><br><span class="line">        builder.buildPart3();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Director</span> <span class="variable">director1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(<span class="keyword">new</span> <span class="title class_">ConcreteBuilder1</span>());</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product1</span> <span class="operator">=</span> director1.construct();</span><br><span class="line">    System.out.println(product1);</span><br><span class="line">    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    <span class="type">Director</span> <span class="variable">director2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(<span class="keyword">new</span> <span class="title class_">ConcreteBuilder2</span>());</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product2</span> <span class="operator">=</span> director2.construct();</span><br><span class="line">    System.out.println(product2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中各类注解</title>
      <link href="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文章主要是将日常SpringBoot项目中用到的注解记录下来。</p></blockquote><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p>注意：注解中只有value的时候 value是可以省略的 例如 @JsonProperty(value&#x3D;”xxx”) 中的value可以省略！</p></blockquote><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><ul><li>@SpringBootApplication<ul><li>@ComponentScan：默认是扫描启动类所在包及其子包的Component组件</li><li>@Import(XxxxSelector.class)</li><li>@Documented</li><li>@Inherited: <font color="#d12920">暂时不是很能理解这个注解的作用</font></li><li>@SpringBootConfiguration</li><li>EnableAutoConfuguration</li></ul></li><li>@MapperScan(“com.briup.dao”)</li><li>@EnableSwagger2Doc：原生Swagger</li><li>@SpringBootTest：测试类里面</li><li>@AutoConfiguration：JacksonObjectMapper</li><li>@Conditional<ul><li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean对象（类型或名称），才注册bean到IOC容器</li><li>@ConditionalOnProperty：判断配置文件application.yml中有对应属性和值，才注册bean到IOC容器、</li></ul></li><li>@EnableCaching；开启缓存注解功能<ul><li>@Cacheable：在方法执行前先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；否则调用方法并将方法返回值放到缓存中</li><li>@CachePut：将方法的返回值放到缓存中 （<strong>只放不取</strong>）</li><li>@CacheEvict：将一条或多条数据从缓存中删除</li></ul></li></ul><h2 id="Config-配置类"><a href="#Config-配置类" class="headerlink" title="Config 配置类"></a>Config 配置类</h2><ul><li>@Configuration</li><li>@EnableSwagger2WebMvc:   Knife4jConfiguration</li><li>@ConfigurationProperties(prefix &#x3D; “oss”)：可以批量的将外部的属性配置注入到bean对象的属 性中。</li><li>@ServletComponentScan: 开启对Servlet组件的支持</li><li>@EnableSwagger2：Swagger2Config配置类</li><li>@Bean：将方法返回结果注册到IOC容器中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该注解可将类声明为配置类，程序启动时会自动找到配置类执行里面@Bean方法，获取Bean对象注入Spring的IOC容器中进行管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4jConfig</span> &#123;</span><br><span class="line">    <span class="comment">//声明第三方bean</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span></span><br><span class="line">    <span class="comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名 saxReader</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in Dom4jConfig,saxReader()...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pojo-实体类"><a href="#Pojo-实体类" class="headerlink" title="Pojo 实体类"></a>Pojo 实体类</h2><ul><li>@Data<ul><li>@Getting</li><li>@Setting</li><li>@ToString(callSuper&#x3D;true)：可以调用父类的toString方法</li><li>@EqualsAndHashCode</li></ul></li><li>@NoArgsConstructor</li><li>@AllArgsConstructor</li><li>@Builder</li><li>@Value(“${oss.accessKey}”)：将配置文件.yml与实体类一 一对应。注解只能一个一个的进行外部属性的注入。</li><li>@Accessors(chain &#x3D; true)开启链式开发</li></ul><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231108200345208.png" alt="image-20231108200345208"></p><blockquote><p>具体使用看看这篇优质博客：<a href="https://blog.csdn.net/qq_52423918/article/details/120457840">Lombok插件@Accessors(chain &#x3D; true)开启链式开发</a></p></blockquote><ul><li>@JsonProperty(“id”)：保证序列化和反序列化的时候前后端属性名字能够对应上</li><li>@JsonFormat(pattern &#x3D; “yyyy-MM-dd HH:mm:ss” ,timezone &#x3D; “GMT+8”)</li><li>ApiModel：类上添加描述信息</li><li>ApiModelProperty：方法上添加描述信息</li><li>@RequiredArgsConstructor ：<a href="https://blog.csdn.net/Mango_Bin/article/details/123110916">Lombok注解：构造器注入：@RequiredArgsConstructor_@required</a></li><li>@TableFile(value, exist, select)</li><li>@TableName</li><li>@TableId(type &#x3D; IdType.xxx)</li></ul><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231114091119366.png" alt="image-20231114091119366"></p><ul><li>@TableLogic(value&#x3D;”0”, delval&#x3D;”1”)</li><li>@JsonSerialize(using &#x3D; ToStringSerializer.class) ：后端传给前端Long-&gt;String,前端传后端String-&gt;Long</li><li>@ExcelIgnore</li><li>@ExcelProperty(value &#x3D; “栏目删除状态”, converter &#x3D; DeletedConverter.class)</li><li>@JsonIgnore <ul><li>作用：在json序列化时将java bean中的一些属性忽略掉，<strong>序列化和反序列化都受影响</strong>。</li><li>使用方法：一般标记在属性或者方法上，返回的json数据即不包含该属性。</li></ul></li></ul><h2 id="Filter-过滤类"><a href="#Filter-过滤类" class="headerlink" title="Filter 过滤类"></a>Filter 过滤类</h2><ul><li>@WebFilter(urlPatterns &#x3D; “&#x2F;*”)：<code>/*</code>表示拦截所有请求</li></ul><h2 id="Aspect-切面类"><a href="#Aspect-切面类" class="headerlink" title="Aspect 切面类"></a>Aspect 切面类</h2><ul><li>@Aspect<ul><li>@Around(@annotation, execution) ：方法返回值必须是Object</li><li>@Before</li><li>@After</li><li>@AfterReturning</li><li>@AfterThrowing</li><li>@Pointcut</li></ul></li><li>@Order(1) &#x2F;&#x2F;切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字 越小越后执行, 两两对应）</li></ul><h2 id="Other类"><a href="#Other类" class="headerlink" title="Other类"></a>Other类</h2><ul><li>@RequestMapping<ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapper</li></ul></li></ul><blockquote><p>Put和Post的区别：<a href="https://blog.51cto.com/u_15964010/6246766">https://blog.51cto.com/u_15964010/6246766</a></p></blockquote><ul><li>@RestController<ul><li>@Controller</li><li>@ResponseBody</li></ul></li><li>@RequestParam<ul><li>required：是否为必传参数，<strong>默认为true</strong>，必须传递该参数 </li><li>defaultValue：参数默认值</li></ul></li></ul><blockquote><p><code>http://localhost:8081/simpleParam?name=zs&amp;age=21</code></p><p>绑定请求参数与处理器方法形参间的关系 即 <code>?后面的参数数据</code></p><p>结论：请求参数名与形参名不同时，使用@RequestParam注解关联请求参 数名与形参名</p></blockquote><ul><li><p>@RequestPart: 主要用于文件 MultipartFile类型参数</p></li><li><p>@DateTimeFormat</p><ul><li>前端必须按照@DateTimeFormat注解的pattern属性中指定的日期格式进行 参数传递。</li><li>后端Controller方法中，需要使用**Date或LocalDateTime(建议)**类型，来封装传递的 参数。</li></ul></li></ul><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231105153807420.png" alt="image-20231105153807420"></p><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231105153931974.png" alt="image-20231105153931974"></p><ul><li>@RequestBody</li><li>@PathVariable</li></ul><blockquote><p>路径参数：<code>http://localhost:8081/deleteById/1</code></p></blockquote><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231105154521311.png" alt="image-20231105154521311"></p><ul><li>@RestControllerAdvice：Advice增强类  其实就是Aop类<ul><li>@ControllerAdvice</li><li>@ResponseBody</li></ul></li><li>@ExceptionHandler</li></ul><blockquote><p>这篇博客写的很好：<a href="https://juejin.cn/post/7025484367539470344">RestControllerAdvice注解与全局异常处理</a></p></blockquote><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231106085550368.png" alt="image-20231106085550368"></p><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231106085706613.png" alt="image-20231106085706613"></p><ul><li>@Component<ul><li>@Controller</li><li>@Service</li><li>@Repository：Spring原生的 &#x3D;&#x3D;@Mapper Mybatis的</li></ul></li><li>@Api(tags &#x3D; “Swagger测试”)</li><li>@ApiOperation(notes&#x3D;”swagger测试”, value&#x3D;””)</li><li>@ApiImplicitParams()<ul><li>@ApiImplicitParam(name, value, required, paramType, dataType)</li></ul></li><li>@Autowired</li><li>@Resource </li><li>@Qualifier：指定注入的对象</li></ul><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231107182520958.png" alt="image-20231107182520958"></p><ul><li>@Param(“keyword”) String keyword </li><li>@Slf4j</li><li>@Test：Junit</li><li>@Transactional(rollbackFor: 异常回滚的属性,propagation：事务传播行为)</li><li>@SuppressWarnings(“unchecked”)：取消检查</li><li>@Scope：取值“singleton”or “prototype”：当取值苇prototype是会默认加上@Lazy</li><li>@Lazy：延迟加载, 可以延迟bean对象的初始化，延迟到第一次使用时创建</li><li>@ServerEndpoint(“&#x2F;ws&#x2F;{sid}”)：Websocket<ul><li>@OnOpen：连接成功调用的方法</li><li>@OnMessage：收到客户端消息后的方法</li><li>@OnClose：连接关闭调用的方法</li></ul></li></ul><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p><img src="/2023/11/05/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E7%B1%BB%E6%B3%A8%E8%A7%A3/image-20231204201430987.png" alt="image-20231204201430987"></p><ul><li><p>@EnableEurekaServer</p></li><li><p>@EnableFeignClients(“com.briup.cloud.web.rest”)</p></li><li><p>@EnableHystrix</p></li><li><p>@EnableDiscoveryClient</p></li><li><p>@EnableZuulProxy</p></li><li><p>@LoadBalanced</p></li><li><p>@FeignClient(name&#x3D;”producer”)</p></li><li><p>@SentinelResource(value&#x3D;”xxxx”, blockHandler&#x3D;”xxxx”)</p></li></ul></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template-01-各类云服务</title>
      <link href="/2023/11/04/template-01-%E5%90%84%E7%B1%BB%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/11/04/template-01-%E5%90%84%E7%B1%BB%E4%BA%91%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>俗话说得好：学渣就是一个字，抄！</p><p>本文章主要是将日常学习中用到的各类云服务模板记录下来。</p></blockquote><h1 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h1><h2 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h2><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛云OSS对象存储--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.7.0, 7.7.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--google json处理工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 单个文件大小，默认是1MB</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="comment"># 单次上传文件集合大小，默认是10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 配置七牛云OSS对象存储 （自定义的oss格式）</span></span><br><span class="line"><span class="attr">oss:</span></span><br><span class="line">  <span class="comment"># 配置AK</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">&quot;your accessKey&quot;</span></span><br><span class="line">  <span class="comment"># 配置SK</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">&quot;your secretKey&quot;</span></span><br><span class="line">  <span class="comment"># 配置桶（存储空间）</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">&quot;jd2311-lwsj&quot;</span></span><br><span class="line">  <span class="comment"># 配置基础域名（测试域名或个人完成备案和解析的域名）</span></span><br><span class="line">  <span class="attr">baseUrl:</span> <span class="string">&quot;http://s3ji1h27j.bkt.clouddn.com/&quot;</span></span><br></pre></td></tr></table></figure><ul><li>UploadConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;oss&quot;)</span> <span class="comment">// 读取application.yml中oss后面的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OSS Access key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OSS Secret key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bucketName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * url地址,用于拼接 文件上传成功后回显的url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>maven 同时添加依赖解决UploadConfig上面爆红问题</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UploadUtils</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UploadUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/11/3 17:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 七牛云oss文件上传工具类（图片）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadConfig uploadConfig; <span class="comment">// 注入配置信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传核心方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 待上传的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传成功后回显的 url路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fileToOSS</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传到七牛云OSS:&#123;&#125;&quot;</span>, file.getOriginalFilename());</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类(根据七牛云服务器地区进行设置,这里autoRegion会自动匹配相应地区七牛云服务)</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Region.autoRegion());</span><br><span class="line">        <span class="comment">//将配置传入UploadManager</span></span><br><span class="line">        <span class="type">UploadManager</span> <span class="variable">uploadManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadManager</span>(configuration);</span><br><span class="line">        <span class="comment">//验证AK与SK,AK与SK从配置类中获取</span></span><br><span class="line">        <span class="type">Auth</span> <span class="variable">auth</span> <span class="operator">=</span> Auth.create(uploadConfig.getAccessKey(), uploadConfig.getSecretKey());</span><br><span class="line">        <span class="comment">//指定桶 从配置类中获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">upToken</span> <span class="operator">=</span> auth.uploadToken(uploadConfig.getBucket());</span><br><span class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> generateFilePath(file);</span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> uploadManager.put(file.getInputStream(), fileName, upToken, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//解析上传成功的结果</span></span><br><span class="line">        <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">        log.info(<span class="string">&quot;文件上传成功,文件地址:&#123;&#125;&quot;</span>, uploadConfig.getBaseUrl() + fileName);</span><br><span class="line">        <span class="keyword">return</span> uploadConfig.getBaseUrl() + fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法用于生成有效文件路径</span></span><br><span class="line"><span class="comment">     * 路径格式统一为: yyyy/MM/dd/随机UUID.文件格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 源文件,用于获取文件 原名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件的新名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateFilePath</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//1.根据日期生成路径字符串 2022/1/15/</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">datePath</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//2.获取有效 uuid</span></span><br><span class="line">        <span class="comment">// 注意：uuid默认为 xxx-xxx-xxx...，此处我们要把-去掉</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取文件的后缀名：test.png -&gt; .png</span></span><br><span class="line">        <span class="comment">//获取文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> fileName.substring(index);</span><br><span class="line">        <span class="comment">//给文件做唯一标识</span></span><br><span class="line">        <span class="keyword">assert</span> fileName != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//4.拼接得到有效文件名，然后返回</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(datePath).append(uuid).append(fileType).toString();</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UploadController (接收MultipartFile img 必须使用 @RequestPart 来接收)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;文件上传接口&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowire</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;</span></span><br><span class="line"><span class="meta">    @PostMapping()</span></span><br><span class="line"><span class="meta">    public Result&lt;String&gt; upload(@RequestPart MultipartFile img) &#123;</span></span><br><span class="line"><span class="meta">        log.info(&quot;开始进行文件上传:&#123;&#125;&quot;, img.getOriginalFilename());</span></span><br><span class="line"><span class="meta">        //上传文件，并获取url路径</span></span><br><span class="line"><span class="meta">        String url = uploadService.upload(img);</span></span><br><span class="line"><span class="meta">        return Result.success(url);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>UploadServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadUtils uploadUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile image)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 上传到七牛云服务器</span></span><br><span class="line">            url = uploadUtils.fileToOSS(image);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;文件上传失败，原因：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(ResultCode.SYSTEM_INNER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h1><h1 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h1><h1 id="华为云"><a href="#华为云" class="headerlink" title="华为云"></a>华为云</h1><h1 id="京东云"><a href="#京东云" class="headerlink" title="京东云"></a>京东云</h1><h1 id="硅云"><a href="#硅云" class="headerlink" title="硅云"></a>硅云</h1><h1 id="袋鼠云"><a href="#袋鼠云" class="headerlink" title="袋鼠云"></a>袋鼠云</h1></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interview-01-mybatis面试题</title>
      <link href="/2023/10/28/interview-01-mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/10/28/interview-01-mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Java-Guide：<a href="https://javaguide.cn/system-design/framework/mybatis/mybatis-interview.html">MyBatis常见面试题总结</a></p></blockquote><h1 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h1><h2 id="JDBC-编程有哪些步骤？"><a href="#JDBC-编程有哪些步骤？" class="headerlink" title="JDBC 编程有哪些步骤？"></a>JDBC 编程有哪些步骤？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册驱动 mysql8.0以上+cj</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>); </span><br><span class="line"><span class="comment">// 2. 建立JDBC与数据库的连接</span></span><br><span class="line"><span class="type">Connnect</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager(<span class="string">&quot;jdbc:mysql://ip:port/数据库名&quot;</span>, <span class="string">&quot;username&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 创建Statement对象或PreparedStatement对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.preparedStatement(sql);</span><br><span class="line"><span class="comment">// 4. 执行sql，获取结果集</span></span><br><span class="line"><span class="type">Result</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"><span class="comment">// 5. 处理结果集 (可选)</span></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    rs.getString();</span><br><span class="line">    rs.getInteger();</span><br><span class="line">    rs.getXxxx();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6. 关闭资源</span></span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="浅谈MyBatis"><a href="#浅谈MyBatis" class="headerlink" title="浅谈MyBatis"></a>浅谈MyBatis</h2><ul><li>是一个半ORM（对象关系映射）框架</li><li>mybatis内部封装了jdbc，开发人员不再需要关心驱动的注册、连接对象的获取、sql语句的执行、资源的关闭等，只需要着重注意sql语句的编写</li><li>mybatis通过xml（dom4j+反射）或注解的方式将sql对象自动获取，以及将查询结果集自动封装到对应的对象当中返回</li></ul><p>优点：</p><p><img src="/2023/10/28/interview-01-mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/image-20231028145522203.png" alt="image-20231028145522203"></p><p>缺点：</p><p><img src="/2023/10/28/interview-01-mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/image-20231028145757569.png" alt="image-20231028145757569"></p><p>和hibernate的不同之处：（没学过hibernate<code>😓</code>）</p><p><img src="/2023/10/28/interview-01-mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/image-20231028150135802.png" alt="image-20231028150135802"></p></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ex-SpringMVC流程分析</title>
      <link href="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="什么是Spring-mvc"><a href="#什么是Spring-mvc" class="headerlink" title="什么是Spring mvc"></a>什么是Spring mvc</h1><p>SpringMVC是一个基于Java的Web框架，用于构建灵活、可扩展和高效的Web应 用程序。</p><ul><li><strong>M ： 表示mode，</strong>翻译成中文叫做模型，对应数据库；</li><li><strong>V ： 表示View，</strong>翻译为中文叫做视图，对应前端的页面，比如jsp</li><li><strong>C ： 表示 Controller，</strong>翻译是控制层，对应servlet的请求映射；</li></ul><p>SpringMVC的主要目标是将应用程序的<strong>业务逻辑和Web层解耦</strong>，使开发人员能 够更好地关注业务逻辑的实现而不必过多关注与Web相关的细节。</p><p>SpringMVC的核心组件是<strong>前端控制器（DispatcherServlet）</strong>，它充当了应用程序 的主要入口点，接收所有的客户端请求，并将请求分发给相应的处理程序（控 制器）。前端控制器负责处理请求的路由、参数解析、请求处理流程控制、视 图解析和渲染等工作。</p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025183023858.png" alt="image-20231025183023858"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025183050572.png" alt="image-20231025183050572"></p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul><li>DispatcherServlet</li></ul><p>前端控制器。用来过滤客户端发送过来,想要进行逻辑处理的请求</p><ul><li>Controller&#x2F;Headler</li></ul><p>控制器&#x2F;处理器。开发人员自定义,用来处理用户请求的,并且处理完成之后返回给用户指定视图的对 象 相当于我们之前编写的Servlet</p><ul><li>HandlerMapping</li></ul><p>处理器映射器（简称映射器）。DispatcherServlet接收到客户端请求的URL之后,根据一定的匹配规 则,再把请求转发给对应的Handler,这个匹配规则由 HandlerMapping 决定</p><ul><li>HandlerAdaptor</li></ul><p>处理器适配器（简称适配器）。用来适配每一个要执行的Handler对象。通过HandlerAdapter可以支 持任意的类作为处理器。作用是告诉SpringMVC框架，将来需要调用Controller中的哪一个方法。</p><ul><li>ViewResolver</li></ul><p>视图解析器（简称解析器）。Controller&#x2F;Headler返回的是逻辑视图名,需要有一个解析器能够将逻辑 视图名转换成实际的物理视图。例如，Controller中返回的逻辑视图名字为”hello”，解析器可以给这 个逻辑视图名转换为真正的物理视图名，例如加入前缀和后缀：&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp</p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><blockquote><p>b站视频(很清晰)：<a href="https://www.bilibili.com/video/BV15o4y1t79E/?spm_id_from=333.337.search-card.all.click&vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">请描述springMVC的工作流程，描述一下 DispatcherServlet的工作流程?</a></p></blockquote><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025183753911.png" alt="image-20231025183753911"></p><ul><li><p>过滤器：Filter</p><p>依赖于<strong>servlet容器</strong>。在实现上基于函数回调，可以对几乎所有请求进行过滤，但是缺点是一个过滤器实例只能在容器初始化时调用一次。使用过滤器的目的是用来做一些过滤操作，获取我们想要获取的数据，比如：<strong>在过滤器中修改字符编码；在过滤器中修改HttpServletRequest的一些参数，包括：过滤低俗文字、危险字符等</strong></p></li><li><p>拦截器：HandlerInterceptor</p><p>依赖于<strong>web框架</strong>，在实现上基于Java的反射机制，属于面向切面编程（AOP）的一种运用。由于拦截器是基于web框架的调用，因此可以使用Spring的依赖注入（DI）进行一些业务操作，同时一个拦截器实例在一个<a href="https://www.cnblogs.com/lch-Hao/p/10763801.html">controller的生命周期</a>之内可以多次调用。</p></li></ul><p>总结：</p><p>（1）用户发送请求至前端控制器DispatcherServlet；</p><p>（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；</p><p>（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet；</p><p>（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；</p><p>（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；</p><p>（6）Handler执行完成返回ModelAndView； </p><p>（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet； </p><p>（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析； </p><p>（9）ViewResolver解析后返回具体View； </p><p>（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中） </p><p>（11）DispatcherServlet响应用户。</p><h1 id="DispatcherServlet源码分析"><a href="#DispatcherServlet源码分析" class="headerlink" title="DispatcherServlet源码分析"></a>DispatcherServlet源码分析</h1><blockquote><p>通过上图我们不难发现，其实 HandlerMapping、HandlerAdapter、ViewReslover、View 基本上都是跟DispatcherServlet交互的，究竟是什么魔力能让DispatcherServlet可以统领全局呢？ 听我细细道来</p></blockquote><ul><li>首先找到DispatcherServlet的 doDispatch方法，核心中的核心</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025194332825.png" alt="image-20231025194332825"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025193515149.png" alt="image-20231025193515149"></p><ul><li>找HandlerMapper</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025194240927.png" alt="image-20231025194240927"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025194109622.png" alt="image-20231025194109622"></p><ul><li>HandlerMapping —&gt; HandlerExcutionChain (包含HandlerInterceptor…+Handler)</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025200442486.png" alt="image-20231025200442486"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025201354257.png" alt="image-20231025201354257"></p><p>找拦截器 以前置拦截器为例子 </p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025204439731.png" alt="image-20231025204439731"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025204523046.png" alt="image-20231025204523046"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025204651298.png" alt="image-20231025204651298"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025205027407.png" alt="image-20231025205027407"></p><ul><li>HandlerAdapt</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025205155542.png" alt="image-20231025205155542"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025205245509.png" alt="image-20231025205245509"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025205551801.png" alt="image-20231025205551801"></p><p>调用handler方法—&gt;得到ModelAndView</p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025210017729.png" alt="image-20231025210017729"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025210117150.png" alt="image-20231025210117150"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025210554476.png" alt="image-20231025210554476"></p><ul><li>ViewResolver 目的：为逻辑视图hello加上前缀和后缀变成  相对路径 &#x2F;WEB-INF&#x2F;hello.html</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025211239221.png" alt="image-20231025211239221"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025211848898.png" alt="image-20231025211848898"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025212222545.png" alt="image-20231025212222545"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025212656611.png" alt="image-20231025212656611"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025212850380.png" alt="image-20231025212850380"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025213330109.png" alt="image-20231025213330109"></p><ul><li>View: DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）变成有布局有css有数据的html页面</li></ul><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025213448870.png" alt="image-20231025213448870"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025213704417.png" alt="image-20231025213704417"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025213945321.png" alt="image-20231025213945321"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025214048499.png" alt="image-20231025214048499"></p><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025214236976.png" alt="image-20231025214236976"></p><blockquote><p>你一定会感到疑惑为什么我就这么肯定是这些实现类呢？ 肯定是存在XML文件啦~~</p></blockquote><p><img src="/2023/10/25/ex-SpringMVC%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20231025214454589.png" alt="image-20231025214454589"></p><blockquote><p>到这里SpringMVC的流程就基本结束啦~ 泪泪</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此 <code>tool栏</code> 楚门的世界将会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github美化-不一样的主页,更精彩🎈</title>
      <link href="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/"/>
      <url>/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>众所周知，爱美之心人皆有之！看到别人炫酷的github主页，难道不心动吗？ </p></blockquote><h1 id="借东风"><a href="#借东风" class="headerlink" title="借东风"></a>借东风</h1><blockquote><p>优质博客：<a href="https://juejin.cn/post/7127285527920771086">GitHub主页美化教程——不一样的主页，更精彩🎈</a></p><p>绝大部分的步骤在上面都有，但是使用起来还是有一点困难</p></blockquote><h1 id="破困难"><a href="#破困难" class="headerlink" title="破困难"></a>破困难</h1><h2 id="Fork（整个复制别人的项目）"><a href="#Fork（整个复制别人的项目）" class="headerlink" title="Fork（整个复制别人的项目）"></a>Fork（整个复制别人的项目）</h2><blockquote><p>最快的办法就是fork别人的项目改吧改吧</p><p>本人的仓库：<a href="https://github.com/Luozongwei/Luozongwei">github home page</a></p></blockquote><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023190800231.png" alt="image-20231023190800231"></p><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023190848772.png" alt="image-20231023190848772"></p><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023191238752.png" alt="image-20231023191238752"></p><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023191324152.png" alt="image-20231023191324152"></p><h2 id="两大难点"><a href="#两大难点" class="headerlink" title="两大难点"></a>两大难点</h2><ul><li>githuba徽章badge制作</li></ul><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023191431930.png" alt="image-20231023191431930"></p><ul><li>My Skill Set 的制作</li></ul><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023191504357.png" alt="image-20231023191504357"></p><h2 id="逐个击破"><a href="#逐个击破" class="headerlink" title="逐个击破"></a>逐个击破</h2><h3 id="shields"><a href="#shields" class="headerlink" title="shields"></a>shields</h3><blockquote><p>官网：<a href="https://shields.io/">https://shields.io/</a></p></blockquote><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023191836330.png" alt="image-20231023191836330"></p><blockquote><p>推荐直接去使用别人写好的badge</p><p>优质badge仓库：<a href="https://github.com/Ileriayo/markdown-badges">GitHub - Ileriayo&#x2F;markdown-badges</a></p></blockquote><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023192239725.png" alt="image-20231023192239725"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Spring](https://img.shields.io/badge/spring-%236DB33F.svg?style=for-the-badge&amp;logo=spring&amp;logoColor=white)](https://www.lzwgxust.top/)</span><br></pre></td></tr></table></figure><blockquote><p>注意：要把上面复制的放在 <code>[]</code>一个中括号里面，后面的<code>(https://www.lzwgxust.top/)</code>只是为了点击跳转而已</p><p>注意：要把<code>.md</code>文件里面所有的<code>Luozongwei</code>替换成你<code>自己的用户名</code></p></blockquote><h3 id="My-Skill-Set"><a href="#My-Skill-Set" class="headerlink" title="My Skill Set"></a>My Skill Set</h3><blockquote><p>可以通过在线的自动化配置生成 README.md , 感兴趣的来这里 <a href="https://link.juejin.cn/?target=https://profilinator.rishav.dev/">profilinator</a></p></blockquote><p><img src="/2023/10/23/github%E7%BE%8E%E5%8C%96-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E4%B8%BB%E9%A1%B5-%E6%9B%B4%E7%B2%BE%E5%BD%A9%F0%9F%8E%88/image-20231023193416715.png" alt="image-20231023193416715"></p><blockquote><p>最后大功告成啦，期待你的github Home!!!</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project-02-苍穹外卖</title>
      <link href="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>项目简介：该项目旨在实现微信小程序端与Web端之间的实时外卖点单付款同步系统，为客户提供多样选择，从而提升用户体验的质量</p><p>b站学习：<a href="https://www.bilibili.com/video/BV1TP411v7v6/">https://www.bilibili.com/video/BV1TP411v7v6/</a></p><p>项目代码：<a href="https://gitee.com/luozongwei/sky-take-out">https://gitee.com/luozongwei/sky-take-out</a></p><p>该项目是初次体验前后端分离项目，更多的是在理解整个前后端分离的流程，代码可能是次要的</p></blockquote><h1 id="项目特色"><a href="#项目特色" class="headerlink" title="项目特色"></a>项目特色</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><blockquote><p>使用nginx将前端访问路径与后端服务器进行映射， 负载均衡</p></blockquote><blockquote><p>nginx处理静态资源比较快，动态资源交给tomcat</p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231026191720671.png" alt="image-20231026191720671"></p><blockquote><p>nginx.conf中的基本配置，用户端和管理端不同的请求会被反向代理到不同 ip+port+uri </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 设定负载均衡的服务器列表</span><br><span class="line">upstream webservers&#123; </span><br><span class="line">    # weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> weight=<span class="number">90</span> ;</span><br><span class="line">    #server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8088</span> weight=<span class="number">10</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html/sky;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 反向代理,处理管理端发送的请求</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//localhost:8080/admin/;</span></span><br><span class="line">        #proxy_pass   http:<span class="comment">//webservers/admin/;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 反向代理,处理用户端发送的请求</span><br><span class="line">        location /user/ &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//webservers/user/;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # WebSocket</span><br><span class="line">        location /ws/ &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//webservers/ws/;</span></span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_read_timeout 3600s;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;$connection_upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="YApi-pro"><a href="#YApi-pro" class="headerlink" title="YApi.pro"></a>YApi.pro</h2><blockquote><p>使用YApi.pro对前后端接口进行制作与管理</p><p>官网：<a href="https://yapi.pro/">YApi Pro-高效、易用、功能强大的可视化接口管理平台</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029095357051.png" alt="image-20231029095357051"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029095534664.png" alt="image-20231029095534664"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029095755463.png" alt="image-20231029095755463"></p><h2 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h2><blockquote><p>通过knife4j对后端实现的业务逻辑进行测试，不必通过前端联调</p><p>官网：<a href="https://doc.xiaominfo.com/">Knife4j · 集Swagger2及OpenAPI3为一体的增强解决方案</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2WebMvc</span> <span class="comment">// 放在Knife4jConfig p</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档 分为了管理端和用户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">        .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">        .groupName(<span class="string">&quot;管理端接口&quot;</span>)</span><br><span class="line">        .apiInfo(apiInfo)</span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.admin&quot;</span>))</span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> docket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">        .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">        .groupName(<span class="string">&quot;用户端接口&quot;</span>)</span><br><span class="line">        .apiInfo(apiInfo)</span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.user&quot;</span>))</span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> docket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官网实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;首页模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;,value = &quot;姓名&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Hi:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义枚举、注解、AOP、反射，实现公共字段自动填充功能"><a href="#自定义枚举、注解、AOP、反射，实现公共字段自动填充功能" class="headerlink" title="自定义枚举、注解、AOP、反射，实现公共字段自动填充功能"></a>自定义枚举、注解、AOP、反射，实现公共字段自动填充功能</h2><blockquote><p>业务表中的公共字段</p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029094645367.png" alt="image-20231029094645367"></p><ul><li>实现思路</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029100000767.png" alt="image-20231029100000767"></p><ul><li>代码实现</li></ul><p>注解AutoFill</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AnnotationName</span> AutoFill</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/1 15:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义注解：用于标识某个方法需要进行功能字段自动填充处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    <span class="comment">// 数据库操作类型：UPDATE INSERT</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举OperationType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库操作类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperationType</span> &#123;</span><br><span class="line">    <span class="comment">// 更新操作</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    INSERT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP切面AutoFillAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AutoFillAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/1 15:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义切面：实现公共字段自动填充</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知：在通知中进行公共字段的赋值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行公共字段在自动填充...&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、获取到当前被拦截的方法上的数据库操作类型</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);</span><br><span class="line">        <span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();</span><br><span class="line">        <span class="comment">// 2、获取到当前被拦截的方法的参数--实体对象</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span> | args.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 3、准备赋值的数据</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="comment">// 4、根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        <span class="keyword">if</span> (operationType == OperationType.INSERT) &#123;</span><br><span class="line">            <span class="comment">// 为4个属性赋值</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">            setCreateTime.invoke(entity, now);</span><br><span class="line">            setCreateUser.invoke(entity, currentId);</span><br><span class="line">            setUpdateTime.invoke(entity, now);</span><br><span class="line">            setUpdateUser.invoke(entity, currentId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operationType == OperationType.UPDATE) &#123;</span><br><span class="line">            <span class="comment">// 为2个属性赋值</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">            setUpdateTime.invoke(entity, now);</span><br><span class="line">            setUpdateUser.invoke(entity, currentId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5、在对象sql语句上添加@AutoFill注解</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper 使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增员工</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into employee(name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user) &quot; +</span></span><br><span class="line"><span class="meta">        &quot;values&quot; +</span></span><br><span class="line"><span class="meta">        &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@AutoFill(value = OperationType.INSERT)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>; <span class="comment">// 要保证实体对象放在第一个参数的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键动态修改属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@AutoFill(value = OperationType.UPDATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>提供一个常量类：AutoFillConstant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共字段自动填充相关常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体类中的方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_CREATE_TIME</span> <span class="operator">=</span> <span class="string">&quot;setCreateTime&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_UPDATE_TIME</span> <span class="operator">=</span> <span class="string">&quot;setUpdateTime&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_CREATE_USER</span> <span class="operator">=</span> <span class="string">&quot;setCreateUser&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_UPDATE_USER</span> <span class="operator">=</span> <span class="string">&quot;setUpdateUser&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><blockquote><p>使用Spring Data Redis将热点数据存储到内存中，读写性能提高，同时通过Spring Cache注解的方式简化缓存代码</p></blockquote><h3 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h3><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029105044049.png" alt="image-20231029105044049"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029105227767.png" alt="image-20231029105227767"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029110113823.png" alt="image-20231029110113823"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RedisConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/3 10:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 主要是为redisTemplate添加一个序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板对象&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">// 1、设置redis的连接工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 2、设置redis key的序列化器 字符串类型的redis序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在java中操作redis中的基本数据类型 String、List、Set、ZSet、Hash</p></blockquote><ul><li>String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作redis 字符串类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// set get setex setnx</span></span><br><span class="line">    <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">    valueOperations.set(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;江苏&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) valueOperations.get(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;city = &quot;</span> + city);</span><br><span class="line">    valueOperations.set(<span class="string">&quot;code&quot;</span>, <span class="number">2231</span>, <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    valueOperations.setIfAbsent(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;josh&quot;</span>);</span><br><span class="line">    valueOperations.setIfAbsent(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Hash</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作redis hash类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// hset hget hkeys hvals</span></span><br><span class="line">    <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">    hashOperations.put(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;josh&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">22</span>);</span><br><span class="line">    hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    System.out.println(keys);</span><br><span class="line">    <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    System.out.println(values);</span><br><span class="line">    hashOperations.delete(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>List</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lpush lrange rpop llen</span></span><br><span class="line">    <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">    listOperations.leftPushAll(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    listOperations.leftPush(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;myList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;myList = &quot;</span> + myList);</span><br><span class="line">    listOperations.rightPop(<span class="string">&quot;myList&quot;</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;myList&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;size = &quot;</span> + size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// sadd smenbers scard sinter sunion srem</span></span><br><span class="line">    <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">    setOperations.add(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    setOperations.add(<span class="string">&quot;set2&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Set</span> <span class="variable">set1Members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;set1Members = &quot;</span> + set1Members);</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">set2Size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;set2Size = &quot;</span> + set2Size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交集</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;intersect = &quot;</span> + intersect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并集</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;union = &quot;</span> + union);</span><br><span class="line"></span><br><span class="line">    setOperations.remove(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ZSet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作有序集合的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// zadd zrange zincrby zrem</span></span><br><span class="line">    <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">    zSetOperations.add(<span class="string">&quot;zset1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;zset1&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;zset1&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;zset1 = &quot;</span> + zset1);</span><br><span class="line"></span><br><span class="line">    zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>redis通用命令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用命令操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;keys = &quot;</span> + keys);</span><br><span class="line"></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">        <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">        System.out.println(type.name());</span><br><span class="line">    &#125;</span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;myList&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>店铺营业状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ShopController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/3 11:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span> <span class="comment">// 如果ShopCOntroller重名的话，需要设置别名</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺的营业状态：&#123;&#125;&quot;</span>, status == <span class="number">1</span> ? <span class="string">&quot;营业中&quot;</span> : <span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(KEY, status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取店铺的营业状态: &#123;&#125;&quot;</span>, status == <span class="number">1</span> ? <span class="string">&quot;营业中&quot;</span> : <span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户端查看菜品分类id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.user;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController(&quot;userDishController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、构造redis中的key， dish_id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + categoryId;</span><br><span class="line">        <span class="comment">// 2、查询redis中是否存在对应的菜品数据</span></span><br><span class="line">        List&lt;DishVO&gt; list = (List&lt;DishVO&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2、1 如果存在，直接返回，无须查询数据库</span></span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、2 如果不存在，查询数据库，同时将查询到的数据放入redis中</span></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        dish.setCategoryId(categoryId);</span><br><span class="line">        dish.setStatus(StatusConstant.ENABLE); <span class="comment">// 查询起售中的菜品</span></span><br><span class="line"></span><br><span class="line">        list = dishService.listWithFlavor(dish);</span><br><span class="line">        redisTemplate.opsForValue().set(key, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>管理端清除redis缓存</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029114203546.png" alt="image-20231029114203546"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;菜品相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增菜品：&#123;&#125;&quot;</span>, dishDTO);</span><br><span class="line">        dishService.saveWithFlavor(dishDTO);</span><br><span class="line">        <span class="comment">// 清理redis缓存数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();</span><br><span class="line">        cleanCache(key);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;菜品批量删除&quot;)</span> <span class="comment">// 直接将redis中所有的dish_*删掉</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;菜品批量删除，&#123;&#125;&quot;</span>, ids);</span><br><span class="line">        dishService.deleteBatch(ids);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有的菜品缓存数据清理掉，所有以dish_开头的key</span></span><br><span class="line">        cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;修改菜品：&#123;&#125;&quot;</span>, dishDTO);</span><br><span class="line">        dishService.updateDishWithFlavor(dishDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有的菜品缓存数据清理掉，所有以dish_开头的key</span></span><br><span class="line">        cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;菜品起售停售&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">        dishService.startOrStop(status, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有的菜品缓存数据清理掉，所有以dish_开头的key</span></span><br><span class="line">        cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanCache</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(pattern);</span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h3><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029115548439.png" alt="image-20231029115548439"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029115840670.png" alt="image-20231029115840670"></p><ul><li>Spring Cache 基本使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="comment">// 如果使用Spring Cache缓存数据，key的生成：userCache::#user.id</span></span><br><span class="line">    <span class="meta">@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line">    <span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;, allEntries = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.deleteAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="comment">// Cacheable 会先查看缓存中是否有数据，没有的话去数据库中查，同时把查询结果放入到redis当中</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;userCache&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现思路</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029122333276.png" alt="image-20231029122333276"></p><h2 id="HttpClientUtil"><a href="#HttpClientUtil" class="headerlink" title="HttpClientUtil"></a>HttpClientUtil</h2><blockquote><p>通过HttpClientUtil工具类实现微信小程序与Java后端统一标识openId的功能</p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029123754605.png" alt="image-20231029123754605"></p><ul><li>小试牛刀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建httpclient对现象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 2、创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、发送请求，接受响应结果</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 4、获取服务端返回的状态码 和实体对象</span></span><br><span class="line">        <span class="comment">// 获取状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);</span><br><span class="line">        <span class="comment">// 获取实体对象</span></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span>+body);</span><br><span class="line">        <span class="comment">// 5、关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPost</span><span class="params">()</span> <span class="keyword">throws</span> JSONException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建httpClient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 2、创建请求方式</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">stringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">        <span class="comment">// 指定请求编码方式</span></span><br><span class="line">        stringEntity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 数据格式</span></span><br><span class="line">        stringEntity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(stringEntity);</span><br><span class="line">        <span class="comment">// 3、解析返回数据</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;statusCode = &quot;</span> + statusCode);</span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;body = &quot;</span> + body);</span><br><span class="line">        <span class="comment">// 4、关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HttpClientUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.utils;</span><br><span class="line"><span class="comment">// Http工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">int</span> <span class="variable">TIMEOUT_MSEC</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送GET方式请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url,Map&lt;String,String&gt; paramMap)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">URIBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(url);</span><br><span class="line">            <span class="keyword">if</span>(paramMap != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (String key : paramMap.keySet()) &#123;</span><br><span class="line">                    builder.addParameter(key,paramMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建GET请求</span></span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断响应状态</span></span><br><span class="line">            <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">                result = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送POST方式请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; paramMap)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resultString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Http Post请求</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建参数列表</span></span><br><span class="line">            <span class="keyword">if</span> (paramMap != <span class="literal">null</span>) &#123;</span><br><span class="line">                List&lt;NameValuePair&gt; paramList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; param : paramMap.entrySet()) &#123;</span><br><span class="line">                    paramList.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(param.getKey(), param.getValue()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 模拟表单</span></span><br><span class="line">                <span class="type">UrlEncodedFormEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(paramList);</span><br><span class="line">                httpPost.setEntity(entity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            httpPost.setConfig(builderRequestConfig());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行http请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            resultString = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送POST方式请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost4Json</span><span class="params">(String url, Map&lt;String, String&gt; paramMap)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resultString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Http Post请求</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (paramMap != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//构造json格式数据</span></span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; param : paramMap.entrySet()) &#123;</span><br><span class="line">                    jsonObject.put(param.getKey(),param.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">//设置请求编码</span></span><br><span class="line">                entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">//设置数据类型</span></span><br><span class="line">                entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                httpPost.setEntity(entity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            httpPost.setConfig(builderRequestConfig());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行http请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            resultString = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestConfig <span class="title function_">builderRequestConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RequestConfig.custom()</span><br><span class="line">            .setConnectTimeout(TIMEOUT_MSEC)</span><br><span class="line">            .setConnectionRequestTimeout(TIMEOUT_MSEC)</span><br><span class="line">            .setSocketTimeout(TIMEOUT_MSEC).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="微信小程序登录流程"><a href="#微信小程序登录流程" class="headerlink" title="微信小程序登录流程"></a>微信小程序登录流程</h3><blockquote><p>官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">开放能力 &#x2F; 用户信息 &#x2F; 小程序登录 (qq.com)</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029154923911.png" alt="image-20231029154923911"></p><blockquote><p>请求路径、请求参数、返回数据格式：<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html">小程序登录 &#x2F; 小程序登录 (qq.com)</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029155424936.png" alt="image-20231029155424936"></p><blockquote><p>注意上面的授权码 js_code只能使用一次哈~</p></blockquote><ul><li>application.yml + xxxProperties.java</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029163328700.png" alt="image-20231029163328700"></p><ul><li>微信登录代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;微信登录&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;UserLoginVO&gt; <span class="title function_">wxLogin</span><span class="params">(<span class="meta">@RequestBody</span> UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;微信用户登录：&#123;&#125;&quot;</span>, userLoginDTO.getCode());</span><br><span class="line">    <span class="comment">// 1、微信登录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.wxLogin(userLoginDTO);</span><br><span class="line">    <span class="comment">// 2、为微信用户生成jwt令牌</span></span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(JwtClaimsConstant.USER_ID, user.getId());</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(jwtProperties.getUserSecretKey(), jwtProperties.getUserTtl(), claims);</span><br><span class="line">    <span class="comment">// 3、创建userLoginVO对象</span></span><br><span class="line">    <span class="type">UserLoginVO</span> <span class="variable">userLoginVO</span> <span class="operator">=</span> UserLoginVO.builder()</span><br><span class="line">        .id(user.getId())</span><br><span class="line">        .openid(user.getOpenid())</span><br><span class="line">        .token(token)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> Result.success(userLoginVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务接口地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WX_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeChatProperties weChatProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">wxLogin</span><span class="params">(UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> getOpenId(userLoginDTO.getCode());</span><br><span class="line">        <span class="comment">// 2、判断openId是否为空，如果为空表示登录失败，抛出业务异常</span></span><br><span class="line">        <span class="keyword">if</span> (openId == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginFailedException</span>(MessageConstant.LOGIN_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、判断当前用户是否为新用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getByOpenId(openId);</span><br><span class="line">        <span class="comment">// 4、如果是新用户，自动完成注册</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = User.builder()</span><br><span class="line">                    .openid(openId)</span><br><span class="line">                    .createTime(LocalDateTime.now())</span><br><span class="line">                    .build();</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5、返回这个用户对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用微信接口服务，获得当前微信用户的openid</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getOpenId</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;appid&quot;</span>, weChatProperties.getAppid());</span><br><span class="line">        map.put(<span class="string">&quot;secret&quot;</span>, weChatProperties.getSecret());</span><br><span class="line">        map.put(<span class="string">&quot;js_code&quot;</span>, code);</span><br><span class="line">        map.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> HttpClientUtil.doGet(WX_LOGIN, map);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> openId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JwtUtil 生成token 或者 authentication</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     * 使用Hs256算法, 私匙使用固定秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis jwt过期时间(毫秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims    设置的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String secretKey, <span class="type">long</span> ttlMillis, Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定签名的时候使用的签名算法，也就是header那部分</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> System.currentTimeMillis() + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            <span class="comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">            .setClaims(claims)</span><br><span class="line">            <span class="comment">// 设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">            .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            .setExpiration(exp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     加密后的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String secretKey, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到DefaultJwtParser</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">            .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            <span class="comment">// 设置需要解析的jwt</span></span><br><span class="line">            .parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><blockquote><p>可以说我们现在的生活已经离不开微信支付和支付宝支付啦！</p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029173708070.png" alt="image-20231029173708070"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029173954728.png" alt="image-20231029173954728"></p><ul><li>微信小程序支付时序图</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029174824886.png" alt="image-20231029174824886"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029175057147.png" alt="image-20231029175057147"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029175904696.png" alt="image-20231029175904696"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029180034101.png" alt="image-20231029180034101"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029180153491.png" alt="image-20231029180153491"></p><blockquote><p>JSAPI下单：<a href="https://pay.weixin.qq.com/docs/merchant/products/jsapi-payment/introduction.html">产品介绍 - JSAPI支付</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029180514919.png" alt="image-20231029180514919"></p><blockquote><p>微信小程序跳起支付：<a href="https://pay.weixin.qq.com/docs/merchant/apis/mini-program-payment/mini-transfer-payment.html">小程序调起支付 - 小程序支付</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029202848491.png" alt="image-20231029202848491"></p><blockquote><p>至于cpolar怎么用可以看我另外一篇博客：<a href="https://www.lzwgxust.top/post/d36fddee.html">cpolar简易实现内网穿透</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029204141200.png" alt="image-20231029204141200"></p><ul><li>WeChatPayUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信支付工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPayUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//微信支付下单接口地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JSAPI</span> <span class="operator">=</span> <span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请退款接口地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFUNDS</span> <span class="operator">=</span> <span class="string">&quot;https://api.mch.weixin.qq.com/v3/refund/domestic/refunds&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeChatProperties weChatProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取调用微信接口的客户端工具对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient <span class="title function_">getClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">merchantPrivateKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//merchantPrivateKey商户API私钥，如何加载商户API私钥请看常见问题</span></span><br><span class="line">            merchantPrivateKey = PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(weChatProperties.getPrivateKeyFilePath())));</span><br><span class="line">            <span class="comment">//加载平台证书文件</span></span><br><span class="line">            <span class="type">X509Certificate</span> <span class="variable">x509Certificate</span> <span class="operator">=</span> PemUtil.loadCertificate(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(weChatProperties.getWeChatPayCertFilePath())));</span><br><span class="line">            <span class="comment">//wechatPayCertificates微信支付平台证书列表。你也可以使用后面章节提到的“定时更新平台证书功能”，而不需要关心平台证书的来龙去脉</span></span><br><span class="line">            List&lt;X509Certificate&gt; wechatPayCertificates = Arrays.asList(x509Certificate);</span><br><span class="line"></span><br><span class="line">            <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(weChatProperties.getMchid(), weChatProperties.getMchSerialNo(), merchantPrivateKey)</span><br><span class="line">                .withWechatPay(wechatPayCertificates);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签</span></span><br><span class="line">            <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line">            <span class="keyword">return</span> httpClient;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post方式请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">post</span><span class="params">(String url, String body)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> getClient();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        httpPost.addHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        httpPost.addHeader(HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        httpPost.addHeader(<span class="string">&quot;Wechatpay-Serial&quot;</span>, weChatProperties.getMchSerialNo());</span><br><span class="line">        httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(body, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="keyword">return</span> bodyAsString;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpClient.close();</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送get方式请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">get</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> getClient();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.addHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        httpGet.addHeader(HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Wechatpay-Serial&quot;</span>, weChatProperties.getMchSerialNo());</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="keyword">return</span> bodyAsString;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpClient.close();</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jsapi下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNum    商户订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> total       总金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description 商品描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid      微信用户的openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">jsapi</span><span class="params">(String orderNum, BigDecimal total, String description, String openid)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;appid&quot;</span>, weChatProperties.getAppid());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;mchid&quot;</span>, weChatProperties.getMchid());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNum);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;notify_url&quot;</span>, weChatProperties.getNotifyUrl());</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        amount.put(<span class="string">&quot;total&quot;</span>, total.multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>)).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).intValue());</span><br><span class="line">        amount.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jsonObject.put(<span class="string">&quot;amount&quot;</span>, amount);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        payer.put(<span class="string">&quot;openid&quot;</span>, openid);</span><br><span class="line"></span><br><span class="line">        jsonObject.put(<span class="string">&quot;payer&quot;</span>, payer);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">return</span> post(JSAPI, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小程序支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNum    商户订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> total       金额，单位 元</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description 商品描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid      微信用户的openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">pay</span><span class="params">(String orderNum, BigDecimal total, String description, String openid)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//统一下单，生成预支付交易单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> jsapi(orderNum, total, description, openid);</span><br><span class="line">        <span class="comment">//解析返回结果</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(bodyAsString);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">prepayId</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;prepay_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (prepayId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">timeStamp</span> <span class="operator">=</span> String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">nonceStr</span> <span class="operator">=</span> RandomStringUtils.randomNumeric(<span class="number">32</span>);</span><br><span class="line">            ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(weChatProperties.getAppid());</span><br><span class="line">            list.add(timeStamp);</span><br><span class="line">            list.add(nonceStr);</span><br><span class="line">            list.add(<span class="string">&quot;prepay_id=&quot;</span> + prepayId);</span><br><span class="line">            <span class="comment">//二次签名，调起支付需要重新签名</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">                stringBuilder.append(o).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">signMessage</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">            <span class="type">byte</span>[] message = signMessage.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA256withRSA&quot;</span>);</span><br><span class="line">            signature.initSign(PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(weChatProperties.getPrivateKeyFilePath()))));</span><br><span class="line">            signature.update(message);</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageSign</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(signature.sign());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造数据给微信小程序，用于调起微信支付</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            jo.put(<span class="string">&quot;timeStamp&quot;</span>, timeStamp);</span><br><span class="line">            jo.put(<span class="string">&quot;nonceStr&quot;</span>, nonceStr);</span><br><span class="line">            jo.put(<span class="string">&quot;package&quot;</span>, <span class="string">&quot;prepay_id=&quot;</span> + prepayId);</span><br><span class="line">            jo.put(<span class="string">&quot;signType&quot;</span>, <span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">            jo.put(<span class="string">&quot;paySign&quot;</span>, packageSign);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请退款</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outTradeNo    商户订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outRefundNo   商户退款单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> refund        退款金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> total         原订单金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refund</span><span class="params">(String outTradeNo, String outRefundNo, BigDecimal refund, BigDecimal total)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;out_trade_no&quot;</span>, outTradeNo);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;out_refund_no&quot;</span>, outRefundNo);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        amount.put(<span class="string">&quot;refund&quot;</span>, refund.multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>)).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).intValue());</span><br><span class="line">        amount.put(<span class="string">&quot;total&quot;</span>, total.multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>)).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).intValue());</span><br><span class="line">        amount.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jsonObject.put(<span class="string">&quot;amount&quot;</span>, amount);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;notify_url&quot;</span>, weChatProperties.getRefundNotifyUrl());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用申请退款接口</span></span><br><span class="line">        <span class="keyword">return</span> post(REFUNDS, body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PayNotifyController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.notify;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付回调相关接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/notify&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayNotifyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeChatProperties weChatProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/paySuccess&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paySuccessNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> readData(request);</span><br><span class="line">        log.info(<span class="string">&quot;支付成功回调：&#123;&#125;&quot;</span>, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptData(body);</span><br><span class="line">        log.info(<span class="string">&quot;解密后的文本：&#123;&#125;&quot;</span>, plainText);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(plainText);</span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;out_trade_no&quot;</span>);<span class="comment">//商户平台订单号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;transaction_id&quot;</span>);<span class="comment">//微信支付交易号</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;商户平台订单号：&#123;&#125;&quot;</span>, outTradeNo);</span><br><span class="line">        log.info(<span class="string">&quot;微信支付交易号：&#123;&#125;&quot;</span>, transactionId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务处理，修改订单状态、来单提醒</span></span><br><span class="line">        orderService.paySuccess(outTradeNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给微信响应</span></span><br><span class="line">        responseToWeixin(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">readData</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">decryptData</span><span class="params">(String body)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">resultObject</span> <span class="operator">=</span> JSON.parseObject(body);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">resource</span> <span class="operator">=</span> resultObject.getJSONObject(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> resource.getString(<span class="string">&quot;ciphertext&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> resource.getString(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">associatedData</span> <span class="operator">=</span> resource.getString(<span class="string">&quot;associated_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AesUtil</span> <span class="variable">aesUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(weChatProperties.getApiV3Key().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">//密文解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> aesUtil.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                                                   nonce.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                                                   ciphertext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plainText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给微信响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseToWeixin</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        response.setStatus(<span class="number">200</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-type&quot;</span>, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        response.getOutputStream().write(JSONUtils.toJSONString(map).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何解决用户重复提交订单进行支付"><a href="#如何解决用户重复提交订单进行支付" class="headerlink" title="如何解决用户重复提交订单进行支付"></a>如何解决用户重复提交订单进行支付</h3><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231113182548331.png" alt="image-20231113182548331"></p><p>支付模块防止用户重复下单购买套餐做唯一标识进行防重处理：</p><ul><li>用户点击购物车提交订单-&gt;发送数据到后端获取订单数据</li><li>后台支付服务通过UUID生成唯一标识和套餐信息一起发送给前端，在此同时使用map集合存入后台（使用用户id作为键，每个用户之间数据互不影响）</li><li>用户点击支付，发起订单支付请求，业务层会将前端带来的唯一标识与后端map中存储的标识进行比较<ul><li>相同：进入支付界面，<strong>同时清除后台存储的唯一标识</strong></li><li>不同：则提醒用户请勿重复下单</li></ul></li></ul><h2 id="使用Spring-Task-cron表达式-WebSocket，实现来单提醒和客户催单功能"><a href="#使用Spring-Task-cron表达式-WebSocket，实现来单提醒和客户催单功能" class="headerlink" title="使用Spring Task cron表达式 + WebSocket，实现来单提醒和客户催单功能"></a>使用Spring Task cron表达式 + WebSocket，实现来单提醒和客户催单功能</h2><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h3><blockquote><p>Spring Task 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑</p></blockquote><ul><li>cron 表达式</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029210455746.png" alt="image-20231029210455746"></p><blockquote><p>在线的cron生成器：<a href="http://cron.ciding.cc/">Cron - 在线Cron表达式生成器 (ciding.cc)</a></p></blockquote><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231029210831849.png" alt="image-20231029210831849"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.task;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/5 17:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义定时任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理超时的订单方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ?&quot;)</span> <span class="comment">// 每分钟执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTimeOutOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时器处理超时订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">15</span>);</span><br><span class="line">        <span class="comment">// ordersList都是 未支付状态 且下单时间超过15分钟的 订单</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.PENDING_PAYMENT, time);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ordersList != <span class="literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.CANCELLED);</span><br><span class="line">                orders.setCancelReason(<span class="string">&quot;订单超时，自动取消&quot;</span>);</span><br><span class="line">                orders.setCancelTime(LocalDateTime.now());</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理一直处于派送中的订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ? &quot;)</span> <span class="comment">// 每天凌晨1点执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processDeliveryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时器处理派送中的订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">60</span>); <span class="comment">// 这个表示昨天的0点</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.DELIVERY_IN_PROGRESS, time);</span><br><span class="line">        <span class="keyword">if</span> (ordersList != <span class="literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.COMPLETED);</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105105756106.png" alt="image-20231105105756106"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105105932174.png" alt="image-20231105105932174"></p><p>java服务端使用websocket -测试</p><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>WebSocketServer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.websocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放会话对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span> + sid + <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">        sessionMap.put(sid, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到来自客户端：&quot;</span> + sid + <span class="string">&quot;的信息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开:&quot;</span> + sid);</span><br><span class="line">        sessionMap.remove(sid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Collection&lt;Session&gt; sessions = sessionMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 服务器向客户端发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebSocketConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket配置类，用于注册WebSocket的Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebSocketTask</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketTask</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketServer webSocketServer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过WebSocket每隔5秒向客户端发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageToClient</span><span class="params">()</span> &#123;</span><br><span class="line">        webSocketServer.sendToAllClient(<span class="string">&quot;这是来自服务端的消息：&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105113246840.png" alt="image-20231105113246840"></p><ul><li>来单提醒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过webSocket向客户端浏览器推送消息 type orderId content</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;type&quot;</span>, <span class="number">1</span>); <span class="comment">// 1表示来单提醒，2表示客户催单</span></span><br><span class="line">map.put(<span class="string">&quot;orderId&quot;</span>, ordersDB.getId());</span><br><span class="line">map.put(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;订单号：&quot;</span> + outTradeNo);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">webSocketServer.sendToAllClient(json);</span><br></pre></td></tr></table></figure><ul><li>客户催单</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户催单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reminder</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">ordersDB</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (ordersDB == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;type&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">&quot;orderId&quot;</span>, id);</span><br><span class="line">    map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span> + ordersDB.getNumber());</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">    webSocketServer.sendToAllClient(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache-ECharts-前端技术"><a href="#Apache-ECharts-前端技术" class="headerlink" title="Apache ECharts (前端技术)"></a>Apache ECharts (前端技术)</h2><blockquote><p>官网：<a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></p></blockquote><h2 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h2><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105120915135.png" alt="image-20231105120915135"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105121129571.png" alt="image-20231105121129571"></p><ul><li>POITest</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> POITest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/10/6 17:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个Excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、在内存中创建一个Excel文件</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">// 2、在Excel文件中创建一个Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.createSheet(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、在Sheet中创建行对象，row num编号从0开始</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 4、创建单元格并且写入文件内容</span></span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;城市&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新行</span></span><br><span class="line">        row = sheet.createRow(<span class="number">2</span>);</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        row = sheet.createRow(<span class="number">3</span>);</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;josh&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        <span class="comment">// 5、通过文件输出流将内存中的Excel文件写入到磁盘中</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\info.xlsx&quot;</span>));</span><br><span class="line">        excel.write(fos);</span><br><span class="line">        <span class="comment">// 6、关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取excel内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、通过文件输入流读取磁盘中的一个excel对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\info.xlsx&quot;</span>));</span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(fis);</span><br><span class="line">        <span class="comment">// 2、读取Excel文件中的第一个Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 3、获取Sheet中最后一行的行号, 是最后有数据的一行的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 获得某一行</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">            <span class="comment">// 获取单元格对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue1</span> <span class="operator">=</span> row.getCell(<span class="number">1</span>).getStringCellValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue2</span> <span class="operator">=</span> row.getCell(<span class="number">2</span>).getStringCellValue();</span><br><span class="line">            System.out.println(cellValue1 + <span class="string">&quot; &quot;</span> + cellValue2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、关闭资源</span></span><br><span class="line">        excel.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// write();</span></span><br><span class="line">            read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>导出运营数据Excel报表</li></ul><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105121808355.png" alt="image-20231105121808355"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105121930106.png" alt="image-20231105121930106"></p><p><img src="/2023/10/22/project-02-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20231105122105663.png" alt="image-20231105122105663"></p><ul><li>export</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出运营数据报表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportBusinessDate</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、查询数据库，获取营业额数据--查询最近30天的运营数据</span></span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">dateBegin</span> <span class="operator">=</span> LocalDate.now().minusDays(<span class="number">30</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">dateEnd</span> <span class="operator">=</span> LocalDate.now().minusDays(<span class="number">1</span>);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">begin</span> <span class="operator">=</span> LocalDateTime.of(dateBegin, LocalTime.MIN);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">end</span> <span class="operator">=</span> LocalDateTime.of(dateEnd, LocalTime.MAX);</span><br><span class="line">    <span class="comment">// 查询概览数据</span></span><br><span class="line">    <span class="type">BusinessDataVO</span> <span class="variable">businessDataVO</span> <span class="operator">=</span> workspaceService.getBusinessData(begin, end);</span><br><span class="line">    <span class="comment">// 2、通过POI将数据写入到Excel文件中</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/运营数据报表模板.xlsx&quot;</span>);</span><br><span class="line">    <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">sos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 基于模板文件创建一个新的Excel文件</span></span><br><span class="line">        excel = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(is);</span><br><span class="line">        <span class="comment">// 获取表格文件的Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">        <span class="comment">// 填充数据--时间</span></span><br><span class="line">        sheet.getRow(<span class="number">1</span>).getCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;时间：&quot;</span> + dateBegin + <span class="string">&quot;至&quot;</span> + dateEnd);</span><br><span class="line">        <span class="comment">// 获取第4行</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row4</span> <span class="operator">=</span> sheet.getRow(<span class="number">3</span>);</span><br><span class="line">        row4.getCell(<span class="number">2</span>).setCellValue(businessDataVO.getTurnover());</span><br><span class="line">        row4.getCell(<span class="number">4</span>).setCellValue(businessDataVO.getOrderCompletionRate());</span><br><span class="line">        row4.getCell(<span class="number">6</span>).setCellValue(businessDataVO.getNewUsers());</span><br><span class="line">        <span class="comment">// 获取第5行</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row5</span> <span class="operator">=</span> sheet.getRow(<span class="number">4</span>);</span><br><span class="line">        row5.getCell(<span class="number">2</span>).setCellValue(businessDataVO.getValidOrderCount());</span><br><span class="line">        row5.getCell(<span class="number">4</span>).setCellValue(businessDataVO.getUnitPrice());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> dateBegin.plusDays(i);</span><br><span class="line">            <span class="type">BusinessDataVO</span> <span class="variable">businessData</span> <span class="operator">=</span> workspaceService.getBusinessData(LocalDateTime.of(date, LocalTime.MIN),</span><br><span class="line">                                                                           LocalDateTime.of(date, LocalTime.MAX));</span><br><span class="line">            <span class="comment">// 获取某一行</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i + <span class="number">7</span>);</span><br><span class="line">            row.getCell(<span class="number">1</span>).setCellValue(date.toString());</span><br><span class="line">            row.getCell(<span class="number">2</span>).setCellValue(businessData.getTurnover());</span><br><span class="line">            row.getCell(<span class="number">3</span>).setCellValue(businessData.getValidOrderCount());</span><br><span class="line">            row.getCell(<span class="number">4</span>).setCellValue(businessData.getOrderCompletionRate());</span><br><span class="line">            row.getCell(<span class="number">5</span>).setCellValue(businessData.getUnitPrice());</span><br><span class="line">            row.getCell(<span class="number">6</span>).setCellValue(businessData.getNewUsers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过输出流将Excel文件下载到客户端浏览器</span></span><br><span class="line">        sos = response.getOutputStream();</span><br><span class="line">        excel.write(sos);</span><br><span class="line">        sos.close();</span><br><span class="line">        excel.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project-01-物联网环境检测系统</title>
      <link href="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>项目简介：传感器采集环境数据，通过数据服务中心处理环境参数，对采集、网络、入库、日志、配置、备份功能的分离，进而实现农棚设备的自动控制，实现智能监控，避免人工误操作。</p><p>项目代码：<a href="https://gitee.com/luozongwei/IoT-Data-Center">https://gitee.com/luozongwei/IoT-Data-Center</a></p></blockquote><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>需要处理的数据格式如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">100|101|2|16|1|3|57a491fc02|1|1516413763738</span><br><span class="line">100|101|2|16|1|3|57a891fc02|1|1516413764761</span><br><span class="line">100|101|2|16|1|3|57a491fc02|1|1516413765686</span><br><span class="line">100|101|2|256|1|3|001c03|1|1516413766708</span><br><span class="line">100|101|2|256|1|3|001c03|1|1516413767731</span><br><span class="line">100|101|2|16|1|3|57a492d002|1|1516413768756</span><br><span class="line">100|101|2|1280|1|3|02f801|1|1516413769787</span><br><span class="line">100|101|2|1280|1|3|02f801|1|1516413770702</span><br></pre></td></tr></table></figure><p>数据解析：</p><ol><li>发送端id </li><li>树莓派系统id</li><li>实验箱区域模块id(1-8) </li><li>模块上传感器地址 <ul><li>16，表示温度和湿度数据 </li><li>256，表示光照强度数据 </li><li>1280，表示二氧化碳数据</li></ul></li><li>传感器个数 </li><li>指令标号 如果是3表示需要接受数据，如果是16表示需要发送数据 </li><li>环境数据 </li><li>状态标识 默认为1，表示成功 </li><li>采集时间</li></ol><p>特别注意，关于一行中的第7个数据部分：</p><ul><li>如果当前是温度和湿度的数据，则前两个字节是温度，中间两个字节是湿 度，剩余字节不用管 </li><li>如果当前是光照强度的数据，则前两个字节就是数据值，剩余字节不用管 </li><li>如果当前是二氧化碳的数据，则前两个字节就是数据值，剩余字节不用管</li></ul><blockquote><p><font color="#d12920">注意，一个字节可以由2个十六进制表示 （一个字节8位，一个十六进制4位）</font></p></blockquote><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231009192010142.png" alt="image-20231009192010142"></p><p>把十六进制的环境数据，转为十进制的数据之后，还需要进一步处理：（公式无需深究，直接用即可，专业人士提供）</p><ul><li>如果是温度数据：(data*(0.00268127F))-46.85F</li><li>如果是湿度数据：(data*0.00190735F)-6 </li><li>如果是二氧化碳和光照强度，直接转换得到的十进制数据就可以表示</li></ul><h1 id="项目特色"><a href="#项目特色" class="headerlink" title="项目特色"></a>项目特色</h1><h2 id="SVN版本控制-–-git版本控制"><a href="#SVN版本控制-–-git版本控制" class="headerlink" title="SVN版本控制 –&gt; git版本控制"></a>SVN版本控制 –&gt; git版本控制</h2><blockquote><p>SVN具体是什么：<a href="https://www.lzwgxust.top/post/51ee138b.html">SVN轻松上手无忧版</a></p><p>首先一开始使用SVN进行版本控制，感觉到如果只是自己进行版本控制的话还挺好用的，但是多人用起来的话svn的<strong>合并分支</strong>真的是一言难尽，苦不堪言！ 每次从branches 合并到 trunk的时候总是会出现一些小问题呜呜呜~~</p><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231009184310773.png" alt="image-20231009184310773"></p><p>由于项目更多是个人独立开发所以并没有设计到更多的合并、冲突等等问题</p><p>有了SVN&#x2F;git进行版本控制，当我们发现当前版本开发错了或者是感觉还不如前面的版本的话，可以很方便的进行版本回退。</p><p>同时多人合作的时候，可以开不同权限的分支，我们只需要专注于自己设计的模块</p></blockquote><h2 id="Maven项目依赖控制"><a href="#Maven项目依赖控制" class="headerlink" title="Maven项目依赖控制"></a>Maven项目依赖控制</h2><blockquote><p>idea  Maven可以对项目中大量的第三方jar包进行依赖管理</p><p>大量的jar包可以到maven中央仓库中直接复制依赖dependency即可，idea会自动到中央仓库下载</p><p>同时子父项目的结构可以减少重复导入依赖的过程便于依赖管理</p></blockquote><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231009193013078.png" alt="image-20231009193013078"></p><p>使用指令的方式将项目原有的接口jar包 导入至本地maven仓库当中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.briup.env -DartifactId=env-gather-base -Dversion=1.0-SNAPSHOT -Dpackaging=jar -Dfile=env-gather-base-1.0-SNAPSHOT.jar -DgeneratePom=true</span><br></pre></td></tr></table></figure><h2 id="分功能处理"><a href="#分功能处理" class="headerlink" title="分功能处理"></a>分功能处理</h2><p>大的方面将项目分为三个子模块，分别是client、common、server 其中：</p><ul><li>client 按照功能分出：采集、client端网络、备份</li><li>common：日志、配置</li><li>server ：server端网络、入库</li></ul><p>功能分析：</p><ul><li>采集：主要将传感器生成的数据采集到java程序中</li><li>client端网络：将处理好的数据通过send发送给server端</li><li>备份：主要避免重复发送数据，计划只发送新采集到的数据，同时保存好数据用于之后的数据分析和展示</li><li>日志：按照不同的输出级别将信息保存起来，同时将日志信息输出到控制台当中</li><li>配置：将上面各个功能的对象初始化的功能抽离出来，同时保证每个模块读取config.xml配置文件的时候自动将配置文件中的数据注入到对应的对象属性值当中</li><li>server端网络：接收到client端发送过来的数据，将数据反序列化后交给入库功能</li><li>入库：将数据保存到数据库当中（按照不同时间存放到不同的表当中，一共有31张表）</li></ul><h2 id="第三方jar包"><a href="#第三方jar包" class="headerlink" title="第三方jar包"></a>第三方jar包</h2><ul><li>log4j：增强日志功能</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OFF FATAL ERROR WARN INFO DEBUG TRACE ALL</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">debug,stdout,D,E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=/home/hao/Desktop/error.log ###</span></span><br><span class="line"><span class="attr">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.D.File</span> = <span class="string">debug.log</span></span><br><span class="line"><span class="attr">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.D.Threshold</span> = <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=/home/hao/Desktop/error.log ###</span></span><br><span class="line"><span class="attr">log4j.appender.E</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.E.File</span> = <span class="string">error.log</span></span><br><span class="line"><span class="attr">log4j.appender.E.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.E.Threshold</span> = <span class="string">ERROR</span></span><br><span class="line"><span class="attr">log4j.appender.E.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.E.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure><ul><li>druid：连接池</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/envir?serverTimezone=Asia/Shanghai&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">lwsj</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xxxxxx</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><ul><li>dom4j：读取.xml配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用dom4j，读取xml文件内容，读到权限类名，输出</span></span><br><span class="line"><span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">document = saxReader.read(resource);</span><br><span class="line">parse(document); <span class="comment">// parse在下面介绍</span></span><br></pre></td></tr></table></figure><h2 id="ConfigurationImpl"><a href="#ConfigurationImpl" class="headerlink" title="ConfigurationImpl"></a>ConfigurationImpl</h2><ul><li>config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注:三级标签名不要相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.env.util.LogImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">backup</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.env.util.BackupImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">backup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.server.ServerImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server-port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">server-port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">core-pool-size</span>&gt;</span>5<span class="tag">&lt;/<span class="name">core-pool-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxinum-pool-size</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxinum-pool-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive-time</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">keep-alive-time</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbStore</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.server.DBStoreImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">db-backup-file-path</span>&gt;</span>server/src/main/resources/db-backup<span class="tag">&lt;/<span class="name">db-backup-file-path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">batch-size</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">batch-size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dbStore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ConfigurationImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备一个map集合</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ConfigurationImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 所有的主逻辑，都在构造器里写</span></span><br><span class="line">    <span class="comment">// 使用dom4j，读取xml文件内容，读到权限类名，输出</span></span><br><span class="line">    <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resource</span> <span class="operator">=</span> ConfigurationImpl.class.getClassLoader().getResourceAsStream(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        document = saxReader.read(resource);</span><br><span class="line">        parse(document);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Document document)</span> &#123;</span><br><span class="line">    <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">    List&lt;Element&gt; elements = root.elements();</span><br><span class="line">    <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">        <span class="comment">// 1、得到每一个子节点中 class属性值</span></span><br><span class="line">        <span class="type">Attribute</span> <span class="variable">aClass</span> <span class="operator">=</span> element.attribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> aClass.getText();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 2、通过反射创建都对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass1 = Class.forName(classPath);</span><br><span class="line">            Constructor&lt;?&gt; constructor = aClass1.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">            o = constructor.newInstance();</span><br><span class="line">            <span class="comment">// 3、判断是否实现了PropertiesAware 同时 判断是否有properties</span></span><br><span class="line">            <span class="comment">// 有的话将 每个二级子节点放入到properties当中</span></span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> PropertiesAware) &#123;</span><br><span class="line">                <span class="type">PropertiesAware</span> <span class="variable">propertiesAware</span> <span class="operator">=</span> (PropertiesAware) o;</span><br><span class="line">                List&lt;Element&gt; elements1 = element.elements();</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                <span class="keyword">for</span> (Element element1 : elements1) &#123;</span><br><span class="line">                    properties.put(element1.getName(), element1.getText());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    propertiesAware.init(properties);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(element.getName(), o);</span><br><span class="line">            map.forEach((k, v) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (v <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">                    <span class="type">ConfigurationAware</span> <span class="variable">configurationAware</span> <span class="operator">=</span> (ConfigurationAware) v;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        configurationAware.setConfiguration(<span class="built_in">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231015161418138.png" alt="image-20231015161418138"></p><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>server端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    <span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">    <span class="number">2000</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">5</span>),</span><br><span class="line">    Executors.defaultThreadFactory(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">    executor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 要做什么事情</span></span><br><span class="line">        <span class="comment">// 1、接收数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            Collection&lt;Environment&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Collection&lt;?&gt;) &#123;</span><br><span class="line">                Collection&lt;?&gt; coll = (Collection&lt;?&gt;) obj;</span><br><span class="line">                <span class="keyword">for</span> (Object o : coll) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Environment) &#123;</span><br><span class="line">                        <span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> (Environment) o;</span><br><span class="line">                        list.add(env);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2、入库</span></span><br><span class="line">            <span class="type">DBStore</span> <span class="variable">dbStore</span> <span class="operator">=</span> ConfigurationImpl.getInstance().getDbStore(); <span class="comment">// 通过ConfigurationImpl获取对象</span></span><br><span class="line">            dbStore.saveDB(list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;Environment&gt; <span class="title function_">gather</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 定义⼀个⽤来返回结果的集合</span></span><br><span class="line">    Collection&lt;Environment&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 统计⼀下各个数据的条数</span></span><br><span class="line">    <span class="comment">// 温湿度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 光照</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// CO2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使⽤raf可以随意访问⽂件的位置（访问上⼀次⽂件的尾部）</span></span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;client/src/main/resources/&quot;</span> + filePath, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;raf的字节数：&quot;</span> + raf.length());</span><br><span class="line">    <span class="comment">// 1、读取⽂件？⽂件输⼊字符流、缓冲流</span></span><br><span class="line">    <span class="comment">// plus：希望⽂件有更新的时候才采集，没有更新就不采集 -&gt; 备份模块的⽅法</span></span><br><span class="line">    <span class="comment">// 判断备份⽂件是否存在？</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(backupFile);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        <span class="comment">// 如果备份⽂件存在，和当前⽂件做个对⽐，看是否有更新？ 根据⽂件⼤⼩</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">load</span> <span class="operator">=</span> backup.load(file.getAbsolutePath(), Backup.LOAD_UNREMOVE);</span><br><span class="line">        <span class="comment">// 备份的内容可以是数据，可以是list也可以是⽂本，这⾥推荐每⼀次读取的数据量或者是指针</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span> (load <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">            l = (Long) load;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;保存的⻓度：&quot;</span> + l);</span><br><span class="line">        <span class="comment">// 如果备份⽂件⼩于采集⽂件，从新添加的位置开始读？RandomAccessFile</span></span><br><span class="line">        log.info(<span class="string">&quot;本次需要读取的⽂件⻓度：&quot;</span> + raf.length());</span><br><span class="line">        <span class="keyword">if</span> (raf.length() &gt; l) &#123;</span><br><span class="line">            <span class="comment">// 有更新，从保存的位置开始读取</span></span><br><span class="line">            raf.seek(l);</span><br><span class="line">            <span class="comment">// 读到⽂件是否要进⾏⼀下换⾏？</span></span><br><span class="line">            <span class="keyword">if</span> (l &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                raf.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (raf.length() &lt; l) &#123;</span><br><span class="line">            <span class="comment">// ⽂件出错了</span></span><br><span class="line">            log.warn(<span class="string">&quot;⽂件⻓度出现错误，⽐备份的内容要少&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ⽂件没有变化</span></span><br><span class="line">            log.warn(<span class="string">&quot;⽂件内容⽆更新&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = raf.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//2、对数据进⾏⼀些操作</span></span><br><span class="line">        <span class="comment">// 数据处理 省略......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 备份</span></span><br><span class="line">    <span class="comment">// 获取当前最新的指针位置进⾏保存</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">finalPointer</span> <span class="operator">=</span> raf.getFilePointer();</span><br><span class="line">    <span class="comment">// 调⽤备份模块</span></span><br><span class="line">    backup.store(file.getAbsolutePath(), finalPointer, Backup.STORE_OVERRIDE);</span><br><span class="line">    log.info(<span class="string">&quot;⽂件备份成功！&quot;</span>);</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    log.info(<span class="string">&quot;本次共采集环境数据【&quot;</span> + list.size() + <span class="string">&quot;】条，其中：&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;温度数据【&quot;</span> + count1 + <span class="string">&quot;】条，&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;湿度数据【&quot;</span> + count1 + <span class="string">&quot;】条，&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;光照强度数据【&quot;</span> + count2 + <span class="string">&quot;】条，&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;CO2浓度数据【&quot;</span> + count3 + <span class="string">&quot;】条。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、关闭连接</span></span><br><span class="line">    raf.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入和批处理"><a href="#插入和批处理" class="headerlink" title="插入和批处理"></a>插入和批处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveDB</span><span class="params">(Collection&lt;Environment&gt; collection)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取jdbc连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getDruidConnection();</span><br><span class="line">    <span class="comment">// 定义一个语句对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 定义一个前一天的变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">preDay</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义一个统计个数的变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1、集合遍历，取出每一个对象</span></span><br><span class="line">    <span class="keyword">for</span> (Environment environment : collection) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// 2、根据时间中的天数，插入到不同的表里</span></span><br><span class="line">        <span class="comment">// Calendar 或者 使用java.time包</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.setTime(environment.getGatherDate());</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据天数来构建插入语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into env_detail_&quot;</span> + day + <span class="string">&quot; values(?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">// 控制pst的数量，最多只有31个</span></span><br><span class="line">        <span class="keyword">if</span> (pst == <span class="literal">null</span>) &#123;</span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (preDay != day) &#123;</span><br><span class="line">                pst.executeBatch();</span><br><span class="line">                pst.clearBatch();</span><br><span class="line">                pst = conn.prepareStatement(sql);</span><br><span class="line">                preDay = day;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加入数据</span></span><br><span class="line">        pst = conn.prepareStatement(sql);</span><br><span class="line">        pst.setString(<span class="number">1</span>, environment.getName());</span><br><span class="line">        pst.setString(<span class="number">2</span>, environment.getSrcId());</span><br><span class="line">        pst.setString(<span class="number">3</span>, environment.getDesId());</span><br><span class="line">        pst.setString(<span class="number">4</span>, environment.getSensorAddress());</span><br><span class="line">        pst.setInt(<span class="number">5</span>, environment.getCount());</span><br><span class="line">        pst.setString(<span class="number">6</span>, environment.getCmd());</span><br><span class="line">        pst.setFloat(<span class="number">7</span>, environment.getData());</span><br><span class="line">        pst.setInt(<span class="number">8</span>, environment.getStatus());</span><br><span class="line">        pst.setTimestamp(<span class="number">9</span>, environment.getGatherDate());</span><br><span class="line">        <span class="comment">// 4、批处理</span></span><br><span class="line">        pst.addBatch();</span><br><span class="line">        <span class="keyword">if</span> (count % batchSize == <span class="number">0</span>) &#123;</span><br><span class="line">            pst.executeBatch();</span><br><span class="line">            pst.clearBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        pst.executeUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pst != <span class="literal">null</span> &amp;&amp; count % batchSize != <span class="number">0</span>) &#123;</span><br><span class="line">        pst.executeBatch();</span><br><span class="line">        pst.clearBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;入库成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里有一个超级细节的地方就是时间问题，因为我们处在东八区，所以传感器生成数据的时间是东八区的时间</p><p>如果这个时候我们使用serverTimezone&#x3D;UTC-8 存入数据库的化会出现20号的数据出现在19号的表中</p><p>解决方法：使用 serverTimezone&#x3D;Asia&#x2F;Shanghai</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/envir?serverTimezone=Asia/Shanghai&amp;useServerPrepStmts=true</span></span><br></pre></td></tr></table></figure><p>当然这里还涉及到如何创建31张不同的日期表的问题哈~~</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database envir;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;envir&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;envir&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> envir.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;envir&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> names utf8;</span><br><span class="line">use envir;</span><br><span class="line"><span class="comment">--使用存储过程建表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> create_table_do;</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> create_table_do()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> <span class="number">32</span> DO</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@STMT</span> <span class="operator">=</span> CONCAT(&quot;DROP TABLE IF EXISTS `env_detail_&quot;,i,&quot;`;&quot;);</span><br><span class="line"><span class="keyword">PREPARE</span> STMT <span class="keyword">FROM</span> <span class="variable">@STMT</span>; </span><br><span class="line"><span class="keyword">EXECUTE</span> STMT;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@STMT</span> <span class="operator">=</span> CONCAT(&quot;CREATE TABLE IF NOT EXISTS `env_detail_&quot;,i,</span><br><span class="line">&quot;`(`name` varchar(20) NOT NULL COMMENT &#x27;传感器名称&#x27;,</span><br><span class="line">`srcId` varchar(5) NOT NULL COMMENT &#x27;发送端id&#x27;,</span><br><span class="line">`dstId` varchar(5) NOT NULL COMMENT &#x27;树莓派系统id&#x27;,</span><br><span class="line">`sersorAddress` varchar(7) NOT NULL COMMENT &#x27;模块上传感器地址&#x27;,</span><br><span class="line">`count` int(2) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;传感器个数&#x27;,</span><br><span class="line">`cmd`  varchar(5) NOT NULL  DEFAULT &#x27;3&#x27; COMMENT &#x27;指令标号(3表示需要接受数据  16表示需要发送数据)&#x27;,</span><br><span class="line">`data` float(9,4) NOT NULL COMMENT &#x27;采集的数据&#x27;,</span><br><span class="line">`status` int(2) NOT NULL DEFAULT &#x27;1&#x27;  COMMENT &#x27;状态标示(默认为1表示成功)&#x27;,</span><br><span class="line">`gather_date` timestamp NOT NULL COMMENT &#x27;采集时间&#x27;)ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT=&#x27;数据详情日表&#x27;;&quot;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">PREPARE</span> STMT <span class="keyword">FROM</span> <span class="variable">@STMT</span>; </span><br><span class="line"><span class="keyword">EXECUTE</span> STMT;</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CALL</span> create_table_do();</span><br></pre></td></tr></table></figure><h2 id="本地与服务器联调"><a href="#本地与服务器联调" class="headerlink" title="本地与服务器联调"></a>本地与服务器联调</h2><blockquote><p>将server端打成jar包丢到服务器上，通过 java -jar xxxx.jar 启动server端</p><p>启动本地client端，将数据send到server端</p></blockquote><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231015152312868.png" alt="image-20231015152312868"></p><p><img src="/2023/10/09/project-01-%E7%89%A9%E8%81%94%E7%BD%91%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20231015152524181.png" alt="image-20231015152524181"></p><h2 id="收获与喜悦"><a href="#收获与喜悦" class="headerlink" title="收获与喜悦"></a>收获与喜悦</h2><blockquote><p>故余虽愚，卒获有所闻</p></blockquote><p>本项目没有使用到ssm等热门的框架，重在理解执行流程</p><p>项目的难点：</p><ul><li>数据处理，能否正确的理解好数据以及处理好数据真的是至关重要的</li><li>configurationImpl 封装，一个好的封装能够很大程度上简化代码，但是难度颇高</li><li>性能优化：大量的插入数据考虑：批量插入；如果有多个客户端发送数据考虑：线程池</li><li>创建31张不同日期的表：使用mysql中的存储过程实现</li></ul><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpolar简易实现内网穿透</title>
      <link href="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>很多时候我们都是局域网ip，如何实现让别人的电脑访问你本机的项目或者说数据呢？</p><p><strong>内网穿透</strong>就是解决上述问题的一个技术：其实很简单，就是提供一个公网ip，让别人通过该ip+port访问你，cpolar就是为本机提供一个公网ip。</p><p>cpolar官网: <a href="https://www.cpolar.com/?_gl=1*nw6pwl*_ga*Mjg2NzYwOTM2LjE2OTY0ODE5Mjc.*_ga_WF16DPKZZ1*MTY5NjQ4MTkyNy4xLjEuMTY5NjQ4MjIwMy41OS4wLjA.">cpolar - 安全的内网穿透工具</a></p></blockquote><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><blockquote><p>首先你得在cpolar官网注册一个账号：</p></blockquote><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005132525161.png" alt="image-20231005132525161"></p><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005132741775.png" alt="image-20231005132741775"></p><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005132932024.png" alt="image-20231005132932024"></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><blockquote><p>要清楚电脑是什么操作系统的</p></blockquote><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005133204305.png" alt="image-20231005133204305"></p><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005133301445.png" alt="image-20231005133301445"></p><blockquote><p>上述指令只需要执行一次即可</p></blockquote><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005133504422.png" alt="image-20231005133504422"></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><blockquote><p>会生成两个公网访问连接：http 和 https</p><p><strong>注意是临时的公网ip！！</strong></p></blockquote><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005133644343.png" alt="image-20231005133644343"></p><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005134035889.png" alt="image-20231005134035889"></p><blockquote><p>直接通过 <code>https://725228fd.r9.cpolar.top/doc.html#/home</code>访问我的项目即可</p></blockquote><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005134203740.png" alt="image-20231005134203740"></p><p><img src="/2023/10/05/cpolar%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20231005134256144.png" alt="image-20231005134256144"></p><blockquote><p>coplar的基本使用就是这样啦，有缘再会！</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expand-04-JUC深入并发编程</title>
      <link href="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：JVM、JDK新特性、JDK源码、高并发、MySql优化</p></blockquote><h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><p>JUC（java.util.concurrent包），主要包括线程池工厂类Executors，线程池实现类ThreadPoolExecutor 等。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="线程回顾"><a href="#线程回顾" class="headerlink" title="线程回顾"></a>线程回顾</h3><ol><li>创建线程的方式<ul><li>继承Thread</li><li>实现Runnable</li><li>实现Callable</li></ul></li><li>线程状态</li></ol><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230917112429795.png" alt="image-20230917112429795"></p><ul><li>NEW：刚刚创建，没做任何操作</li><li>RUNNABLE：调用run，可以执行，但不代一定在执行（RUNNING、READY）</li><li>BLOCKED：抢不到锁</li><li>WAITING</li><li>TIMED_WAITING</li><li>TERMINATED</li></ul><ol start="3"><li>线程池</li></ol><p>线程池就是创建一个换成池存放线程，执行结束以后，该线程并不会死亡，而是再次返回线程池种成为空闲状态。</p><p>使用线程池的优势：</p><ul><li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗</li><li>提高系统响应速度，当有任务到达时，通过复用已存在的线程，无需等待新线程的创建便能立即执行</li><li>方便线程并发数的管控，因为线程若是无限制地创建，可能会导致内存占用过多而产生OOM</li><li>节省CPU切换线程的时间成本（需要保持当前执行线程的现场，并恢复要执行线程的现场）</li><li>提供更强大的功能，延时定时线程池（Timer vs ScheduledThreadPoolExecutor）</li></ul><ol start="4"><li>线程池体系</li></ol><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230917115102413.png" alt="image-20230917115102413"></p><p>说明:</p><ul><li>最常用的是ThreadPoolExecutor</li><li>调度用ScheduledThreadExecutor</li><li>任务拆分合并用ForkJoinPool</li><li>Executors是工具类，协助你创建线程池的</li></ul><h3 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h3><p>Java 提供的线程池相关的工具类中，最核心的是 ThreadPoolExecutor，我们首先来看它的类体系及构造</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230917120156688.png" alt="image-20230917120156688"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RejectedExecutionHandler</span> <span class="variable">defaultHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbortPolicy</span>();</span><br><span class="line">    <span class="comment">//核心的构造函数，其他构造函数都是调用该构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池核心参数介绍：</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230917120449445.png" alt="image-20230917120449445"></p><ol><li><p><strong>corePoolSize：核心线程数量</strong></p><ul><li>线程刚创建时，线程数量为0，当每次执行execute添加新的任务时会在线程池创建一个新的线程，直到线程数量达到corePoolSize为止。</li><li>核心线程会一直存活，即使没有任务需要执行，当线程数小于核心线程数时，即使有线程空闲，线程也会优先创建新线程处理</li><li>设置allowCoreThreadTimeout&#x3D;true(默认false) 时，核心线程超时会关闭</li></ul></li><li><p><strong>workQueue：阻塞队列</strong></p><ul><li>当线程池正在运行的线程数量以及达到corePoolSize,那么通过execute添加新的任务则会被加入workQueue队列中，在队列中排队等待执行，而不会立即执行。</li><li>阻塞队列有以下几种选择：<ul><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>SynchronousQueue</li></ul></li></ul></li><li><p><strong>maxinumPoolSize: 最大线程数</strong></p><ul><li>当池中的线程数&gt;&#x3D;corePoolSize,且任务队列已满时，线程池会创建新线程来处理任务</li><li>当池中的线程数&#x3D;maximumPoolSize, 且任务队列已满时，线程池会拒绝处理任务而抛出异常</li></ul></li><li><p><strong>KeepAliveTime：线程空闲时间</strong></p><ul><li>当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量&#x3D;corePoolSize</li><li>如果allowCoreThreadTimeout&#x3D;true,则会直到线程数量&#x3D;0</li></ul></li><li><p><strong>threadFactory：线程工厂，主要用来创建线程</strong></p></li><li><p><strong>rejectedExecutionHandler：任务拒绝处理器，两种情况会拒绝处理任务</strong></p><ul><li>当线程数已经达到maxPoolSize，且队列已满，会拒绝新任务</li><li>当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务的</li><li>当拒绝处理任务时线程池会调用refectedExecutionHandler来处理这个任务。如果没有设置默认时AbortPolicy,另外在ThreadPoolExecutor类有几个内部实现类来处理这类情况：<ul><li>ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出 RejectedExecutionException异常</li><li>ThreaPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li></ul></li></ul></li></ol><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><p>ThradPoolExecutor的最基本使用方式就是通过execute方法提交一个Runnable任务</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230918205921908.png" alt="image-20230918205921908"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230918210046637.png" alt="image-20230918210046637"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230918210418216.png" alt="image-20230918210418216"></p><p><font color="#d12920">一定要通过idea一步一步去看源码，不然会很晕的~~</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();<span class="comment">// 看下图</span></span><br><span class="line">    <span class="comment">//判断工作数，如果小于coreSize，addWork，注意第二个参数core=true</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程池是RUNNING状态并且task入阻塞队列成功</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="comment">// 在检查一下状态</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="comment">// 如果线程池已经终止，直接移除任务，不再响应</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="comment">// 否则，如果没有可用的线程的话（比如coreSize=0），创建一个空worker</span></span><br><span class="line">        <span class="comment">// 该worker创建时不会给指派任务（为null），但是会被放入workers集合，进而从workerQueue队列获取任务区执行</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 队列也满了，继续调addWorker,但是注意，core=false，开启到maxSize的大门</span></span><br><span class="line">    <span class="comment">// 超出max的话，addWorker会返回false，进入reject</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230918212646562.png" alt="image-20230918212646562"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">    <span class="comment">//第一步，计数判断，不符合条件打回false</span></span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line">            <span class="comment">// 判断线程数，说明线程池的线程数是不能设置任意大的</span></span><br><span class="line">            <span class="comment">// 最大29位（CAPACITY=29位二进制）</span></span><br><span class="line">            <span class="comment">// 超出规定范围，返回false，表示不允许再开启新工作线程，创建worker失败！</span></span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步，创建新worker放入线程集合workers（一个HashSet）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//符合条件，创建新的worker并包装task</span></span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 可重入锁</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">            <span class="comment">// 加锁，workers是一个hashset，这里要保障线程安全性</span></span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">                    </span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    </span><br><span class="line">                    workerAdded = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                <span class="comment">//注意，只要是成功add了新的worker，那么将该新worker立即启动，任务得到执行</span></span><br><span class="line">                t.start(); <span class="comment">// 会自动调用ThreadPoolExecutor中Worker内部类中的 run()</span></span><br><span class="line">                workerStarted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    runWorker(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//任务获取与执行</span></span><br><span class="line">    <span class="comment">//在worker执行runWorker()的时候，不停循环，先查看自己有没有携带Task，如果有，执行</span></span><br><span class="line">    <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123; <span class="comment">// 主要是这个getTask()方法</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果没有，会调用getTask,从队列获取任务</span></span><br><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling? - 很形象，要不要乖乖的被“捕杀”？</span></span><br><span class="line">        <span class="comment">// 判断是不是要超时处理，重点！ 决定了当前线程要不要被释放</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line">        <span class="comment">// 线程数超出max，并且上次循环中poll等待超时了，那么说明该线程已终止</span></span><br><span class="line"><span class="comment">// 将线程队列数量原子性减一</span></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="comment">// 计数器做原子递减，递减成功后，返回null，for被中止</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 递减失败，继续下一轮循环，直到成功</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果线程可被释放，那就poll，释放的时间为：keepAliceTime</span></span><br><span class="line">            <span class="comment">// 否则，线程是不会被释放的，take一直被阻塞在这里，直到来了新任务继续工作</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">            workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Executors-不建议用这个"><a href="#Executors-不建议用这个" class="headerlink" title="Executors(不建议用这个)"></a>Executors(不建议用这个)</h3><p>以上构造函数参数比较多，为了方便使用，JUC提供了一个Executors工具类，内部提供静态方法</p><ul><li>newCachedThreadPool()：弹性线程数</li><li>newFixedThreadPool(int nThreads)：固定线程数</li><li>newSingleThreadExecutor()：单一线程数</li><li>newScheduledThreadPool(int corePoolSize):可调度，常用于定时</li></ul><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230919194735981.png" alt="image-20230919194735981"></p><h3 id="经典面试"><a href="#经典面试" class="headerlink" title="经典面试"></a>经典面试</h3><ol><li>线程池是如果保证线程不被销毁的呢？</li></ol><p>如果队列中没有任务时，核心线程会一直阻塞在获取任务的方法，直到返回任务。而任务执行完后，又会进入下一轮worker.runWork()中循环</p><p>验证：秘密就藏在核心源码里 ThreadPoolExecutor.getTask()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//worker.runWork():</span></span><br><span class="line"><span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//work.getTask():</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">workQueue.take();</span><br></pre></td></tr></table></figure><ol start="2"><li>核心线程与非核心线程有区别吗？</li></ol><p>没有，被销毁的线程和创建的先后无关，即便是第一个被创建的核心线程，仍然有可能被销毁。</p><p>验证：看源码，每个worker在runWork()的时候去getTask()，在getTask内部，并没有针对性地区分当前 worker是否是核心线程的操作，只是判断workers数量超出core，就会调用poll()，否则take()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">workQueue.take();</span><br></pre></td></tr></table></figure><h2 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork&#x2F;Join"></a>Fork&#x2F;Join</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ForkJoinPool是由JDK1.7后提供多线程并行执行任务的框架，可以理解为一种特殊的线程池<strong>（有点像MapReduce）</strong></p><ul><li>任务分割：fork(分叉),先把大的任务分割成足够小的子任务，如果子任务比较大的话还要对子任务进行继续分割</li><li>合并结果：join，分割后的子任务被多个线程执行后，再合并结果，得到最终的完整输出</li></ul><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230921200750431.png" alt="image-20230921200750431"></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>ForkJoinTask：主要提供fork和join两个方法用于任务拆分与合并，一般用子类 <strong>RecursiveAction（无返回值的任务）</strong>和<strong>RecursiveTask（需要返回值）</strong>来实现compute方法。</li><li>ForkJoinPool：调度ForkJoinTask的线程池</li><li>ForkJoinWorkerThread：Thread的子类，存放于线程池种的工作线程（Worker）</li><li>WorkQueue：任务队列，用于保存任务</li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SumTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SubTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line">        <span class="comment">// 子任务开始计算的值</span></span><br><span class="line">        <span class="keyword">private</span> Integer start;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子任务结束计算的值</span></span><br><span class="line">        <span class="keyword">private</span> Integer end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SubTask</span><span class="params">(Integer start , Integer end)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(end - start &lt; MAX) &#123;</span><br><span class="line">                <span class="comment">//小于边界，开始计算</span></span><br><span class="line">                System.out.println(<span class="string">&quot;start = &quot;</span> + start + <span class="string">&quot;;end = &quot;</span> + end);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">totalValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="built_in">this</span>.start ; index &lt;= <span class="built_in">this</span>.end ; index++) &#123;</span><br><span class="line">                    totalValue += index;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> totalValue;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则，中间劈开继续拆分</span></span><br><span class="line">                <span class="type">SubTask</span> <span class="variable">subTask1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTask</span>(start, (start + end) / <span class="number">2</span>);</span><br><span class="line">                subTask1.fork(); <span class="comment">// 将任务拆分</span></span><br><span class="line">                <span class="type">SubTask</span> <span class="variable">subTask2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTask</span>((start + end) / <span class="number">2</span> + <span class="number">1</span> , end);</span><br><span class="line">                subTask2.fork(); <span class="comment">// 将任务拆分</span></span><br><span class="line">                <span class="keyword">return</span> subTask1.join() + subTask2.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        Future&lt;Integer&gt; taskFuture =  pool.submit(<span class="keyword">new</span> <span class="title class_">SubTask</span>(<span class="number">1</span>,<span class="number">1000</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> taskFuture.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>普通线程池内部有两个重要集合：工作线程集合（普通线程）和任务队列。</p><p>ForkJoinPool也类似，线程集合里放的是特殊线程ForkJoinWorkerThread, 任务队列里放的是特殊任务ForkJoinTask</p><p>不同之处在于，普通线程池只有一个队列，而ForkJoinPool的工作线程ForkJoinWorkerThread每个线程内都绑定一个双端队列。</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230922084233335.png" alt="image-20230922084233335"></p><p>在fork的时候，也就是任务拆分，拆分的task会被当前线程放到自己的队列中。如果有任务，那么线程优先从自己的队列里去任务，以<strong>FILO</strong>先进后出方式从队尾获取任务。当自己队列中任务执行完后，工作线程会跑到其他队列以work-stealing窃取任务，窃取方式为<strong>FIFO</strong>先进先出，减少竞争。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>使用ForkJoin将相同的计算任务通过多线程执行，但是在使用中需要注意：</p><ul><li>任务切分的粒度，也就是fork的界限，并非越小越好</li><li>判断要不要使用ForkJoin，<strong>任务量不是太大的话</strong>，串行可能优于并行，因为多线程会涉及到上下文的切换</li></ul><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被终端的一个或一系列操作”</p><p><font color="#d12920">原子性指的是汇编指令层面，比如java中的 i++，其实涉及到了好几条的汇编指令</font></p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS(Compare-and-Swap&#x2F;Exchange),即比较并替换，<strong>是一种乐观锁的实现，用于解决并发问题</strong>。</p><p>CAS核心算法：执行函数CAS（V,E,N）</p><ul><li>V表示准备要被更新的变量（内存的值）</li><li>E表示我们提供的期望的值（期望的原值）</li><li>N表示新值，准备更新V的值（新值）</li></ul><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230919201515325.png" alt="image-20230919201515325"></p><p>JUC中提供了Atomic开头的类，基于CAS实现原子性操作，最基本的应用就是计数器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicCounter</span> &#123;</span><br><span class="line">    <span class="comment">// AtomicInteger保证了 i变量的操作是具有原子性的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inc</span><span class="params">()</span> &#123;</span><br><span class="line">        i.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicCounter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicCounter</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    counter.inc();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//可以正确输出10</span></span><br><span class="line">        System.out.println(i.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS虽然很高效地解决了原子操作问题，但是CAS仍然存在三大问题：</p><ul><li>自旋（循环）时间长开销很大，如果CAS失败，会一直进行尝试。如果CAS长时间一直不成功，可能会给CPU带来很大的开销，注意这里的<strong>自旋是在用户态&#x2F;SDK层面实现的</strong></li><li><strong>只能保证一个共享变量</strong>的原子操作，对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁来保证原子性</li><li>ABA问题，在使用CAS前要考虑清楚“ABA”问题是否会影响程序并发的正确性，如果需要解决ABA问题，<strong>改用传统的互斥同步可能会比CAS更高效。或者在E对象里加个操作次数变量</strong>，每次判断时对比两个，E和操作次数就ok了，因为ABA问题中就算E相同操作次数也绝不相同。</li></ul><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><ul><li>基本类型<ul><li>AtomicBoolean：以原子更新的方式更新Boolean</li><li>AtomicInteger：以原子更新的方式更新Integer</li><li>AtomicLong：以原子更新的方式更新Long</li></ul></li><li>引用类型<ul><li>AtomicReference：原子更新引用类型</li><li>AtomicReferenceFieldUpdater：原子更新引用类型的字段</li><li>AtomicMarkableReference：原子更新带有标志位的引用类型</li></ul></li><li>数组<ul><li>AtomicIntegerArray：原子更新整型数组里的元素 </li><li>AtomicLongArray：原子更新长整型数组里的元素 </li><li>AtomicReferenceArray：原子更新引用类型数组里的元素</li></ul></li><li>字段<ul><li>AtomicIntegerFieldUpdater：原子更新整型的字段的更新器 </li><li>AtomicLongFieldUpdater：原子更新长整型字段的更新器</li><li>AtomicStampedReference：原子更新带有版本号的引用类型</li></ul></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用atomic要注意原子性的边界，把握不好会起不到应有的效果，原子性被破坏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAtomic</span> &#123;</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">badInc</span><span class="params">()</span> &#123; <span class="comment">// + synchronized可以解决同步问题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i.incrementAndGet();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        j = k; <span class="comment">// 再次赋值导致原子性被破坏了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">BadAtomic</span> <span class="variable">atomic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAtomic</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                atomic.badInc();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(atomic.j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导致每次结果不一样</span></span><br></pre></td></tr></table></figure><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923092837608.png" alt="image-20230923092837608"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">class</span> <span class="title class_">MyLock</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个状态变量status：为1表示锁被持有，为0表示锁未被持有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> reflectGetUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Queue&lt;Thread&gt; QUEUE = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (MyLock.class.getDeclaredField(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title function_">reflectGetUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 阻塞式获取锁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// CAS+自旋</span></span><br><span class="line">        <span class="keyword">while</span> (!compareAndSet(<span class="number">0</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cas 设置 status</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 释放锁</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题：获取不到锁自旋时，是空转，浪费CPU</strong></p><p>解决方法：</p><ul><li>使用 <code>yield</code> 让出CPU执行权，等待调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!compareAndSet(<span class="number">0</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();<span class="comment">//yield+自旋,尽可能的防止CPU空转,让出CPU资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以采用线程休眠的方式，但是休眠时间不太好确定，太长太短都不好。</p><ul><li>采用等待唤醒机制，但是这里由于没有使用<code>synchronized</code>关键字，所以也无法使用<code>wait/notify</code>,但是我们可以使用<code>park/unpark</code>，获取不到锁的线程<code>park</code>并且去队列排队，释放锁时从队列拿出一个线程<code>unpark</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Queue&lt;Thread&gt; QUEUE = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!compareAndSet(<span class="number">0</span>,<span class="number">1</span>)) &#123;</span><br><span class="line">        QUEUE.offer(Thread.currentThread());</span><br><span class="line">        LockSupport.park();<span class="comment">//线程休眠</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    status = <span class="number">0</span>;</span><br><span class="line">    LockSupport.unpark(QUEUE.poll()); <span class="comment">// 从队列拿出一个队列的头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AQS概述"><a href="#AQS概述" class="headerlink" title="AQS概述"></a>AQS概述</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923095045355.png" alt="image-20230923095045355"></p><ol start="6"><li>AQS底层使用了模板方法模式，给我们提供了许多模板方法，直接使用即可。</li></ol><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923100633835.png" alt="image-20230923100633835"></p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>直接继承AbstractQueuedSynchronizer重写其中的tryXxxx方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Syn</span> <span class="variable">syn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Syn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用模板方法</span></span><br><span class="line">        syn.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用模板方法</span></span><br><span class="line">        syn.release(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现一个独占同步器</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Syn</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, arg)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">            setState(arg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923101646456.png" alt="image-20230923101646456"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程一来首先调用<code>tryAcquire</code>, 在<code>tryAcquire</code>中直接CAS获取锁，如果获取不成功通过<code>addWaite</code>r加入等待队列，然后走<code>acquireQueued</code>让队列中的某个等待线程去获取锁</li><li>不公平就体现在这里，线程来了也不先看一下等待队列中是否有线程在等待，如果没有线程等待，那就直接获取锁没什么问题，如果有线程等待就直接去获取锁不就相当于插队了吗？</li></ul><ol><li>查看 AbstractQueuedSynchronizer 的类定义，虽然它里面代码很多，但重要的属性就那么几个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">extends</span> <span class="title class_">AbstractOwnableSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="comment">//其他不重要的略</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionObject</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>, java.io.Serializable &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923102816329.png" alt="image-20230923102816329"></p><ol start="2"><li>AQS加锁最核心的代码就是如下，我们要来探究它的实现原理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923103456490.png" alt="image-20230923103456490"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923103550773.png" alt="image-20230923103550773"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923103636734.png" alt="image-20230923103636734"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923103749389.png" alt="image-20230923103749389"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923103837472.png" alt="image-20230923103837472"></p><ol start="3"><li>原理搞懂了，那如何让自定义的锁是公平的呢？</li></ol><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923104038446.png" alt="image-20230923104038446"></p><ol start="4"><li>现在已经有公平锁了，但是成年人的世界不是做选择题，而是都想要，自己编写的锁既能支持公平 锁，也支持非公平锁，让使用者可以自由选择，怎么办？</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个独占同步器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        setState(arg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断等待队列中是否有线程在排队 没有线程排队则直接去获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="number">0</span>,arg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoFairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="comment">//直接去获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>,arg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>现在锁的公平性问题解决了，但是老板又出了新的需求，要求我们的锁支持可重入，因为它写了如 下一段代码，发现一直获取不到锁。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLock</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3 get lock,then do something &quot;</span>);</span><br><span class="line">        test4();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4 get lock,then do something &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如何让锁支持可重入呢？也就是说如果一个线程持有锁之后，还能继续获取锁(<strong>同一线程可重入</strong>)，也就是说让锁只对<strong>不同线程互斥</strong>。</p><p>查看 <code>AbstractQueuedSynchronizer</code> 的定义我们发现，它还继承自另一个类： <code>AbstractOwnableSynchronizer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">extends</span> <span class="title class_">AbstractOwnableSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractOwnableSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Thread exclusiveOwnerThread;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setExclusiveOwnerThread</span><span class="params">(Thread thread)</span> &#123;...&#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Thread <span class="title function_">getExclusiveOwnerThread</span><span class="params">()</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原来 AQS 中有个变量是可以保存当前持有独占锁的线程的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个独占同步器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前线程是不是 该独占锁的拥有者</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">realRelease</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextState</span> <span class="operator">=</span> getState() - arg;</span><br><span class="line">        <span class="keyword">if</span> (nextState == <span class="number">0</span>) &#123;</span><br><span class="line">            realRelease = <span class="literal">true</span>;</span><br><span class="line">            setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setState(nextState);</span><br><span class="line">        <span class="keyword">return</span> realRelease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentState</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="keyword">if</span> (currentState == <span class="number">0</span> ) &#123; <span class="comment">// 可以获取锁</span></span><br><span class="line">            <span class="comment">//先判断等待队列中是否有线程在排队 没有线程排队则直接去获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="number">0</span>,arg)) &#123;</span><br><span class="line">                <span class="comment">//把当前线程设置在这个锁上，表示抢占成功,在重入锁的时候需要</span></span><br><span class="line">                setExclusiveOwnerThread(currentThread);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比较当前线程和占用锁的线程是不是一个线程</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (currentThread == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="comment">//重入逻辑 增加 state值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextState</span> <span class="operator">=</span> currentState + arg;</span><br><span class="line">            <span class="keyword">if</span> (nextState &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setState(nextState);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoFairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentState</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="keyword">if</span> (currentState ==<span class="number">0</span> ) &#123; <span class="comment">// 可以获取锁</span></span><br><span class="line">            <span class="comment">//直接去获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>,arg)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(currentThread);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (currentThread == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="comment">//重入逻辑 增加 state值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextState</span> <span class="operator">=</span> currentState + arg;</span><br><span class="line">            <span class="keyword">if</span> (nextState &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setState(nextState);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923105839391.png" alt="image-20230923105839391"></p><h2 id="并发容器-了解即可"><a href="#并发容器-了解即可" class="headerlink" title="并发容器(了解即可)"></a>并发容器(了解即可)</h2><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923110121557.png" alt="image-20230923110121557"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array; <span class="comment">// volatile</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock; <span class="comment">// lock加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>); <span class="comment">// 数组复制</span></span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CopyOnWriteArraySet<ul><li>对应：HashSet</li><li>目标：代替synchronizedSet</li><li>原理：与CopyOnWriteArrayList实现原理类似。</li></ul></li></ul><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923110704578.png" alt="image-20230923110704578"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923112440642.png" alt="image-20230923112440642"></p><h1 id="并发深入"><a href="#并发深入" class="headerlink" title="并发深入"></a>并发深入</h1><h2 id="基本协同"><a href="#基本协同" class="headerlink" title="基本协同"></a>基本协同</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li>wait：让出锁，阻塞等待</li><li>notify&#x2F;notifyAll：唤醒wait的进程</li></ul><p>扩展：JDK1.5+的lock中支持条件变量， Condition.await()，signal&#x2F;signalAll 与 wait&#x2F;notify效果一样，可 以做到更精细化控制。</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><ul><li>sleep：休眠一下，让出CPU资源，但是不会释放锁</li><li>yield：不释放锁，运行转为就绪，让出CPU给大家竞争，当然有可能自己又抢回来</li><li>join：父线程等待子线程执行完成后再执行，将异步转为同步（注意挂起的是子线程，阻断的是父线程）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  面试题：在synchronized代码块内调用join，是否会释放锁？</span></span><br><span class="line"><span class="comment">    .wait（）是Object下的方法，而.join（）是Thread的方法，这就出现了一个问题，</span></span><br><span class="line"><span class="comment">    join通过wait实现，释放锁，那么释放的是哪个锁，是Thread还是Object呢？</span></span><br><span class="line"><span class="comment">    当join前面的对象与synchronized一致时，释放锁，否则不释放。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main.start&quot;</span>);</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// synchronized (myThread.lock)&#123;</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sub)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:before sub&quot;</span>);</span><br><span class="line">            <span class="comment">//1.为什么不会死锁？</span></span><br><span class="line">            sub.start();</span><br><span class="line">            System.out.println(<span class="string">&quot;main:after sub&quot;</span>);</span><br><span class="line">            <span class="comment">//2.打开join试试：如果线程卡死，说明main不释放锁，如果可以顺利执行，说明sub拿到了锁！</span></span><br><span class="line">            sub.join();</span><br><span class="line">            System.out.println(<span class="string">&quot;main after join&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sub.join();</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main.end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] lock = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am sub&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的三大特性"><a href="#线程的三大特性" class="headerlink" title="线程的三大特性"></a>线程的三大特性</h2><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923113933596.png" alt="image-20230923113933596"></p><ul><li>CPU添加高速缓存，来平衡与内存的速度差异</li><li>操作系统支持多进程、多线程，以分时复用CPU，进而均衡CPU与I&#x2F;O设备的速度差异</li><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用</li></ul><h3 id="CPU缓存导致可见性问题"><a href="#CPU缓存导致可见性问题" class="headerlink" title="CPU缓存导致可见性问题"></a>CPU缓存导致可见性问题</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923114359260.png" alt="image-20230923114359260"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923114536522.png" alt="image-20230923114536522"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923114628236.png" alt="image-20230923114628236"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    程序运行5秒后，并未停止</span></span><br><span class="line"><span class="comment">    由于共享变量的可见性问题，主线程对变量的修改，其它线程并未看到</span></span><br><span class="line"><span class="comment">    问题解决：共享变量用volatile修饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisibilityTest</span> &#123;</span><br><span class="line">    <span class="comment">// 多线程共享变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span>  <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// private static volatile boolean running =  true;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        t1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread exit&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程切换导致原子性问题"><a href="#线程切换导致原子性问题" class="headerlink" title="线程切换导致原子性问题"></a>线程切换导致原子性问题</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923115155135.png" alt="image-20230923115155135"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923115322282.png" alt="image-20230923115322282"></p><p>这种切换属于一种重量级的切换，现代的操作系统都基于更轻量的线程来调度，而一个进程创建的所有 线程，都是共享一个内存空间的，所以线程切换的成本就很低了，并且线程切换的时机大都是在时间片结束的时候。如下：</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923115951253.png" alt="image-20230923115951253"></p><p>虽然操作系统能保证每条指令执行的时是具备原子性的，但是操作系统进行线程切换，可以发生在任意一条CPU指令执行完成之后（<strong>注意是CPU指令级别,也就是汇编指令</strong>），那这对高级编程语言来说多线程并发时就会造成原子性问题，如下图所示：</p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923120458588.png" alt="image-20230923120458588"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    CPU切换，导致原子性问题</span></span><br><span class="line"><span class="comment">    问题解决：高级语言操作所对应的多条CPU指令不能被打断，如加锁 或者 使用AtomicXxx包装的数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicityTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AtomicRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="comment">// int i = 0;</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">// synchronized</span></span><br><span class="line">            <span class="comment">// i += 1;</span></span><br><span class="line">            <span class="comment">// i.incrementAndGet();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;---&quot;</span> + i.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicRunnable</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能优化导致有序性问题"><a href="#性能优化导致有序性问题" class="headerlink" title="性能优化导致有序性问题"></a>性能优化导致有序性问题</h3><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923144847835.png" alt="image-20230923144847835"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923145126770.png" alt="image-20230923145126770"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923145432509.png" alt="image-20230923145432509"></p><p>整个过程分为三步：</p><ul><li>分配一块内存空间（堆区）</li><li>在内存空间上初始化对象</li><li>将内存空间的地址赋值给引用变量（栈区）</li></ul><p>要注意的是，在分配完内存还未初始化时，对象的实例变量是有一个初始默认值的，比如 int 就是0， 初始化完成之后实例变量才会赋真正的值。</p><p>双重锁校验创建单例对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 第一个判断是为了防止已经创建了instance实例后，不在需要拿锁，进而提高了效率</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 第二个判断是为了避免重复创建instance实例对象</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923150650510.png" alt="image-20230923150650510"></p><p><img src="/2023/09/15/expand-04-JUC%E6%B7%B1%E5%85%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230923151047001.png" alt="image-20230923151047001"></p><blockquote><p>补充知识点：线程切换是不会释放锁的。</p></blockquote><h3 id="JMM（Java-Memory-Model）"><a href="#JMM（Java-Memory-Model）" class="headerlink" title="JMM（Java Memory Model）"></a>JMM（Java Memory Model）</h3><h4 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h4><h4 id="JMM解决什么问题"><a href="#JMM解决什么问题" class="headerlink" title="JMM解决什么问题"></a>JMM解决什么问题</h4><h4 id="JMM内存交互"><a href="#JMM内存交互" class="headerlink" title="JMM内存交互"></a>JMM内存交互</h4><h4 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens-Before"></a>Happens-Before</h4><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><h4 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h4><h4 id="锁和资源的关系"><a href="#锁和资源的关系" class="headerlink" title="锁和资源的关系"></a>锁和资源的关系</h4><h4 id="Linux内核同步机制"><a href="#Linux内核同步机制" class="headerlink" title="Linux内核同步机制"></a>Linux内核同步机制</h4><h4 id="synchronized字节码层面"><a href="#synchronized字节码层面" class="headerlink" title="synchronized字节码层面"></a>synchronized字节码层面</h4><h4 id="synchronized锁的原理"><a href="#synchronized锁的原理" class="headerlink" title="synchronized锁的原理"></a>synchronized锁的原理</h4><h4 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h4><h4 id="锁消除，锁粗化"><a href="#锁消除，锁粗化" class="headerlink" title="锁消除，锁粗化"></a>锁消除，锁粗化</h4><h3 id="锁使用经验"><a href="#锁使用经验" class="headerlink" title="锁使用经验"></a>锁使用经验</h3><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h4 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h4></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expand-03-深入jdk源码</title>
      <link href="/2023/09/15/expand-03-%E6%B7%B1%E5%85%A5jdk%E6%BA%90%E7%A0%81/"/>
      <url>/2023/09/15/expand-03-%E6%B7%B1%E5%85%A5jdk%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：JVM、JDK新特性、JDK源码、高并发、MySql优化</p></blockquote><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="Object类结构图"><a href="#Object类结构图" class="headerlink" title="Object类结构图"></a>Object类结构图</h2><h2 id="类构造器"><a href="#类构造器" class="headerlink" title="类构造器"></a>类构造器</h2><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><h2 id="getClass方法"><a href="#getClass方法" class="headerlink" title="getClass方法"></a>getClass方法</h2><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><h2 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h2><h2 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h2><h2 id="registerNatives方法"><a href="#registerNatives方法" class="headerlink" title="registerNatives方法"></a>registerNatives方法</h2><h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><h2 id="ArrayLsit类结构图"><a href="#ArrayLsit类结构图" class="headerlink" title="ArrayLsit类结构图"></a>ArrayLsit类结构图</h2><h2 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h2><h2 id="类构造器-1"><a href="#类构造器-1" class="headerlink" title="类构造器"></a>类构造器</h2><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h2 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h2><h1 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h1><h2 id="LinkedList类定义"><a href="#LinkedList类定义" class="headerlink" title="LinkedList类定义"></a>LinkedList类定义</h2><h2 id="LinkeList类结构"><a href="#LinkeList类结构" class="headerlink" title="LinkeList类结构"></a>LinkeList类结构</h2><h2 id="字段属性-1"><a href="#字段属性-1" class="headerlink" title="字段属性"></a>字段属性</h2><h2 id="类构造器-2"><a href="#类构造器-2" class="headerlink" title="类构造器"></a>类构造器</h2><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><h2 id="修改元素-1"><a href="#修改元素-1" class="headerlink" title="修改元素"></a>修改元素</h2><h2 id="查找元素-1"><a href="#查找元素-1" class="headerlink" title="查找元素"></a>查找元素</h2><h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><h2 id="遍历集合-1"><a href="#遍历集合-1" class="headerlink" title="遍历集合"></a>遍历集合</h2><h1 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h2 id="JDK1-8后HashMap的数据结构"><a href="#JDK1-8后HashMap的数据结构" class="headerlink" title="JDK1.8后HashMap的数据结构"></a>JDK1.8后HashMap的数据结构</h2><h2 id="JDK1-8后HashMap的数据结构-1"><a href="#JDK1-8后HashMap的数据结构-1" class="headerlink" title="JDK1.8后HashMap的数据结构"></a>JDK1.8后HashMap的数据结构</h2><h2 id="类构造器-3"><a href="#类构造器-3" class="headerlink" title="类构造器"></a>类构造器</h2><h2 id="字段属性-2"><a href="#字段属性-2" class="headerlink" title="字段属性"></a>字段属性</h2><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h2 id="确定哈希桶数据索引位置"><a href="#确定哈希桶数据索引位置" class="headerlink" title="确定哈希桶数据索引位置"></a>确定哈希桶数据索引位置</h2><h2 id="添加元素-2"><a href="#添加元素-2" class="headerlink" title="添加元素"></a>添加元素</h2><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><h2 id="删除元素-2"><a href="#删除元素-2" class="headerlink" title="删除元素"></a>删除元素</h2><h2 id="查找元素-2"><a href="#查找元素-2" class="headerlink" title="查找元素"></a>查找元素</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h2 id="初始化initTable"><a href="#初始化initTable" class="headerlink" title="初始化initTable"></a>初始化initTable</h2><h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN轻松上手无忧版</title>
      <link href="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/"/>
      <url>/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>VSC版本控制，在项目管理种尤为重要！！</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Subversion"><a href="#Subversion" class="headerlink" title="Subversion"></a>Subversion</h2><blockquote><p>Subversion（SVN），是⼀个⾃由开源的版本控制软件</p></blockquote><p>SVN是基于客户端&#x2F;服务器端模式：</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916094539450.png" alt="image-20230916094539450"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>SVN，需要安装了服务器端和客户端之后并且完成配 置，才可以使⽤客户端和服务器端进⾏交互。</p></blockquote><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>Subversion(不推荐，步骤繁琐)</li></ul><blockquote><p>Subversion官网：<a href="https://subversion.apache.org/">Apache Subversion</a></p><p>Subversion下载：<a href="https://subversion.apache.org/download.cgi">Download Apache Subversion Sources</a></p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916095642179.png" alt="image-20230916095642179"></p><ul><li>VisualSVN</li></ul><blockquote><p>VisualSVN Server集成了Subversion和Apache，省去了很 多配置的步骤，其中在安装的时候SVN Server已经封装 为Windows中的系统服务，并且服务器中的各种配置， 也提供了图像界⾯的⽅式。</p><p>Visual SVN Server下载：<a href="https://www.visualsvn.com/server/download/">Download | VisualSVN Server</a></p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916101936511.png" alt="image-20230916101936511"></p><blockquote><p>但是本人使用的是<strong>Visual SVN 4.2.2</strong>的版本，主打的就是一个稳定！</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916102918770.png" alt="image-20230916102918770"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916102940536.png" alt="image-20230916102940536"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916103023755.png" alt="image-20230916103023755"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916103211416.png" alt="image-20230916103211416"></p><blockquote><p>上面一步可能会出现端口占用的情况：（如果没有请忽略）</p><ul><li>打开终端 natstat -ano|findstr “port” 查看443端口对应的PID(进程号)</li><li>tasklist|findstr “PID号” 使用tasklist查看 PID 对应的进程名</li></ul></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916104914274.png" alt="image-20230916104914274"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916105053387.png" alt="image-20230916105053387"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916103300541.png" alt="image-20230916103300541"></p><blockquote><p>注意最新版的可能还会出现一个时间验证45-day （不知道最新版是不是要收费哈！）</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916103559504.png" alt="image-20230916103559504"></p><blockquote><p>出现下面就表示安装成功啦~~</p><p>注意：下载完毕后桌面是不会出现VisualSVN 图标的</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916104004398.png" alt="image-20230916104004398"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916103713632.png" alt="image-20230916103713632"></p><blockquote><p> 此时，查看系统的服务，会多出⼏个VisualSVN相关的服 务（windows键+R，然后输⼊services.msc)</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916104204834.png" alt="image-20230916104204834"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li>TortoiseSVN</li></ul><blockquote><p>TortoiseSVN下载：<a href="https://tortoisesvn.net/downloads.html">Downloads · TortoiseSVN</a></p><p>安装：双击+next 即可</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916102529905.png" alt="image-20230916102529905"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916102606681.png" alt="image-20230916102606681"></p><blockquote><p>验证是否安装成功：</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916105847389.png" alt="image-20230916105847389"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916105936730.png" alt="image-20230916105936730"></p><ul><li>idea</li></ul><blockquote><p>IDEA也可以作为SVN的客户端</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916110333650.png" alt="image-20230916110333650"></p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916110410960.png" alt="image-20230916110410960"></p><h2 id="TortoiseSVN"><a href="#TortoiseSVN" class="headerlink" title="TortoiseSVN"></a>TortoiseSVN</h2><blockquote><p>使⽤⼩乌⻳，对新建的仓库进⾏访问</p><p>复制路径：<a href="https://127.0.0.1/svn/briup-cms/">https://127.0.0.1/svn/briup-cms/</a></p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916110717781.png" alt="image-20230916110717781"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916110858704.png" alt="image-20230916110858704"></p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><blockquote><p>先随便在idea中创建一个项目</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916112744081.png" alt="image-20230916112744081"></p><blockquote><p>初始化项目连接到idea服务器仓库中</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916112909628.png" alt="image-20230916112909628"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916113525322.png" alt="image-20230916113525322"></p><blockquote><p>上面的操作可能出现连接不上的情况 </p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916144559769.png" alt="image-20230916144559769"></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916145959228.png" alt="image-20230916145959228"></p><p>上图从左向右依次为：上⼀个改动、下⼀个改动、回滚到之 前的⾏、展示不同的对⽐、复制、单词⾼亮等。</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916150143871.png" alt="image-20230916150143871"></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916150736481.png" alt="image-20230916150736481"></p><blockquote><p>注意，这⾥双击后，还可以查看具体某个版本中此⽂件的内容</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916150944385.png" alt="image-20230916150944385"></p><blockquote><p>如果我们要查看当前处于哪个版本下，可以右键对应的 ⽂件，选择Subversion -&gt; Show Current Revision</p></blockquote><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916151218319.png" alt="image-20230916151218319"></p><h2 id="Subserion-Tab"><a href="#Subserion-Tab" class="headerlink" title="Subserion Tab"></a>Subserion Tab</h2><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916151459302.png" alt="image-20230916151459302"></p><blockquote><p>从左往右依次为，本地修改、仓库提交内容、更新内容、基本信息</p></blockquote><ul><li>第⼀个Tab为Local Changes，即为本地的修改</li></ul><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916151755017.png" alt="image-20230916151755017"></p><ul><li>第⼆个Tab 为Reposity，显示的是我们的⼀些提交记录</li></ul><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916151902026.png" alt="image-20230916151902026"></p><ul><li><p>第三个Tab 为Incoming，在有新的内容可以更新时会显 示出来，会列出来我们还未更新的⼀些提交记录，可以 快速预览下，⾮常⽅便。⽬前我们还没有记录出现。</p></li><li><p>第四个tab显示的是我们⼯作区的⼀些信息，这⾥有个我 们常⽤的功能，就是清理⼯作区，在我们⼯作区出现⼀ 些问题时，这个清理经常⽤到</p></li></ul><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916151936642.png" alt="image-20230916151936642"></p><h2 id="断开"><a href="#断开" class="headerlink" title="断开"></a>断开</h2><p>从SVN服务器中，检出项⽬之后，如果项⽬单独开发， 也可以直接把SVN的连接给断开，可以通过IDEA中的插 件进⾏快速断开，可以在插件市场中搜索</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916152119563.png" alt="image-20230916152119563"></p><p>安装成功之后重启应⽤，可以在SVN的菜单⾥找到，点 击即可断开。</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916152210284.png" alt="image-20230916152210284"></p><p>因为在断开的时候，选择的是直接把SVN的信息都删除了，那么如果还想连接的话，最好的<strong>重新检出⼀ 份</strong>(也就是重新找个位置创建一个项目)。</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230916152520324.png" alt="image-20230916152520324"></p><p>按照要求配置提交即可，和初次提交的步骤相同，但是 有的时候会发⽣问题，⽐如<strong>冲突</strong>(这是一个令人头大的问题)。</p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><blockquote><p>切换分支 breaches、trunk、tags</p><p>breaches：主要是各个分支</p><p>trunk：主干</p><p>tags：主要用来备份</p><p>具体操作：<a href="https://www.jb51.net/softjc/746129.html">IDEA用SVN创建分支和合并分支的方法步骤</a></p></blockquote><ul><li>从主干将代码推送到某个分支</li></ul><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230920110642635.png" alt="image-20230920110642635"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230920110533922.png" alt="image-20230920110533922"></p><ul><li>svn切换分支</li></ul><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919092617864.png" alt="image-20230919092617864"></p><blockquote><p>合并分支由两种方法</p></blockquote><p>方法一：</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919092721993.png" alt="image-20230919092721993"></p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919092806805.png" alt="image-20230919092806805"></p><p>方法二：</p><p><img src="/2023/09/15/SVN%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919093056001.png" alt="image-20230919093056001"></p><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-JDBC</title>
      <link href="/2023/09/12/05-JDBC/"/>
      <url>/2023/09/12/05-JDBC/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Mysql数据库的使用及数据库分析及设计实践</p></blockquote><h1 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h1><p>JUint特点：</p><ul><li>JUnit是一个开放源代码的测试工具</li><li>提供注解来识别测试方法（反射技术哈）</li><li>JUnit测试可以让你编写代码更快，并能提高质量</li><li>JUnit优雅简洁。没那么复杂，花费时间较少</li><li>JUnit在一个条中显示进度：如果运行良好则是绿色；如果运行失败，则变成 红色</li></ul><h2 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h2><blockquote><p>因为JUnit单元测试框架，不是JDK自带的，所以我们需要额外导入JUnit的 jar包</p></blockquote><p><img src="/2023/09/12/05-JDBC/image-20230912210900890.png" alt="image-20230912210900890"></p><p>idea导包</p><p><img src="/2023/09/12/05-JDBC/image-20230912211419820.png" alt="image-20230912211419820"></p><p><img src="/2023/09/12/05-JDBC/image-20230912211627551.png" alt="image-20230912211627551"></p><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JunitTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello junit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;junit test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>测试方法必须是公共的无参数无返回值的非静态方法</li><li>在测试方法上使用@Test注解标注该方法时一个测试方法</li></ul><h2 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h2><p><img src="/2023/09/12/05-JDBC/image-20230912212031095.png" alt="image-20230912212031095"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增代码</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在执行测试代码之前执行，一般用于初始化操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增代码</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在执行测试代码之后执行，一般用于释放资源</span></span><br><span class="line">    System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>JDBC（Java DataBase Connectivity）Java数据库连接（技术）</p><p>JDBC ，是一种技术规范，它制定了程序中连接操作不同数据库的标准API，使得 程序员可以使用同一套标准的代码，去访问不同数据库。</p></blockquote><p><img src="/2023/09/12/05-JDBC/image-20230912212436495.png" alt="image-20230912212436495"></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>理解JDBC</p><ul><li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口（JDBC）</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li><li>程序通过接口（JDBC）编写代码，但是真正实行的代码是驱动jar包中的实现类</li></ul><p><img src="/2023/09/12/05-JDBC/image-20230912214609889.png" alt="image-20230912214609889"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>使用JDBC操作数据库，一般存在6个步骤，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">// 2、获取数据库连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">// 3、获取数据库操作对象（Statement类型或者子类PreparedStatement）</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">// 4、执行sql语句（包括了Sql定义）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update ...&quot;</span>; <span class="comment">// DML、DQL、DDL、DCL、TCL</span></span><br><span class="line">stmt.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、处理结果集（只有DQL语句才有结果集）</span></span><br><span class="line"><span class="comment">// 下面只是个例子</span></span><br><span class="line">rs = stmt.executeQuery(sql);</span><br><span class="line">List&lt;TUser&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">TUser</span> <span class="variable">tUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TUser</span>(id, name, age);</span><br><span class="line">    list.add(tUser);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">rs.close;</span><br><span class="line">stmt.close;</span><br><span class="line">conn.close;</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>导入MySQL的驱动jar包</p><p><img src="/2023/09/12/05-JDBC/image-20230912220209958.png" alt="image-20230912220209958"></p><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC-API"></a>JDBC-API</h2><p>底层实现步骤：</p><ul><li>加载驱动类（加载接口具体的实现类的内存中）</li><li>将驱动类注册到驱动管理器中（可以自动完成）</li><li>通过驱动管理器获取数据库连接对象（当前Java程序和Mysql数据库建立连接）</li></ul><h3 id="DriveManager"><a href="#DriveManager" class="headerlink" title="DriveManager"></a>DriveManager</h3><ul><li>注册驱动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(java.sql.Driver driver)</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">但是为什么我们还是使用Class.forName(“com.mysql.cj.jdbc.Driver”); 即通过类加载器实现驱动注册呢？</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.Driver; 实现了 java.sql.Driver;接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过加载com.mysql.cj.jdbc.Driver的时候会调用static静态方法对Driver进行注册</span></span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：java.sql.Driver 是JDBC中提供的驱动接口，每种数据库驱动类都要实现这个接口</font></p><ul><li>获取数据库连接对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, String user, String password)</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/12/05-JDBC/image-20230914155909911.png" alt="image-20230914155909911"></p><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库连接四要素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="comment">//驱动</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/lwsj&quot;</span>;</span><br><span class="line"><span class="comment">//数据库地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>; <span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>; <span class="comment">//密码</span></span><br><span class="line"><span class="comment">//获取数据库连接并输出连接对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Class.forName(driverClass);</span><br><span class="line">    conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>url：数据库连接路径，其后面可以追加连接参数，来设置连接的属性， 常见参数如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/jd2311?serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/12/05-JDBC/image-20230914182234248.png" alt="image-20230914182234248"></p><p>获取执行对象：</p><ul><li>普通执行SQL对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>预编译SQL的执行SQL对象：防止SQL注入（听我细细道来）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(sql)</span>;</span><br></pre></td></tr></table></figure><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><ul><li>执行DDL（成功返回 0 ）、DML语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果执行的是DML语句，则返回修改的行数；如果执行DDL语句，则返回0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure><ul><li>执行DQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回结果集对象(包含给定查询产生的数据),或者null</span></span><br><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>注意：JDBC代码执行的sql语句不需要加分号 <strong>；</strong>，但是命令行里面执行sql语句，是要加分号的！</p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><ul><li>ResultSet</li></ul><p>结果集ResultSet对象作用： 封装了SQL查询语句的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> SQLException; <span class="comment">// 从-1开始，每执行一次光标就往后++</span></span><br><span class="line"><span class="keyword">public</span> xxx <span class="title function_">getXxx</span><span class="params">(?,?)</span>; <span class="comment">// 第一个问号是下标从1开始，第二个是数据</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rs = stmt.executeQuery(sql);</span><br><span class="line">List&lt;TUser&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">TUser</span> <span class="variable">tUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TUser</span>(id, name, age);</span><br><span class="line">    list.add(tUser);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>SQL注入攻击原理：<font color="#d12920">利用用户输入的数据作为SQL查询语句的一部分，从而改变原始查询的意图。</font></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 第一种<span class="keyword">sql</span>注入，只需要知道账号就可以直接进入了</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"># 第二种是连账号都不需要知道</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>; <span class="comment">-- and password=&#x27;随便密码&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> String username <span class="operator">=</span> &quot;admin&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> String password <span class="operator">=</span> &quot;asdf&#x27; or &#x27;1&#x27;=&#x27;1&quot;;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> String username <span class="operator">=</span> &quot;admin&#x27;; -- &quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> String password <span class="operator">=</span> &quot;随便密码&quot;;</span><br></pre></td></tr></table></figure><h1 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h1><p>PreparedStatement 是 Statement 接口的子接口。</p><p>与 Statement 不同， PreparedStatement 在执行之前会先将SQL语句发送给数据库进行预编译</p><p>PreparedStatement预编译优点：</p><ul><li>提高执行效率</li><li>能够防止SQL注入攻击</li><li>支持各种数据类型和批处理操作</li></ul><h2 id="同构异构"><a href="#同构异构" class="headerlink" title="同构异构"></a>同构异构</h2><ul><li>异构SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>同构SQL语句</li></ul><p>同构即结构相同。如果有多条sql语句，它们的格式相同，只是要操作的数据不 同，那么可以称它们为同构sql语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,password,age) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom1&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,password,age) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;tom2&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,password,age) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;tom3&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">23</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 问号表示占位符</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,password,age) <span class="keyword">values</span>(?,?,?,?);</span><br><span class="line"><span class="comment">-- 第一次4个问号对应值： 1 tom1 tom 21</span></span><br><span class="line"><span class="comment">-- 第二次4个问号对应值： 2 tom2 tom 22</span></span><br><span class="line"><span class="comment">-- 第三次4个问号对应值： 3 tom3 tom 23</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 使用pstmt对象给?赋不同数据值</span><br><span class="line">pstmt.setInt(id);</span><br><span class="line">pstmt.setString(name);</span><br><span class="line">pstmt.setString(password);</span><br><span class="line">pstmt.setInt(age);</span><br></pre></td></tr></table></figure><p>注意：执行大量同构SQL语句的情况下，使用PreparedStatement会大大提高效率。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p><img src="/2023/09/12/05-JDBC/image-20230914190750470.png" alt="image-20230914190750470"></p><p>JDBC使用Statement对象执行SQL语句流程（非预编译）：</p><ul><li>将SQL语句（含结构+数据）发送到MySQL服务端</li><li>MySQL服务端检查SQL查询 （检查语法是否正确）</li><li>MySQL服务端编译SQL语句（将SQL语句编译成可执行的函数）</li><li>执行SQL语句</li></ul><p><strong>注意：检查和编译SQL需要花费大量时间，甚至比执行SQL时间还要长</strong></p><p>PreparedStatement（预编译）：</p><ol><li>将SQL语句（含结构）发送到MySQL服务器端</li><li>MySQL服务端检查SQL语句</li><li>MySQL服务端编译SQL语句（编译成功，可重复使用）</li><li>PreparedStatement对象传递参数值到服务器</li><li>执行SQL语句</li><li>如果再次执行SQL语句，则到第4步，再次传递参数值到服务器，然后直接 执行即可。</li></ol><p><strong>结论：预编译省去了后续执行SQL的检查和编译过程，大大提高了性能</strong></p><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><ul><li>获取 PreparedStatement 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQL语句中的参数值，使用？占位符替代</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_user where name = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过Connection对象获取，并传入对应的sql语句</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><ul><li>设置参数值并执行SQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setString</span><span class="params">(<span class="type">int</span> parameterIndex, String x)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setInt</span><span class="params">(<span class="type">int</span> parameterIndex, <span class="type">int</span> x)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"><span class="comment">// 省略setXXXX...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行DDL语句和DML语句</span></span><br><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"><span class="comment">// 执行DQL语句</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：调用上述2个执行方法时不需要传递SQL语句，因为获取SQL语句执行对象 时已经对SQL语句进行预编译了。</font></p><h1 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h1><p>批处理（Batch）：一次操作中执行多条SQL语句，相比于一次执行一条SQL语 句，效率会提高很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Statement</span> <span class="keyword">extends</span> <span class="title class_">Wrapper</span>, AutoCloseable &#123;</span><br><span class="line">    <span class="comment">// 向Batch中加入SQL语句</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addBatch</span><span class="params">( String sql )</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">    <span class="comment">// 执行Batch中的SQL语句,返回数组，元素对应每条sql语句的执行结果</span></span><br><span class="line">    <span class="type">int</span>[] executeBatch() <span class="keyword">throws</span> SQLException;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把要执行的sql语句，添加到批处理中</span></span><br><span class="line">stmt.addBatch(sql1);</span><br><span class="line">stmt.addBatch(sql2);</span><br><span class="line">stmt.addBatch(sql3);</span><br><span class="line">stmt.addBatch(sql4);</span><br><span class="line">stmt.addBatch(sql5);</span><br><span class="line">stmt.addBatch(sql6);</span><br><span class="line"><span class="comment">//执行批处理中的sql语句，返回每一个语句的结果</span></span><br><span class="line"><span class="type">int</span>[] rows = stmt.executeBatch();</span><br></pre></td></tr></table></figure><h1 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h1><p>默认情况下，在JDBC中执行的DML语句，所产生的事务，都是自动提交的。也 就是说，每执行一次DML语句，所产生的事务，就会自动提交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载注册驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"><span class="comment">//2.获取连接对象</span></span><br><span class="line">conn = DriverManager.getConnection(url,user,password);</span><br><span class="line"><span class="comment">//设置事务自动提交为false，也就是需要手动提交！！！！！！！！！！！</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//3.获取Statement对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set name=? where id = ?&quot;</span>;</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//4.执行SQL语句</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//手动提交事务！！！！！！！！！！！！！！！</span></span><br><span class="line">conn.commit();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><ul><li>注意1，代码中当前连接中的事务设置为了手动提交</li><li>注意2，代码中操作完成提交事务，出现异常则回滚事务</li><li>注意3，finally语句中的 <strong>conn.close()</strong> 代码，也可以提交事务</li></ul><p>另外，如果有需要，也可以在程序中设置回滚点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DML</span></span><br><span class="line"><span class="type">Savepoint</span> <span class="variable">p1</span> <span class="operator">=</span> conn.setSavepoint(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="comment">//DML</span></span><br><span class="line"><span class="type">Savepoint</span> <span class="variable">p2</span> <span class="operator">=</span> conn.setSavepoint(<span class="string">&quot;p2&quot;</span>);</span><br><span class="line"><span class="comment">//DML</span></span><br><span class="line"><span class="type">Savepoint</span> <span class="variable">p3</span> <span class="operator">=</span> conn.setSavepoint(<span class="string">&quot;p3&quot;</span>);</span><br><span class="line"><span class="comment">//DML</span></span><br><span class="line"><span class="type">Savepoint</span> <span class="variable">p4</span> <span class="operator">=</span> conn.setSavepoint(<span class="string">&quot;p4&quot;</span>);</span><br><span class="line">conn.rollback(p2);</span><br></pre></td></tr></table></figure><p>注意：Mysql中要主动开启预编译功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在代码中编写url时需要加上以下参数</span></span><br><span class="line">useServerPrepStmts=<span class="literal">true</span></span><br><span class="line"><span class="comment">// 即</span></span><br><span class="line">url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/jd2311?serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br></pre></td></tr></table></figure><h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><blockquote><p>池(Pool)技术在一定程度上可以明显优化服务器应用程序的性能，提高程序执行效率和降低系统资源开销。</p></blockquote><p><img src="/2023/09/12/05-JDBC/image-20230914193128095.png" alt="image-20230914193128095"></p><p>数据库连接池：在系统初始化时创建一定数量的数据库连接对象，需要时直接从池中取出一个空闲对象，用完后并不直接释放掉对象，而是再放入到对象池中，以便下一次对象请求可以直接复用。消除了对象创建和销毁所带来的延迟，从而提高系统的性能。</p><p>优点：</p><ul><li>资源复用<ul><li>由于数据库连接得到重用，避免了频繁创建、释放连接引起的大量性能开销；</li></ul></li><li>更快的系统响应速度<ul><li>对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化 和释放过程的时间，从而缩减了系统整体响应时间。</li></ul></li><li>统一的连接管理，避免数据库连接泄漏<ul><li>根据预先的连接占用超时设定，强制收回被占用连接，从而避免了常规数据 库连接操作中可能出现的资源泄漏。</li></ul></li></ul><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>Druid（德鲁伊）</p><ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是Java语言最好的数据库连接池之一</li></ul><blockquote><p>官方：<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">Druid连接池介绍 · alibaba&#x2F;druid Wiki (github.com)</a></p></blockquote><p><img src="/2023/09/12/05-JDBC/image-20230914194243566.png" alt="image-20230914194243566"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>javax.sql.DataSource</strong> 是Java中定义的一个数据源标准的接口，通过它获取 到的数据库连接对象，如果调用 <strong>close()</strong> 方法，不会再关闭连接，而是归还连 接到连接池中。</p><ul><li>第一步：导jar包</li></ul><p><img src="/2023/09/12/05-JDBC/image-20230914194908348.png" alt="image-20230914194908348"></p><ul><li>第二部：配置文件 (druid.properties)</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MySQL的驱动，注意版本区别</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#本地数据库的url：只有jd2311库名 按照自己的数据库名称来书写，其他的是一致的</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/jd2311?serverTimezone=UTC&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="comment">#自己的数据库用户名</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">lwsj</span></span><br><span class="line"><span class="comment">#自己的数据库密码</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">lwsj</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：位置一定是在src文件夹下面</p></blockquote><p>这里我就要解释一下idea的路径问题了：</p><ul><li>使用File(url)这种的相对路径</li></ul><p><img src="/2023/09/12/05-JDBC/image-20230914195706811.png" alt="image-20230914195706811"></p><ul><li>使用 类名.class.getClassLoader().getResourceAsStream(url) 的相对路径</li></ul><p><img src="/2023/09/12/05-JDBC/image-20230914200333239.png" alt="image-20230914200333239"></p><p><img src="/2023/09/12/05-JDBC/image-20230914200618796.png" alt="image-20230914200618796"></p><p><img src="/2023/09/12/05-JDBC/image-20230914200720318.png" alt="image-20230914200720318"></p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>这个有点难度哈！看看就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.jdbc.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JDBCUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> luozongwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/9/12 16:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 维护一个数据源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">// 配置文件初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD;</span><br><span class="line">    <span class="comment">// 定义分类中用到的三个变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Statement stmt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResultSet rs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 记得final修饰的变量不能放在try里边，因为异常可能导致类加载的顺序有所不同</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CLASS_NAME = properties.getProperty(<span class="string">&quot;driverClassName&quot;</span>);</span><br><span class="line">        URL = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        USERNAME = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        PASSWORD = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可用通过properties创建数据源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 从配置文件中加载数据库连接信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> loadProperties();</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClassName</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;driverClassName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        Class.forName(driverClassName);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载properties文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties <span class="title function_">loadProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;resources/jdbc.properties&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// try (InputStream in = new FileInputStream(&quot;jdbc.properties&quot;)) &#123;</span></span><br><span class="line">            p.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行SQL语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn   数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql    sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数（如果有）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果是DQL操作，返回结果集；如果是DML，返回操作行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">execute</span><span class="params">(Connection conn, String sql, Object... params)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i + <span class="number">1</span>, params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sql.trim().toLowerCase().startsWith(<span class="string">&quot;select&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pstmt.executeQuery();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pstmt.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、不使用连接池获得连接对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getCommonConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(JDBCUtils.CLASS_NAME);</span><br><span class="line">        conn = DriverManager.getConnection(JDBCUtils.URL, JDBCUtils.USERNAME, JDBCUtils.PASSWORD);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、使用连接池获得连接对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getDruidConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        conn = dataSource.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、执行DDL语句的方法（stmt）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">executeDDL</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        stmt = getDruidConnection().createStatement();</span><br><span class="line">        <span class="keyword">return</span> stmt.executeUpdate(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、执行DML语句的方法（stmt）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">executeDML</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> executeDDL(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、执行DQL语句的方法（stmt）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title function_">executeDQL</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        stmt = getDruidConnection().createStatement();</span><br><span class="line">        rs = stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        close(conn, stmt, rs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement stmt)</span> &#123;</span><br><span class="line">        close(conn, stmt, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6、关闭方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前感觉最优雅的一段代码！！ 与大家一同欣赏</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 执行SQL语句</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> conn   数据库连接</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> sql    sql语句</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> params 参数（如果有）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 如果是DQL操作，返回结果集；如果是DML，返回操作行数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">execute</span><span class="params">(Connection conn, String sql, Object... params)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">        pstmt.setObject(i + <span class="number">1</span>, params[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sql.trim().toLowerCase().startsWith(<span class="string">&quot;select&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> pstmt.executeQuery();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pstmt.executeUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>大鹏一日同风起，扶摇直上九万里。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>navicat轻松上手无忧版</title>
      <link href="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/"/>
      <url>/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>navicat 融合怪!!!  sql编辑器的集大成者</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p><a href="https://www.cnblogs.com/marchxd/p/15580739.html">Navicat Premium 15 永久破解激活工具及安装教程(亲测可用)</a></p></blockquote><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><blockquote><p>开启一个mysql终端：F6</p></blockquote><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910153732304.png" alt="image-20230910153732304"></p><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910153926012.png" alt="image-20230910153926012"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><blockquote><p>语言和背景设置，博主已经习惯英文啦~~</p></blockquote><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910155941213.png" alt="image-20230910155941213"></p><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910160052420.png" alt="image-20230910160052420"></p><blockquote><p>设置完成后重启navicat即可生效</p></blockquote><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h2 id="查看E-R图"><a href="#查看E-R图" class="headerlink" title="查看E-R图"></a>查看E-R图</h2><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910155716829.png" alt="image-20230910155716829"></p><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910155803610.png" alt="image-20230910155803610"></p><h2 id="逆向生成表模型"><a href="#逆向生成表模型" class="headerlink" title="逆向生成表模型"></a>逆向生成表模型</h2><blockquote><p>其实就是E-R图哈</p></blockquote><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910160905114.png" alt="image-20230910160905114"></p><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910161523727.png" alt="image-20230910161523727"></p><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910161621343.png" alt="image-20230910161621343"></p><h2 id="Empty-table-和-Truncate-Table的区别"><a href="#Empty-table-和-Truncate-Table的区别" class="headerlink" title="Empty table 和 Truncate Table的区别"></a>Empty table 和 Truncate Table的区别</h2><p><img src="/2023/09/10/navicat%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230910171135627.png" alt="image-20230910171135627"></p><ul><li>相同点：都会清空数据表里的所有数据</li><li>不同点<ul><li>empty table是清空表里的数据</li><li>truncate table是删除表，然后再创建这张表</li></ul></li><li>意义：对于主索引自动增加的情况，empty清表后，新添加的行数据依然在上次的值上增加；而truncate则会重新从1开始</li></ul></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-事务索引视图</title>
      <link href="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/"/>
      <url>/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Mysql数据库的使用及数据库分析及设计实践</p></blockquote><h1 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>事务（Transaction）,是由一些列对数据库表中数据，进行访问与更新的操作，所组成的一个执行逻辑单元</p></blockquote><ul><li>只有DML语句才会产生事务，其他语句不会产生事务</li><li>DML语句执行的时候，如果当前有事务，那么就使用这个事务。如果当前没有事务，则产生一个新事物</li><li>commit、rollback、DDL语句都可以把当前事务给结束掉</li><li>commit和DDL语句结束事务的方式是把这个事务给提交了，然后DML操作永久生效</li><li>rollback结束事务的方式是把这个事务给回滚了，默认回滚到事务开始 的状态</li><li><strong>mysql默认是开启事务</strong>，即autocommit&#x3D;1,自动提交事务。即执行insert、update、delete操作，立即提交</li></ul><p>事务的生命周期</p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911084859175.png" alt="image-20230911084859175"></p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911085248432.png" alt="image-20230911085248432"></p><h2 id="事务特征"><a href="#事务特征" class="headerlink" title="事务特征"></a>事务特征</h2><p>数据库事务必须具备ACID特性，<strong>ACID是Atomic（原子性）、Consistency（一致 性）、Isolation（隔离性）和Durability（持久性）</strong></p><ul><li>原子性（Atomicity）</li></ul><p>​一个事务(transaction)中的所有操作，<strong>要么全部完成，要么全部不完成，不会结束在中间某个环节。</strong></p><p>​事务在执行过程中发生错误，会被回滚（Rollback） 到事务开始前的状态，就像这个事务从来没有执行过一样。 </p><p>​如：张三转账给李四钱，转账过程中停电了，应该转账不生效（回退），事 物的原子性</p><ul><li>一致性（Consistency）</li></ul><p>​事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致 性状态。</p><p>​如果事务成功地完成，那么系统中所有变化将正确地应用，系统处 于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回 滚，系统返回到原始状态。</p><p>​如：张三转账给李四钱，转帐之前和转账之后，账务总额应该保持不变。</p><ul><li>隔离性（Isolation）</li></ul><p>​指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有 各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做 的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它 之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态 的数据。</p><p>如：张三转账过程，李四看不到张三账户的变化</p><ul><li>持久性（Durability）</li></ul><p>指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即 使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束 时的状态。</p><p>如：如果转到错误的人的账户上，钱是退不回来的，事务一旦完成，事务中所涉及的数据，不能再被此次事务所更改。</p><h2 id="提交回滚"><a href="#提交回滚" class="headerlink" title="提交回滚"></a>提交回滚</h2><h3 id="查看事务"><a href="#查看事务" class="headerlink" title="查看事务"></a>查看事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br></pre></td></tr></table></figure><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><p>事务开启一次即可！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT<span class="operator">=</span><span class="number">0</span>; # 用来禁止使用当前会话的自动提交。</span><br><span class="line"># 开启事务，下面二选一即可 </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><p><strong>开启事务以后，执行DML语句遇到commit关键字或DDL语句，会提交事务。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务已经开启</span></span><br><span class="line"><span class="keyword">insert</span> ... 第一次执行DML语句，新建事务(用A标识)</span><br><span class="line"><span class="keyword">update</span> ... 这个操作是事务A中的操作</span><br><span class="line"><span class="keyword">insert</span> .. 这个操作是事务A中的操作</span><br><span class="line"><span class="keyword">commit</span>; 让事务A里面的三个操作生效、事务A结束</span><br><span class="line"><span class="keyword">delete</span> ... 此时没有事务，执行新的DML语句会产生新事务(用B标识)</span><br><span class="line"><span class="keyword">insert</span> .. 这个操作是事务B中的操作</span><br><span class="line"><span class="keyword">insert</span> .. 这个操作是事务B中的操作</span><br><span class="line">rename .. 遇到DDL语句，事务自动提交</span><br><span class="line"><span class="keyword">insert</span> .. 此时没有事务，执行新DML会创建新事务(用C标识)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：有一些语句会使得事务结束</p><ul><li>DDL<ul><li>alter database、alter event、alter procedure、alter table、alter view、create table、drop table、rename table、truncate table等；</li></ul></li><li>修改MYSQL架构的语句<ul><li>create user、drop user、grant、rename、user、revoke、set password；</li></ul></li><li>管理语句<ul><li>analyze table、cache index、check table、load index、into cache、optimize table、repair table等</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_customer(id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_customer(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_customer(id,name) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;rose&#x27;</span>);</span><br><span class="line"><span class="keyword">update</span> t_customer <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;lucy&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_customer <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">update</span> t_customer <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;lily&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_customer;</span><br><span class="line"><span class="comment">-- DDL语句，会自动提交事务</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3 <span class="keyword">add</span> phone <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_customer;</span><br></pre></td></tr></table></figure><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><p>使用关键字 savepoint ，用来设置回滚点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># DML语句<span class="number">1</span></span><br><span class="line"><span class="keyword">savepoint</span> A </span><br><span class="line">#  DML语句<span class="number">2</span></span><br><span class="line"><span class="keyword">savepoint</span> B</span><br><span class="line"># DML语句<span class="number">3</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> A<span class="operator">/</span>B</span><br><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">savepoint</span> A;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line"><span class="keyword">savepoint</span> B;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="comment">-- 回滚到B</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> B;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="comment">-- 回滚事务（生效）</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="comment">-- 测试完成后可以删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_user;</span><br></pre></td></tr></table></figure><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>事务隔离级别指的是隔离性的强弱</p><ul><li>不可重复读：在同一事务中，两次读取同一数据，得到内容不同</li></ul><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911163741636.png" alt="image-20230911163741636"></p><ul><li>幻影读：同一事务中，用同样的操作读取两次，得到的记录数不相同。</li></ul><p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据</p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911164452672.png" alt="image-20230911164452672"></p><ul><li>脏读：会话1读到会话2未提交的数据。</li></ul><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911164832598.png" alt="image-20230911164832598"></p><p>4类隔离级别</p><ul><li>READ UNCOMMITTED 幻影读、不可重复读和脏读都允许</li><li>READ COMMITTED 允许幻影读、不可重复读，不允许脏读</li><li>REPEATABLE READ （默认）允许幻影读，不允许不可重复读和脏读</li><li>SERIALIZABLE 幻影读、不可重复读和脏读都不允许</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%isolation%&#x27;</span>; </span><br><span class="line"><span class="keyword">set</span> session transaction isolation level READ COMMITTED;</span><br><span class="line"><span class="comment">-- 恢复成默认隔离级别</span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level REPEATABLE READ;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：会话级别只针对当前生效，永久生效mysql配置文件修改</font></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在 MySQL 中，索引（Index）是一种数据结构，用于提高数据库表的查询性能。 </p><p>索引可以加速数据的检索，减少查询所需的时间和资源消耗。 索引用于快速定位和访问表中的数据。它类似于书籍的目录，可以根据关键字快 速找到对应的数据行，而无需扫描整个表。</p><p>索引优缺点：</p><ul><li>优点：加快数据检索速度，提高查找效率</li><li>缺点：占用数据库物理存储空间，当对标中数据更新时，索引需要动态维护，降低数据写入效率</li></ul><p>创建原则：</p><ul><li>对where和order by涉及的列上尽量建立索引</li><li>更新频繁的列不应设置索引</li><li>数据量小的表不要使用索引</li><li>重复数据多的字段不应设为索引（如性别，只有男和女），重复数据超15%就不该建索引</li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>在 MySQL 中，存储引擎（Storage Engine）是负责处理数据的存储和检索的模 块。</p><p>MySQL 支持多种存储引擎，不同的存储引擎可以在不同的应用场景中提供 不同的优势和特性。</p><p>常见存储引擎：</p><ul><li>InnoDB：InnoDB 是 MySQL 5.5 版本之后的默认存储引擎。 它提供了事务支持、行级锁定、外键约束和崩溃恢复等功能。 InnoDB 引擎适用于需要事务支持和高并发读写操作的应用场景。</li><li>MyISAM：MyISAM 是 MySQL 5.5 版本之前的默认存储引擎。 它以其简单和高性能而闻名，适用于大量的读操作和只读数据。 MyISAM 引擎不支持事务和行级锁定。</li><li>Memory：或称为 Heap存储引擎，将数据存储在内存中，提供了非常快速的 读写性能。 但是，由于数据存储在内存中，重启服务器或断电会导致数据丢失。Memory 引擎适用于临时数据存储和高速缓存等场景。</li></ul><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p><strong>MySQL 8 默认存储引擎为 InnoDB ，其采用B+Tree作为索引常用底层数据结构。</strong></p><ol><li>Hash表</li></ol><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911181205284.png" alt="image-20230911181205284"></p><p>弊端：通过hash值定位数据非常快，但只有精确匹配索引所有列的查询才有效！</p><p><font color="#d12920">因为散列表中的值是无序的，无法进行大小的比较</font></p><p>在MySQL中，常见存储引擎并不支持 Hash 索引，只有Memory引擎显式支持哈希 索引。这也是Memory引擎表的默认索引类型，Memory引擎同时也支持B-Tree索 引。</p><ol start="2"><li>二叉树</li></ol><p><strong>使用二叉树可以提高查询数据的速度，但是有可能产生不平衡类似于链表的结构</strong></p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911182219764.png" alt="image-20230911182219764"></p><ol start="3"><li>平衡二叉树</li></ol><p>平衡二叉树是采用二分法思维把数据按规则组装成一个树形结构的数据，用这个 树形结构的数据减少无关数据的检索，大大的提升了数据检索的速度，其特点：</p><ul><li>它的左子树和右子树都是平衡二叉树</li><li>左子树比中间小，右子树比中间值大</li><li>左子树和右子树的深度之差的绝对值不超过1</li></ul><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911182738849.png" alt="image-20230911182738849"></p><ol start="4"><li>BTree</li></ol><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911183102890.png" alt="image-20230911183102890"></p><ul><li>MyISAM引擎</li></ul><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址<br><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911183249786.png" alt="image-20230911183249786"></p><ul><li>InnoDB引擎</li></ul><p>InnoDB引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据，相比 MyISAM效率要高一些，但是占硬盘内存更多。</p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911183430121.png" alt="image-20230911183430121"></p><h2 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h2><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>三种创建索引的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tb_name [(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 [约束条件] [默认值] [COMMENT <span class="string">&#x27;注解&#x27;</span>],</span><br><span class="line">    字段<span class="number">2</span> 数据类型 [约束条件] [默认值] [COMMENT <span class="string">&#x27;注解&#x27;</span>],</span><br><span class="line">    字段<span class="number">3</span> 数据类型 [约束条件] [默认值] [COMMENT <span class="string">&#x27;注解&#x27;</span>],</span><br><span class="line">    ......</span><br><span class="line">    [表约束条件]</span><br><span class="line">    index index_name(col_name...)</span><br><span class="line">    ...</span><br><span class="line">)][engine<span class="operator">=</span>innodb] [<span class="keyword">default</span> charset<span class="operator">=</span>utf8];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> tb_name(col_name);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> index index_name(col_name);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看jd2311数据库中的所有索引</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mysql.innodb_index_stats</span><br><span class="line"><span class="keyword">where</span> database_name<span class="operator">=</span><span class="string">&#x27;jd2311&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看briup数据库中教师表中所有索引</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mysql.innodb_index_stats</span><br><span class="line"><span class="keyword">where</span> database_name<span class="operator">=</span><span class="string">&#x27;briup&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;tea&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看briup数据库中教师表中所有索引</span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tea;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除tea表中的索引</span><br><span class="line"><span class="keyword">drop</span> index index_name <span class="keyword">on</span> tea;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tea <span class="keyword">drop</span> index index_name;</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，<strong>则列值的组合必须唯一</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tea3(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">unique</span> index_name(name)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_name <span class="keyword">on</span> tea3(name);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tea3 <span class="keyword">add</span> <span class="keyword">unique</span> index_name(name);</span><br></pre></td></tr></table></figure><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>创建表时，MySQL会自动在主键列上建立一个索引，这就是主键索引。主键是具有唯一性并且不允许为NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tea4(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tea4(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tea4 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br></pre></td></tr></table></figure><h2 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tea5(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    index index_name(id,name)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> tea5(id,name);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tea5 <span class="keyword">add</span> index index_name(id,name);</span><br></pre></td></tr></table></figure><p>注意事项：复合索引的<strong>使用复合最左原则</strong> table_name(id, name)</p><ul><li>where id&#x3D;1可以使用索引，条件里面必须包含索引前面的字段才能够继续进行匹配</li><li>where name&#x3D;’lisi’ 不可以使用索引</li><li>where name&#x3D;’lisi’ and id&#x3D;12可以使用索引，mysql本身就有一层sql优化，他会根据sql来识别出来该用哪个索引</li><li>where id&#x3D;12 and name&#x3D;’lisi’ 可以使用，顺序一致</li></ul><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911185508476.png" alt="image-20230911185508476"></p><p>为什么要全文索引？ </p><p>like + % 在文本比较少时是合适的，但是对于大量的文本数据检索，是不可 想象的。 </p><p>全文索引在大量的数据面前，能比 like + % 快 N 倍，速度不是一个数量级， 但是全文索引可能存在精度问题。</p><p><strong>索引变量（了解即可）</strong></p><p>MySQL 中的全文索引，有两个变量，<strong>最小搜索长度和最大搜索长度</strong>，对于长度 小于最小搜索长度和大于最大搜索长度的词语，都不会被索引。通俗点就是说， 想对一个词语使用全文索引搜索，那么这个词语的长度必须在以上两个变量的区间内。</p><p>全文检索语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> (col_name1,col_name2,...) against(expr [search_modifier])</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%ft%&#x27;</span>; # 查看索引变量</span><br></pre></td></tr></table></figure><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911185956377.png" alt="image-20230911185956377"></p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911190103557.png" alt="image-20230911190103557"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Poetry(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    content text,</span><br><span class="line">    fulltext(content)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> fulltext index index_content <span class="keyword">on</span> Poetry(content);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Poetry <span class="keyword">add</span> fulltext index_content(content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Poetry <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;rain&#x27;</span>,<span class="string">&#x27;Rain is falling all around&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Poetry <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;rain&#x27;</span>,<span class="string">&#x27;It falls on field and tree&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Poetry <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;rain&#x27;</span>,<span class="string">&#x27;It rains on the umbrella here&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Poetry <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;rain&#x27;</span>,<span class="string">&#x27;And on the ships at sea&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 基于全文检索查询含有<span class="keyword">And</span>内容</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> Poetry</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(content) against(<span class="string">&#x27;And&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h2><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911190533564.png" alt="image-20230911190533564"></p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911191013096.png" alt="image-20230911191013096"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建超市，并记录经纬度</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> shop(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    point geometry <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    spatial key geom_index(point)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911191542418.png" alt="image-20230911191542418"></p><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911191707937.png" alt="image-20230911191707937"></p><p>视图优点：</p><ul><li>操作简单</li><li>减少数据冗余</li><li>数据安全</li><li>适应多变的需求</li><li>能够分解复杂的查询逻辑</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">VIEW</span> view_name [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">select</span>语句  # 表示一个完整的查询语句，将查询记录映射到视图中</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span><span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]  # 可选项，表示更新视图时要保证在该视图的权限范围之内</span><br></pre></td></tr></table></figure><h2 id="单表视图"><a href="#单表视图" class="headerlink" title="单表视图"></a>单表视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建或更新视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> v_emp(id,username)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,name</span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">desc</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 查看视图结构</span></span><br><span class="line"><span class="keyword">desc</span> v_emp;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,name,salary,salary<span class="operator">*</span><span class="number">30</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp_new</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> name,salary<span class="operator">*</span><span class="number">30</span> <span class="keyword">as</span> yearSal</span><br><span class="line"><span class="keyword">from</span> v_emp1;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp_new;</span><br></pre></td></tr></table></figure><h2 id="多表视图"><a href="#多表视图" class="headerlink" title="多表视图"></a>多表视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> v_emp_dept</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> concat(e.name,<span class="string">&#x27;(&#x27;</span>,d.name,<span class="string">&#x27;)&#x27;</span>) <span class="keyword">as</span></span><br><span class="line">username,e.salary,e.dept_id,d.name dept_name</span><br><span class="line"><span class="keyword">from</span> emp e, dept d</span><br><span class="line"><span class="keyword">where</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp_dept;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables; # 查看当前数据库下的视图语法</span><br><span class="line">rename <span class="keyword">table</span> old_view_name <span class="keyword">to</span> new_view_name; # 重命名视图</span><br><span class="line"></span><br><span class="line"># 修改视图 </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> view_name</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span>查询语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> if <span class="keyword">exists</span> view_name; # 删除视图</span><br></pre></td></tr></table></figure><p>注意：修改视图可以使用创建视图替换</p><h2 id="视图更新"><a href="#视图更新" class="headerlink" title="视图更新"></a>视图更新</h2><p><font color="#d12920">注意事项：对基表（数据表）进行更新改会影响视图</font></p><p>如果视图包含下述结构中的任何一种，那么它就是不可更新的：</p><ul><li>聚合函数（SUM(), MIN(), MAX(), COUNT()等）</li><li>select查询列表有数学表达式</li><li>DISTINCT</li><li>UNION 或 UNION ALL</li><li>位于选择列表中的子查询</li><li>GROUP BY</li><li>HAVING</li><li>JOIN</li><li>常量视图</li></ul><h1 id="函数和存储过程"><a href="#函数和存储过程" class="headerlink" title="函数和存储过程"></a>函数和存储过程</h1><p>存储过程和函数是事先经过编译并存储在数据库中的一段sql语句集合，调用存 储过程和函数可以简化应用开发工作，提高数据处理的效率。</p><h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql8 增加了一个安全选项，需要执行一下代码才能创建函数</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter 自定义符号    # 门主习惯使用一个 $ 作为结束标志</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(形参列表) <span class="keyword">returns</span> 返回类型 <span class="comment">-- 注意是</span></span><br><span class="line">retruns</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">函数体 <span class="comment">-- 若干sql语句，但是不要直接写查询</span></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line"><span class="keyword">end</span> 自定义符号</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment">-- 格式说明：</span></span><br><span class="line"><span class="comment">-- delimiter 自定义符号 是为了在函数内写语句方便，制定除了;之外的符号作为</span></span><br><span class="line"><span class="comment">-- 函数书写结束标志，一般用$$或者//   </span></span><br><span class="line"><span class="comment">-- 形参列表：形参名 类型 类型为mysql支持类型</span></span><br><span class="line"><span class="comment">-- 返回类型: 函数返回的数据类型，mysql支持类型即可</span></span><br><span class="line"><span class="comment">-- 函数体：若干sql语句组成</span></span><br><span class="line"><span class="comment">-- return: 返回指定类型返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启函数创建</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="literal">TRUE</span>;</span><br><span class="line"><span class="comment">-- 创建无参数的函数</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> func01() <span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> s_emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> limit</span><br><span class="line"><span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">select</span> func01();</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary<span class="operator">=</span>func01();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建包含参数的函数</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> func02(eid <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">varchar</span>(<span class="number">25</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">select</span> last_name <span class="keyword">from</span> s_emp <span class="keyword">where</span> id<span class="operator">=</span>eid);</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">select</span> func02(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>设置变量：</p><ul><li>定义用户变量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义格式</span></span><br><span class="line"><span class="keyword">set</span> @[变量名] <span class="operator">=</span> 值;</span><br><span class="line"><span class="comment">-- 使用格式</span></span><br><span class="line">@[变量名]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@eid</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> func02(<span class="variable">@eid</span>);</span><br></pre></td></tr></table></figure><ul><li>定义局部变量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> variable_name datatype [<span class="keyword">DEFAULT</span> initial_value];</span><br><span class="line"><span class="comment">-- variable_name 是变量的名称</span></span><br><span class="line"><span class="comment">-- datatype 是变量的数据类型</span></span><br><span class="line"><span class="comment">-- initial_value 是可选的初始值</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_total_price(num <span class="type">INT</span>, price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> total <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">SET</span> total <span class="operator">=</span> num <span class="operator">*</span> price;</span><br><span class="line">    <span class="keyword">RETURN</span> total;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">select</span> get_total_price(<span class="number">5</span>,<span class="number">2.5</span>);</span><br><span class="line"><span class="comment">-- 删除函数</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> get_total_price;</span><br></pre></td></tr></table></figure><h2 id="存储过程创建"><a href="#存储过程创建" class="headerlink" title="存储过程创建"></a>存储过程创建</h2><p>创建存储过程语法与创建函数基本相同，<strong>但是没有返回值。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter 自定义符号</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(形参列表)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">存储过程 <span class="comment">-- sql语句构成存储过程语句集</span></span><br><span class="line"><span class="keyword">end</span> 自定义符号</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment">-- 说明：</span></span><br><span class="line"><span class="comment">-- delimiter 自定义符号 是为了在存储过程内写语句方便，制定除了;之外的符号</span></span><br><span class="line"><span class="comment">-- 作为函数书写结束标志</span></span><br><span class="line"><span class="comment">-- 形参列表：[IN | OUT | INOUT] 形参名 类型</span></span><br><span class="line"><span class="comment">-- in 输入 (只有里面可以用)</span></span><br><span class="line"><span class="comment">-- out 输出 (只有返回出给外面用)</span></span><br><span class="line"><span class="comment">-- inout 可以输入也可以输出 (里外都能用)</span></span><br><span class="line"><span class="comment">-- 存储过程：若干sql语句组成，如果只有一条语句也可以不写delimiter和</span></span><br><span class="line"><span class="comment">-- begin,end</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例如： 存储过程创建和调用</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc01()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> id,last_name <span class="keyword">from</span> s_emp;</span><br><span class="line"><span class="keyword">select</span> id,salary <span class="keyword">from</span> s_emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> proc01();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> proc_param;</span><br><span class="line"><span class="comment">-- 例如：分别将参数类型改为IN OUT INOUT 看一下结果区别</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_param(<span class="keyword">OUT</span> num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> num;</span><br><span class="line"><span class="keyword">set</span> num<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> num;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@num</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">call</span> proc_param(<span class="variable">@num</span>);</span><br><span class="line"><span class="comment">-- 输出num变量的值</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><h2 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h2><p>调用存储过程 语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> 存储过程名字([存储过程参数[,……]])</span><br></pre></td></tr></table></figure><p>调用存储函数 语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 存储函数名字([函数参数[,……]])</span><br></pre></td></tr></table></figure><p>使用show create语句查看存储过程和函数的定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> &#123;<span class="keyword">procedure</span><span class="operator">|</span><span class="keyword">function</span>&#125; 存储过程或存储函数的名称</span><br></pre></td></tr></table></figure><p>查看所有函数或者存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式1：查看数据库中函数和存储过程</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span>;</span><br><span class="line"><span class="comment">-- 具体案例</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;briup&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;briup&#x27;</span>;</span><br><span class="line"><span class="comment">-- 格式2：查看指定数据库中 函数和存储过程的名称与类型</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUTINE_NAME, ROUTINE_TYPE</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.ROUTINES</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span>;</span><br><span class="line"><span class="comment">-- 具体案例</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUTINE_NAME, ROUTINE_TYPE</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.ROUTINES</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;briup&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除存储过程或存储函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; [IF <span class="keyword">EXISTS</span>] name</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> if <span class="keyword">exists</span> func01;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> proc01;</span><br></pre></td></tr></table></figure><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><p><img src="/2023/09/07/04-%E4%BA%8B%E5%8A%A1%E7%B4%A2%E5%BC%95%E8%A7%86%E5%9B%BE/image-20230911195258952.png" alt="image-20230911195258952"></p><h1 id="数据库优化-后面遇到再写啦！"><a href="#数据库优化-后面遇到再写啦！" class="headerlink" title="数据库优化 (后面遇到再写啦！~)"></a>数据库优化 (后面遇到再写啦！~)</h1><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h2 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h2><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>志不求易成者，事不避难者进。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-DDL及DML操作</title>
      <link href="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Mysql数据库的使用及数据库分析及设计实践</p></blockquote><h1 id="数据操作语言DML"><a href="#数据操作语言DML" class="headerlink" title="数据操作语言DML"></a>数据操作语言DML</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li>格式1：按默认顺序往表中插入数据（含所有字段）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_name <span class="keyword">values</span>(value1,value2,....);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><ul><li><p>注意事项：</p><ul><li><p><strong>插入数据如果是字符串、日期、json对象，需要使用单引号引起来</strong></p></li><li><p><strong>values也可以写成value，values是标准写法</strong></p></li></ul></li><li><p>格式2：往表插入指定字段数据值</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_name(col_name [, col_name2, ..., col_namen]) <span class="keyword">values</span>(value1 [,value2, ..., valuen]);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>格式3：同时插入多条记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_name <span class="keyword">values</span>(value1 [,value2, ..., valuen]),</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">...</span><br><span class="line">(value1 [,value2, ..., valuen]);</span><br><span class="line"># 或</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_name(col_name [, col_name2, ..., col_namen])</span><br><span class="line"><span class="keyword">values</span>(value1 [,value2, ..., valuen]),</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">...</span><br><span class="line">(value1 [,value2, ..., valuen]);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;xiaowang&#x27;</span>,<span class="number">1000</span>),(<span class="number">5</span>,<span class="string">&#x27;xiaoli&#x27;</span>,<span class="number">1200</span>),(<span class="number">4</span>,<span class="string">&#x27;xiaosong&#x27;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><ul><li>格式4：特殊形式，将查询的结果插入到表中</li></ul><p>INSERT子句中插入列应和子查询中的查询列表相对应。<strong>如果查询的列名和插入的列名不一致，建议起别名保持一致。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_name(tar_col_name1 [, tar_col_name2, ...,tar_col_namen])</span><br><span class="line"><span class="keyword">SELECT</span> (src_col_name1 [, src_col_name2, ..., src_col_namen])</span><br><span class="line"><span class="keyword">FROM</span> src_tb_name</span><br><span class="line">[<span class="keyword">where</span> <span class="keyword">condition</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp</span><br><span class="line"><span class="keyword">select</span> id,last_name name,salary</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">8</span> <span class="keyword">and</span> id <span class="operator">&gt;=</span><span class="number">6</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项：如果要往表中插入完整列数据，insert后的列名可以不写</strong></p><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_name</span><br><span class="line"><span class="keyword">set</span> col_name<span class="operator">=</span>value1, col_name<span class="operator">=</span>value2, ... , col_namen<span class="operator">=</span>valuen</span><br><span class="line">[<span class="keyword">where</span> <span class="keyword">condition</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> salary<span class="operator">=</span><span class="number">2000</span> <span class="keyword">where</span> id<span class="operator">&lt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：不加where条件表示对所有数据更新，加where条件会选出符合条件 的行进行更新。</font></p><h2 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_name [<span class="keyword">where</span> <span class="keyword">condition</span>]</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;xiao%&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp; # 清空表</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：不加where条件表示删除所有数据，加where表示选出符合条件的数据删除。</font></p><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><h2 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h2><h2 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h2><h2 id="数据库设计-1"><a href="#数据库设计-1" class="headerlink" title="数据库设计"></a>数据库设计</h2><h2 id="主键与外键"><a href="#主键与外键" class="headerlink" title="主键与外键"></a>主键与外键</h2><h2 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h2><h2 id="关系转换"><a href="#关系转换" class="headerlink" title="关系转换"></a>关系转换</h2><h1 id="数据库定义语言"><a href="#数据库定义语言" class="headerlink" title="数据库定义语言"></a>数据库定义语言</h1><p>DDL（Data Definition Language）是 SQL 中用于定义和管理数据库对象的语句集合。DDL语句主要包括 <strong>CREATE、ALTER、RENAME、DROP和TRUNCATE 。</strong></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">字段名 数据类型 [列约束类型],</span><br><span class="line">[表级约束],</span><br><span class="line">[表级约束]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数值类型</li></ul><p><img src="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/image-20230910180734944.png" alt="image-20230910180734944"></p><p><img src="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/image-20230910181006031.png" alt="image-20230910181006031"></p><ul><li>文本类型</li></ul><p><img src="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/image-20230910181142152.png" alt="image-20230910181142152"></p><p>注意事项：</p><ul><li>普通字符串：CHAR，VARCHAR</li><li>存储文本：TEXT</li><li>存储二进制数据：BLOB</li></ul><ol><li>char：定长，即指定存储字节数后，无论实际存储了多少字节数据，最终都占指定的字节大小。默认只能存1字节数据，存取效率高</li><li>varchar：不定长，效率偏低，但是节省空间，实际占用空间根据实际存储数据大小而定。必须要指定存储大小varchar(50)</li></ol><ul><li>日期类型</li></ul><p><img src="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/image-20230910181719129.png" alt="image-20230910181719129"></p><ul><li>日期时间函数</li></ul><p>now() 返回服务器当前日期时间，格式对应datetime类型</p><ul><li>时间操作</li></ul><p>时间类型数据可以进行比较和排序等操作，在写时间字符串时尽量按照标准格式书写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 马拉松比赛登记表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> marathon (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">birthday <span class="type">date</span>,</span><br><span class="line">register_time datetime,</span><br><span class="line">performance <span class="type">time</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> marathon <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;1995-2-18&#x27;</span>,<span class="string">&#x27;2021-12-18 19:20:20&#x27;</span>,<span class="string">&#x27;2:48:58&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;2000-6-8&#x27;</span>,<span class="string">&#x27;2021/12/22 9:30:25&#x27;</span>,<span class="string">&#x27;2:29:8&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1998-2-28&#x27;</span>,<span class="string">&#x27;2022-1-1 16:21:21&#x27;</span>,<span class="string">&#x27;2:33:55&#x27;</span>);</span><br><span class="line"># 可以根据时间来进行比较</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> marathon <span class="keyword">where</span> birthday<span class="operator">&gt;=</span><span class="string">&#x27;2000-01-01&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> marathon <span class="keyword">where</span> birthday<span class="operator">&gt;=</span><span class="string">&#x27;2000-07-01&#x27;</span> <span class="keyword">and</span></span><br><span class="line">performance<span class="operator">&lt;=</span><span class="string">&#x27;2:30:00&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>额外补充（了解即可）： 存储选项型数据 ENUM，SET</li></ul><p>ENUM 是一种特殊的数据类型，用于存储固定的选项列表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">TABLE</span> if <span class="keyword">EXISTS</span> my_table;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">option_column ENUM(<span class="string">&#x27;Option 1&#x27;</span>, <span class="string">&#x27;Option 2&#x27;</span>, <span class="string">&#x27;Option 3&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- option_column只能添加上述3个值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table(id, option_column) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Option 1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table(id, option_column) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Option 4&#x27;</span>);  # Data truncated <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;option_column&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table;</span><br></pre></td></tr></table></figure><p>SET 数据类型可以用来存储一组预定义的选项。SET 类型允许你在一个列中存储多个选项值，每个选项值可以被设置为 1（选中）或 0（未选中）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> my_table;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    options <span class="keyword">SET</span>(<span class="string">&#x27;Option 1&#x27;</span>, <span class="string">&#x27;Option 2&#x27;</span>, <span class="string">&#x27;Option 3&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- options可以同时添加多个值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table(id, options) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Option 1,Option 2&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table;</span><br></pre></td></tr></table></figure><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><p>1）约束类型</p><ul><li>NOT NULL<ul><li>设置的列不能为空，换言之必须有值，所有类型的默认值都为null；</li><li>NOT NULL 只能用于列级约束不能用于表级约束</li><li>所有类型和null进行运算都为null</li></ul></li><li>UNIQUE：用来限制某个字段&#x2F;某列的值不能重复<ul><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一</li><li>创建唯一约束，不指定约束名字，mysql基于列名作为约束名</li><li>唯一性约束允许列值为空</li><li>唯一性约束默认自带索引</li></ul></li><li>PRIMARY KEY：用来唯一标识表中的一行记录<ul><li>主键约束列不允许重复，也不允许出现空值</li><li>一个表最多只能由一个主键约束</li><li>主键约束对应着表中的一列或者多列，组合列同样不允许重复，也不允许出现空值</li><li>创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引</li><li>删除主键约束了，主键约束对应的索引就会自动删除了</li></ul></li><li>FOREIGN KEY：外键约束，维护表与表之间的关系</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_name(</span><br><span class="line">    col_name type <span class="keyword">primary</span> key,</span><br><span class="line">    col_name1 type</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_name(</span><br><span class="line">col_name type <span class="keyword">primary</span> key,</span><br><span class="line">col_name1 type,</span><br><span class="line">col_name2 type</span><br><span class="line">[<span class="keyword">constraint</span> fg_name] <span class="keyword">foreign</span> key(col_name2) <span class="keyword">references</span></span><br><span class="line">tb_name(col_name) [<span class="keyword">on</span> <span class="keyword">update</span> [cascade<span class="operator">|</span><span class="keyword">set</span> <span class="keyword">null</span>][<span class="keyword">on</span> <span class="keyword">delete</span></span><br><span class="line">[cascade<span class="operator">|</span><span class="keyword">set</span> <span class="keyword">null</span>]]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 命名规则</span><br><span class="line"><span class="keyword">constraint</span> tOrder_customerId_fk <span class="keyword">FOREIGN</span> KEY(customer_id) <span class="keyword">REFERENCES</span> t_customer(id),</span><br><span class="line"><span class="keyword">constraint</span> 表名(小驼峰)_字段名(小驼峰)_fk(表示外键) <span class="keyword">FOREIGN</span> KEY(字段名) <span class="keyword">REFERENCES</span> 外键表名(字段)</span><br></pre></td></tr></table></figure><ul><li>FOREIGN KEY<ul><li>外键用于维护表与表之间的关系，外键必须引用另外一张表的主键或者唯一约束</li><li>创建外键约束时，如果不给外键约束命名，默认名不是列名，而是自动产生一个外键名</li><li>创建表时就指定外键约束的话，先创建主键约束的表，再创建外键的表</li><li>删表时，先删外键的表，再删除主键表，删除数据同理</li><li>一张表可以创建多个外键，引用多个不同的表的主键维护关系</li><li>创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是外键的约束名</li><li>删除外键约束后，必须手动删除对应的索引</li><li>外键和主键类型必须一致</li></ul></li><li>CHECK：检查某个字段的值是否符合要求，一般指的是值得范围<ul><li>MySQL5.7可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</li><li>MySQL8.0中可以使用check约束</li></ul></li><li>DEFAULT<ul><li>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段 没有显式赋值，则赋值为默 认值。默认值约束一般不在唯一键和主键列上加。</li></ul></li></ul><p>2）约束分类</p><ul><li>表级约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [TEMPORARY] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tbl_name [(</span><br><span class="line">字段<span class="number">1</span> 数据类型 ,</span><br><span class="line">字段<span class="number">2</span> 数据类型 ,</span><br><span class="line">字段<span class="number">3</span> 数据类型 ,</span><br><span class="line">......</span><br><span class="line">[<span class="keyword">constraint</span> 约束名] 表级约束</span><br><span class="line">[<span class="keyword">constraint</span> 约束名] 表级约束</span><br><span class="line">......</span><br><span class="line">)]engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><ul><li>列级约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [TEMPORARY] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tbl_name [(</span><br><span class="line">字段<span class="number">1</span> 数据类型 [<span class="keyword">constraint</span> 约束名] [列级约束] ,</span><br><span class="line">字段<span class="number">2</span> 数据类型 [<span class="keyword">constraint</span> 约束名] [列级约束] ,</span><br><span class="line">字段<span class="number">3</span> 数据类型 [<span class="keyword">constraint</span> 约束名] [列级约束] ,</span><br><span class="line">......</span><br><span class="line">)]engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 案例<span class="number">1</span>：普通的建表例子</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 案例<span class="number">2</span>：使用四种列级约束 主键约束 非空约束 唯一约束 <span class="keyword">check</span>约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">unique</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">check</span>(gender <span class="keyword">in</span>(<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;m&#x27;</span>)),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 案例<span class="number">3</span>：使用列级约束声明外键约束</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_order;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_customer;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_customer(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_customer <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;ls&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;ww&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">content <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">customer_id <span class="type">int</span>,</span><br><span class="line"><span class="keyword">foreign</span> key(customer_id) <span class="keyword">references</span> t_customer(id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;xiaomi&#x27;</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">&#x27;huawei&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 此时删除失败，因为另一张表 引用了该条记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_customer <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：非空约束(not null)，不能声明成表级约束</font></p><p>表级约束和列级约束对比：</p><ul><li>表级约束和列级约束所写的位置不一样</li><li>not null约束不能用表级约束来声明</li><li>表级约束和列级约束声明语法稍有所不同</li><li>如果要声明的约束为联合主键、联合外键、联合唯一的时候，就一定要用 表级约束</li><li>新版本外键约束只能为表级约束</li></ul><h3 id="特殊建表"><a href="#特殊建表" class="headerlink" title="特殊建表"></a>特殊建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 案例<span class="number">1</span>：建立一张表和s_dept一模一样，s_dept的表结构和表中的数据全部复制过来</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> s_dept; </span><br><span class="line"></span><br><span class="line"># 案例<span class="number">2</span>：建立一张表和s_dept一模一样，只拿来s_dept的表结构，没有数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test2</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> s_dept</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 案例<span class="number">3</span>：建立一张表和s_dept一模一样，只复制表中某几个指定列的数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test3</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,last_name,salary</span><br><span class="line"><span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><h3 id="级联动作"><a href="#级联动作" class="headerlink" title="级联动作"></a>级联动作</h3><ul><li>restrict(默认) : on delete restrict on update restrict<ul><li>当主表删除记录时，如果从表中有相关记录则不允许主表删除</li><li>当主表更改主键字段值时，如果从表有相关记录则不允许更改</li></ul></li></ul><p><img src="/2023/09/07/03-DDL%E5%8F%8ADML%E6%93%8D%E4%BD%9C/image-20230910214117049.png" alt="image-20230910214117049"></p><ul><li>cascade：数据级联更新 on delete cascade on update cascade<ul><li>当主表删除记录或更改被参照字段的值时，从表会级联更新</li></ul></li><li>set null：on delete set null on update set null<ul><li>当主表删除记录时，从表外键字段值变为null</li><li>当主表更改主键字段值时，从表外键字段值变为null</li></ul></li></ul><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name</span><br><span class="line"><span class="keyword">add</span> [<span class="keyword">column</span>] col_name type [<span class="keyword">first</span><span class="operator">|</span>after col_name];</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3</span><br><span class="line"><span class="keyword">add</span> name <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">column</span> uid <span class="type">int</span> <span class="keyword">first</span>; # 第一列插入，同理after最后一列</span><br></pre></td></tr></table></figure><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name </span><br><span class="line">modify [<span class="keyword">column</span>] col_name type [<span class="keyword">default</span> 默认值];</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3</span><br><span class="line">modify <span class="keyword">column</span> uid <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：对默认值的修改只影响今后对表的修改，如果原表中有数据，类型不允许修改。</font></p><h3 id="列重命名"><a href="#列重命名" class="headerlink" title="列重命名"></a>列重命名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name </span><br><span class="line">change [<span class="keyword">column</span>] old_col_name new_col_name type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3</span><br><span class="line">change <span class="keyword">column</span> name username text;</span><br></pre></td></tr></table></figure><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name </span><br><span class="line"><span class="keyword">drop</span> [<span class="keyword">column</span>] col_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user3 </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> age;</span><br></pre></td></tr></table></figure><h2 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> old_tb_name <span class="keyword">to</span> new_tb_name; # 建议记这个</span><br><span class="line">或</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> old_tb_name rename [<span class="keyword">to</span>] new_tb_name;</span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] tb_name [, tb_name1, ..., tb_namen];</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> my_user1;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp,emp1,test_bit,test_int; # 删除多个表</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>删除表的时候当前表不能被其它表引用</li><li>数据、结构、索引全都被删除</li><li>5.7版本删除【一批】表，其中表不存在也能成功执行，8.0版本必须保证表存在才可以删除（所以要使用 if exists）</li></ul><h2 id="截断表"><a href="#截断表" class="headerlink" title="截断表"></a>截断表</h2><p>TRUNCATE 是一个 DDL语句，用于快速删除表中的所有行，同时保留表的结构、 索引和约束。 </p><p>TRUNCATE 可以快速删除表中数据，相比于 DELETE 语句，它的执行速度更快， 因为它不会逐行删除数据，而是<strong>直接删除整个表的数据</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> tb_name;</span><br></pre></td></tr></table></figure><ul><li>删除表中所有数据</li><li>释放表的存储空间</li></ul><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>功崇惟志，业广惟勤💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-select查询</title>
      <link href="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Mysql数据库的使用及数据库分析及设计实践</p></blockquote><h1 id="SQL语法规范"><a href="#SQL语法规范" class="headerlink" title="SQL语法规范"></a>SQL语法规范</h1><h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230901160909460.png" alt="image-20230901160909460"></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释: #注释文字(MySQL特有的方式)</span><br><span class="line">单行注释: <span class="comment">-- 注释文字(--后面必须包含一个空格)</span></span><br><span class="line">多行注释: <span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>字母，数字，下划线，@，#，$符号组成</li><li>首字母不能是数字和$</li><li>不允许是Mysql的关键字以及保留字</li><li>不允许出现空格和特殊字符</li><li>长度小于128位</li><li>必须保证所有的()、单引号、双引号是成对结束的，必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号 ‘ ‘ 表示</li><li>列的别名，尽量使用双引号 “ “ ,而且不建议省略 <strong>as</strong></li></ul><h1 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">distinct</span>] <span class="operator">*</span>&#123;col_name1,col_name2,..&#125; <span class="keyword">from</span> tb_name;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> s_dept;</span><br><span class="line"><span class="keyword">select</span> id,name,region_id <span class="keyword">from</span> s_dept;</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230901161852093.png" alt="image-20230901161852093"></p><h2 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> old_column [<span class="keyword">as</span>] new_column_name <span class="keyword">from</span> tb_name; # 建议不要省略<span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,last_name,salary<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> annual <span class="keyword">from</span> s_emp;</span><br><span class="line"><span class="keyword">select</span> id,se.last_name <span class="keyword">from</span> s_emp se; # 给员工表起别名</span><br></pre></td></tr></table></figure><h2 id="去除重复"><a href="#去除重复" class="headerlink" title="去除重复"></a>去除重复</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> col_name,col_name... <span class="keyword">from</span> tb_name;</span><br></pre></td></tr></table></figure><p><strong>注意事项：distinct关键词只能放在select关键词后面</strong></p><h2 id="空值运算"><a href="#空值运算" class="headerlink" title="空值运算"></a>空值运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(expression,replacement) <span class="keyword">from</span> tb_name;</span><br><span class="line"><span class="keyword">select</span> id,last_name,ifnull(commission_pct,<span class="number">0</span>) c_pct <span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><p>IFNULL() 函数的工作原理如下： </p><ul><li>如果 expression 不为 NULL，则 IFNULL() 函数返回 expression 的值。 </li><li>如果 expression 为 NULL，则 IFNULL() 函数返回 replacement 的值。</li></ul><h2 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;john&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span><span class="operator">*</span><span class="number">5</span><span class="number">-5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;briup&#x27;</span>,id,last_name <span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>注意事项：<strong>where子句的优先级别最高</strong></p><p>条件查询中常用的比较运算符有：</p><ul><li>逻辑比较操作符：<ul><li><code>= &gt; &lt; &gt;= &lt;= !=</code></li></ul></li><li>不等于操作符，以下三个都表示不等于的意思，经常用的是 <code>!=</code><ul><li><code>!= &lt;&gt; ^=</code></li></ul></li></ul><p>逻辑运算符用于组合多个条件，常用的逻辑运算符有：</p><ul><li>AND</li><li>OR</li><li>NOT</li></ul><p><font color="#d12920">注意事项：and比or的优先级要高</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,dept_id,title,salary</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">and</span> (dept_id <span class="operator">=</span> <span class="number">41</span> <span class="keyword">or</span> dept_id <span class="operator">=</span> <span class="number">44</span>);</span><br></pre></td></tr></table></figure><h2 id="特殊条件"><a href="#特殊条件" class="headerlink" title="特殊条件"></a>特殊条件</h2><ul><li>between and 操作符，表示在俩个值之间</li><li>in() ，表示值在一个指定的列表中</li><li>like ，模糊查询，在值不精确的时候使用<ul><li>% ，通配0到多个字符</li><li>_ ，通配一个字符，并且是一定要有一个字符</li><li>\ ，转义字符</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;_ _ _ n _%&#x27;</span>; # 注意我是为了区分才加空格滴</span><br></pre></td></tr></table></figure><p><strong>注意事项：数据库中的字符串，需要使用单引号括起来</strong></p><ul><li>is null ，判断值为null的时候使用，null值的判断不能使用等号</li></ul><p>注意，上述几个关键字的取反操作的为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">between</span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span> (列表)</span><br><span class="line"><span class="keyword">not</span> <span class="keyword">like</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h1 id="SQL运算符"><a href="#SQL运算符" class="headerlink" title="SQL运算符"></a>SQL运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230904135707807.png" alt="image-20230904135707807"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span><span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary,salary<span class="operator">*</span><span class="number">13</span> <span class="keyword">as</span> sumsal <span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230904135914508.png" alt="image-20230904135914508"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary <span class="operator">&lt;=&gt;</span> <span class="keyword">null</span>; # 等于下一条语句</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>null参与运算结果都为null</li><li>&lt;&#x3D;&gt; 和 &#x3D; 作用一样，唯一的区别 &lt;&#x3D;&gt;可以用来对NULL进行判断‘</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> id<span class="operator">&gt;=</span><span class="number">22</span>;</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> least(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">87</span>,<span class="number">34</span>);</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp  <span class="keyword">where</span> salary <span class="keyword">between</span> <span class="number">850</span> <span class="keyword">and</span> <span class="number">1200</span>;</span><br><span class="line"><span class="keyword">select</span> id,last_name,dept_id <span class="keyword">from</span> s_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span>(<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>);</span><br><span class="line"><span class="keyword">select</span> id,last_name <span class="keyword">from</span> s_emp <span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>%表示0到任意字符</li><li>_表示1个字符占位</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;$_%&#x27;</span> <span class="keyword">escape</span> <span class="string">&#x27;$&#x27;</span>; # 注意事项：<span class="keyword">escape</span>指定转义符</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> last_name regexp <span class="string">&#x27;^s&#x27;</span>; # regexp仍然解决不了大小写问题</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> <span class="type">binary</span> last_name <span class="keyword">like</span> <span class="string">&#x27;^s&#x27;</span>; # <span class="type">binary</span>可以解决</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907165915692.png" alt="image-20230907165915692"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">850</span> <span class="keyword">and</span> <span class="number">1200</span>;</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary <span class="keyword">not</span> (salary<span class="operator">&gt;=</span><span class="number">850</span> <span class="keyword">and</span> salary<span class="operator">&lt;=</span><span class="number">1200</span>);</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary <span class="keyword">from</span> s_emp <span class="keyword">where</span> salary<span class="operator">&lt;</span><span class="number">850</span> <span class="keyword">or</span> salary<span class="operator">&gt;</span><span class="number">1200</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：OR和And可以连用，但是and的优先级高于or</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,dept_id <span class="keyword">from</span> s_emp <span class="keyword">where</span> dept_id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>);</span><br><span class="line"># 员工在<span class="number">41</span>或<span class="number">42</span>号部门，但是薪水不能高于<span class="number">1000</span>的员工信息，或员工不在<span class="number">41</span>或<span class="number">42</span>号部门，但是薪水高于<span class="number">1000</span>的员工信息</span><br><span class="line"># 也就是两个条件只能有一个为真</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary,dept_id <span class="keyword">from</span> s_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span>(<span class="number">41</span>,<span class="number">42</span>) xor salary<span class="operator">&gt;</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL</font></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907171037941.png" alt="image-20230907171037941"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">5</span><span class="operator">&amp;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907171446355.png" alt="image-20230907171446355"></p><h1 id="排序分页"><a href="#排序分页" class="headerlink" title="排序分页"></a>排序分页</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote><p>查询数据的时候进行排序，就是根据某个字段的值，按照升序或者降序的情况将记录显示出来</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,id2 <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span>,id2 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><strong>order by语句，只对查询记录显示调整，并不改变查询结果，所以执行权最 低，最后执行</strong></li><li><strong>排序的默认值时asc：升序， desc：降序</strong></li><li><strong>如果有多个列进行排序，后面的列排序的前提时前面的列排好序以后有重复（相同）的值</strong></li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引, 查询记录数;</span><br><span class="line"><span class="keyword">select</span> id,last_name <span class="keyword">from</span> s_emp limit <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><strong>起始索引从0开始，计算公式：起始索引&#x3D;（查询页码-1）*每页显示记录数</strong></li><li><strong>分页查询时数据库的方言，不同的数据库有不同的实现，MySQL中的时LIMIT</strong></li><li><strong>如果查询的时第一页数据，其实索引可以省略直接简写为limit条数</strong></li></ul><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>多表查询，又称表联合查询，即一条sql语句涉及到的表有多张，表中的数 据通过特定的连接，进行联合显示。</p><p><strong>注意事项：阿里开发规范中要求多表连接必须给表起别名</strong></p><h2 id="笛卡儿积"><a href="#笛卡儿积" class="headerlink" title="笛卡儿积"></a>笛卡儿积</h2><h2 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h2><p><strong>等值连接又称为内连接（自然连接）</strong>，将两张具有关联关系的列的数据连接 起来，连接查询where子句中用来连接两个表的条件称为<strong>连接条件或者连接谓词</strong>，当连接运算为&#x3D;的时候，称之为等值连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name....</span><br><span class="line"><span class="keyword">from</span> table_name1,table_name2</span><br><span class="line"><span class="keyword">where</span> [table_name1].[col_name]<span class="operator">=</span>[table_name2].[col_name]</span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> col_name....</span><br><span class="line"><span class="keyword">from</span> table_name1 <span class="keyword">inner</span> <span class="keyword">join</span> table_name2</span><br><span class="line"><span class="keyword">on</span> [table_name1].[col_name]<span class="operator">=</span>[table_name2].[col_name]</span><br></pre></td></tr></table></figure><h2 id="不等值连接"><a href="#不等值连接" class="headerlink" title="不等值连接"></a>不等值连接</h2><p>两张没有关联关系（主外键）的表，通过某个特定场景的业务连接起来，为不等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.id, e.last_name, e.title, e.salary, s.name</span><br><span class="line"><span class="keyword">from</span> s_emp e, salgrade s    # s_emp 和 salgrade没有关联关系</span><br><span class="line"><span class="keyword">where</span> e.salary <span class="keyword">between</span> s.minsal <span class="keyword">and</span> s.maxsal;</span><br></pre></td></tr></table></figure><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>自连接就是一张表，自己和自己连接后进行查询</p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907182451767.png" alt="image-20230907182451767"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s1.id,s1.last_name,s2.id,s2.last_name manager_name</span><br><span class="line"><span class="keyword">from</span> s_emp s1,s_emp s2</span><br><span class="line"><span class="keyword">where</span> s1.manager_id <span class="operator">=</span> s2.id;</span><br><span class="line"># 可理解s1为员工表，s2为经理表</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接查询：查询两表或多表中<strong>交集</strong>部分数据。</p><p>隐式内连接语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> table_name1,table_name2</span><br><span class="line"><span class="keyword">where</span> 条件 ... ;</span><br></pre></td></tr></table></figure><p>显式内连接语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> table_name1 [<span class="keyword">inner</span>] <span class="keyword">join</span> table_name2</span><br><span class="line"><span class="keyword">on</span> 连接条件 ... ;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：一旦表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名再指定字段</font></p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name....</span><br><span class="line"><span class="keyword">from</span> table_name1 <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> table_name2</span><br><span class="line"><span class="keyword">on</span> [table_name1].[col_name]<span class="operator">=</span>[table_name2].[col_name]</span><br></pre></td></tr></table></figure><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name....</span><br><span class="line"><span class="keyword">from</span> table_name1 <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> table_name2</span><br><span class="line"><span class="keyword">on</span> [table_name1].[col_name]<span class="operator">=</span>[table_name2].[col_name]</span><br></pre></td></tr></table></figure><h3 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">UNION</span> 并集 <span class="operator">-</span><span class="operator">&gt;</span>全连接</span><br><span class="line"># 使用左连接和右连接的并集代替全连接</span><br><span class="line"><span class="keyword">SELECT</span> se.dept_id, last_name, `name`</span><br><span class="line"><span class="keyword">FROM</span> s_emp se </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> s_dept sd</span><br><span class="line"><span class="keyword">on</span> se.dept_id <span class="operator">=</span> sd.id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> se.dept_id, last_name, `name`</span><br><span class="line"><span class="keyword">FROM</span> s_emp se </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> s_dept sd</span><br><span class="line"><span class="keyword">on</span> se.dept_id <span class="operator">=</span> sd.id;</span><br></pre></td></tr></table></figure><h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><blockquote><p>单行函数接受参数返回一个结果，只对一行进行变换，每行返回一个结果，可以嵌套，参数可以时一列或一个值</p></blockquote><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907184433547.png" alt="image-20230907184433547"></p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907184505274.png" alt="image-20230907184505274"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(<span class="number">-20</span>);</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">32.56</span>,<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">select</span> bin(<span class="number">10</span>),oct(<span class="number">10</span>),hex(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907184822633.png" alt="image-20230907184822633"></p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907184848955.png" alt="image-20230907184848955"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;hello&#x27;</span>),<span class="built_in">lower</span>(<span class="string">&#x27;GOOD&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27; hello world &#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;helloworld&#x27;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185010137.png" alt="image-20230907185010137"></p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185055446.png" alt="image-20230907185055446"></p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185122830.png" alt="image-20230907185122830"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> curdate(),<span class="built_in">current_date</span>(); </span><br><span class="line"><span class="keyword">select</span> curtime(),<span class="built_in">current_time</span>();</span><br><span class="line"><span class="keyword">select</span> now(),sysdate();</span><br><span class="line"><span class="keyword">select</span> utc_date(),utc_time();</span><br><span class="line"><span class="keyword">select</span> unix_timestamp();</span><br><span class="line"><span class="keyword">select</span> unix_timestamp(now());</span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1661789223</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(now());</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">extract</span>(year_month <span class="keyword">from</span> now());</span><br></pre></td></tr></table></figure><p>extract中type：</p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185552227.png" alt="image-20230907185552227"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> time_to_sec(now());</span><br><span class="line"><span class="keyword">select</span> adddate(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>);</span><br><span class="line"><span class="keyword">select</span> last_day(now());</span><br><span class="line"><span class="keyword">select</span> date_format(now(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>);</span><br></pre></td></tr></table></figure><p>fm格式：</p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185806251.png" alt="image-20230907185806251"></p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907185900947.png" alt="image-20230907185900947"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> str_to_date(<span class="string">&#x27;22/02/2022&#x27;</span>,<span class="string">&#x27;%d/%m/%Y&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> period_add(<span class="string">&#x27;2203&#x27;</span>,<span class="number">3</span>); # 返回<span class="number">202203</span>的后<span class="number">3</span>个月 <span class="number">2022</span>年<span class="number">03</span>月的后三个月 即<span class="number">6</span>月</span><br></pre></td></tr></table></figure><p><strong>注意：第一个参数格式yyyyMM或yyMM，第二个参数可以是负值</strong></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907190407534.png" alt="image-20230907190407534"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,last_name,salary,if(salary<span class="operator">&gt;</span><span class="number">2000</span>,<span class="string">&#x27;蓝领&#x27;</span>,<span class="string">&#x27;白领&#x27;</span>) <span class="keyword">from</span> s_emp;</span><br><span class="line"><span class="keyword">select</span> id,last_name,salary,ifnull(salary,<span class="number">0</span>)<span class="operator">*</span><span class="number">13</span> sum_sal <span class="keyword">from</span> s_emp;</span><br><span class="line"></span><br><span class="line"># 相当于Java的if <span class="keyword">else</span> </span><br><span class="line"><span class="keyword">select</span> id,last_name,salary,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> salary<span class="operator">&gt;</span><span class="number">2500</span> <span class="keyword">then</span> <span class="string">&#x27;金领&#x27;</span></span><br><span class="line"><span class="keyword">when</span> salary<span class="operator">&lt;=</span><span class="number">2500</span> <span class="keyword">and</span> salary<span class="operator">&gt;=</span><span class="number">1500</span> <span class="keyword">then</span> <span class="string">&#x27;蓝领&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;白领&#x27;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">as</span> &quot;rank&quot;</span><br><span class="line"><span class="keyword">from</span> s_emp;</span><br><span class="line"></span><br><span class="line"># 相当于Java的switch <span class="keyword">case</span></span><br><span class="line"><span class="keyword">select</span> id,last_name,salary,</span><br><span class="line"><span class="keyword">case</span> id<span class="operator">%</span><span class="number">3</span> <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;1group&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;2group&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;3group&#x27;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">as</span> &quot;group&quot;</span><br><span class="line"><span class="keyword">from</span> s_emp;</span><br></pre></td></tr></table></figure><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><blockquote><p>聚合函数，一般会操作多组数据，并对每一组中的某个列，执行计算并返回 <strong>单一的值</strong>。</p></blockquote><p>聚合函数经常与 SELECT 语句的 GROUP BY 子句一同使用，所以也把其它称之 为<strong>分组函数</strong>。</p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907191112046.png" alt="image-20230907191112046"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 组函数(field1<span class="operator">|</span><span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> table_name</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> field1,field2,...</span><br><span class="line">[<span class="keyword">having</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure><p>聚合函数能够出现的位置：</p><ul><li>select后面</li><li>having后面</li><li>order by后面</li></ul><p><font color="#d12920">注意事项：where后面一定不能出现组函数！原因时where的执行顺序在组函数之前！</font></p><h2 id="基础聚合函数"><a href="#基础聚合函数" class="headerlink" title="基础聚合函数"></a>基础聚合函数</h2><ul><li>avg ，求平均值 </li><li>count ，计算有多少条数据 </li><li>max ，求最大值 </li><li>min ，求最小值 </li><li>sum ，求和</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">sum</span>(salary)</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> dept_id;</span><br></pre></td></tr></table></figure><h2 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h2><p>注意：分组查询语句中，如果<strong>select、having、order by</strong>语句后面出现组函数，那么 <strong>select、having、order by</strong>后面没有被组函数修饰的列，就必须出现在group by 后面！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">avg</span>(salary) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">max</span>(salary) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">sum</span>(salary) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">min</span>(salary),<span class="built_in">max</span>(salary),<span class="built_in">sum</span>(salary),<span class="built_in">avg</span>(salary) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br></pre></td></tr></table></figure><p>思考，如果group by后跟了俩个字段，表示什么意思？(这两个字段看作是一个整体)</p><h2 id="having关键字"><a href="#having关键字" class="headerlink" title="having关键字"></a>having关键字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">avg</span>(salary) <span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id <span class="keyword">having</span> <span class="built_in">avg</span>(salary)<span class="operator">&gt;=</span><span class="number">1400</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907192205956.png" alt="image-20230907192205956"></p><h2 id="select执行顺序"><a href="#select执行顺序" class="headerlink" title="select执行顺序"></a>select执行顺序</h2><p>一个完整的select查询语句，由以下几部分组成：(<strong>下面的不是执行顺序哈~</strong>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组条件</span><br><span class="line"><span class="keyword">having</span> 分组筛选条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序条件</span><br><span class="line">limit (n<span class="number">-1</span>)<span class="operator">*</span>size,size;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907192751490.png" alt="image-20230907192751490"></p><p>group by 和 having的关系：</p><ul><li>group by 可以单独存在，后面可以不出现having语句</li><li>having不能单独存在，如果需要出现，那么就必须出现在group by后面</li></ul><p>order by语句：</p><ul><li>如果sql语句中需要排序，那么就一定要协作sql语句的最后面（limit才是最后的哈~）</li><li>order by后也可以出现组函数</li></ul><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h2><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查 询称为标量子查询。</p><p>常用的操作符： &#x3D; &lt;&gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询Smith所在部门id</span></span><br><span class="line"><span class="keyword">select</span> dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> last_name<span class="operator">=</span><span class="string">&#x27;Smith&#x27;</span>;</span><br><span class="line">#查询结果：<span class="number">41</span></span><br><span class="line"><span class="comment">-- 2.查询Smith所在部门的最高工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary)</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> dept_id<span class="operator">=</span><span class="number">41</span>;</span><br><span class="line">#查询结果：<span class="number">1450.00</span></span><br><span class="line"><span class="comment">-- 3.查询比Smith所在部门最高工资高的员工的信息</span></span><br><span class="line"><span class="keyword">select</span> id,last_name,salary</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span><span class="number">1450</span>;</span><br><span class="line"><span class="comment">-- 合并以上三条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> id,last_name,salary</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">max</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">where</span> dept_id<span class="operator">=</span>(</span><br><span class="line">        <span class="keyword">select</span> dept_id</span><br><span class="line">        <span class="keyword">from</span> s_emp</span><br><span class="line">        <span class="keyword">where</span> last_name<span class="operator">=</span><span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h2><p>子查询返回的结果是**一列(可以是多行)**，这种子查询称为列子查询。</p><p>常用的操作符：</p><p><img src="/2023/08/31/02-select%E6%9F%A5%E8%AF%A2/image-20230907194422545.png" alt="image-20230907194422545"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询41号部门的平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> dept_id<span class="operator">=</span><span class="number">41</span>;</span><br><span class="line">#查询结果：<span class="number">1247.5</span></span><br><span class="line"><span class="comment">-- 2.查询平均工资比41号部门的平均工资高的部门编号</span></span><br><span class="line"><span class="keyword">select</span> dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(salary)<span class="operator">&gt;</span><span class="number">1247.5</span>;</span><br><span class="line">#查询结果： <span class="number">31</span> <span class="number">32</span> <span class="number">35</span> <span class="number">50</span> <span class="number">33</span> <span class="number">10</span></span><br><span class="line"><span class="comment">-- 3.查询平均工资比 41号部门的平均工资 高 的部门中员工的信息</span></span><br><span class="line"><span class="keyword">select</span> last_name,salary,dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> dept_id <span class="keyword">in</span>(<span class="number">10</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">35</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">-- 合并以上三条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> last_name,salary,dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> dept_id <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> dept_id</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">avg</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line">        <span class="keyword">from</span> s_emp</span><br><span class="line">        <span class="keyword">where</span> dept_id<span class="operator">=</span><span class="number">41</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h2><p>子查询返回的结果是**一行(可以是多列)**，这种子查询称为行子查询。 </p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询&quot;Ngao&quot;的入职日期 及 职位</span></span><br><span class="line"><span class="keyword">select</span> start_date,dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Ngao&#x27;</span>;</span><br><span class="line">#查询结果：<span class="number">1990</span><span class="number">-03</span><span class="number">-08</span> <span class="number">41</span></span><br><span class="line"><span class="comment">-- 查询与&quot;Ngao&quot;的入职日期及职位相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> last_name,id,salary,dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> (start_date,dept_id) <span class="operator">=</span> (<span class="string">&#x27;1990-03-08&#x27;</span>,<span class="number">41</span>);</span><br><span class="line"><span class="comment">-- 合并以上两条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> last_name,id,salary,dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> (start_date,dept_id) <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span> start_date,dept_id</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Ngao&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h2><p>子查询返回的结果是<strong>多行多列</strong>，可将其作为临时表，进一步进行查询，这种子查 询称为表子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询41号部门的平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">where</span> dept_id<span class="operator">=</span><span class="number">41</span>;</span><br><span class="line">#查询结果：<span class="number">1247.5</span></span><br><span class="line"><span class="comment">-- 2.查询平均工资比 41号部门的平均工资 高 的部门id</span></span><br><span class="line"><span class="keyword">select</span> dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(salary) <span class="operator">&gt;</span> <span class="number">1247.5</span>;</span><br><span class="line">#查询结果：<span class="number">10</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">35</span>,<span class="number">50</span></span><br><span class="line"><span class="comment">-- 3.查询平均工资比 41号部门的平均工资 高 的部门中员工的信息</span></span><br><span class="line"><span class="keyword">select</span> se.last_name,se.dept_id</span><br><span class="line"><span class="keyword">from</span> s_emp se</span><br><span class="line"><span class="keyword">where</span> se.dept_id <span class="keyword">in</span> (<span class="number">10</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">35</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">-- 4.准备部门平均工资表</span></span><br><span class="line"><span class="keyword">select</span> dept_id,<span class="built_in">avg</span>(salary) avgs</span><br><span class="line"><span class="keyword">from</span> s_emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"><span class="comment">-- 5.查询平均工资比 41号部门的平均工资 高 的部门中员工的信息，并且显示</span></span><br><span class="line">出当前部门的平均工资</span><br><span class="line"><span class="keyword">select</span> se.last_name,se.dept_id,sa.avgs</span><br><span class="line"><span class="keyword">from</span> s_emp se,(</span><br><span class="line">    <span class="keyword">select</span> dept_id,<span class="built_in">avg</span>(salary) avgs</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line">) sa</span><br><span class="line"><span class="keyword">where</span> se.dept_id <span class="keyword">in</span> (<span class="number">10</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">35</span>,<span class="number">50</span>)</span><br><span class="line"><span class="keyword">and</span> sa.dept_id <span class="operator">=</span> se.dept_id;</span><br><span class="line"><span class="comment">-- 合并以上五条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> se.last_name,se.dept_id,sa.avgs</span><br><span class="line"><span class="keyword">from</span> s_emp se,(</span><br><span class="line">    <span class="keyword">select</span> dept_id,<span class="built_in">avg</span>(salary) avgs</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line">) sa</span><br><span class="line"><span class="keyword">where</span> se.dept_id <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> dept_id</span><br><span class="line">    <span class="keyword">from</span> s_emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> dept_id</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">avg</span>(salary) <span class="operator">&gt;</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line">        <span class="keyword">from</span> s_emp</span><br><span class="line">        <span class="keyword">where</span> dept_id<span class="operator">=</span><span class="number">41</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> sa.dept_id <span class="operator">=</span> se.dept_id;</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>纸上得来终觉浅，绝知此事要躬行。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-mysql概述安装配置</title>
      <link href="/2023/08/31/01-mysql%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/08/31/01-mysql%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Mysql数据库的使用及数据库分析及设计实践</p></blockquote><h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><blockquote><p>自己上网搜哈~~</p></blockquote><p>2023年<a href="https://db-engines.com/en/ranking">DB-Engines Ranking</a>对各数据库受欢迎程度进行调查后的统计结果；</p><p><img src="/2023/08/31/01-mysql%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230831195233286.png" alt="image-20230831195233286"></p><h2 id="数据库术语"><a href="#数据库术语" class="headerlink" title="数据库术语"></a>数据库术语</h2><p><img src="/2023/08/31/01-mysql%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230905161012003.png" alt="image-20230905161012003"></p><p><img src="/2023/08/31/01-mysql%E6%A6%82%E8%BF%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20230905161055412.png" alt="image-20230905161055412"></p><h1 id="MySQL使用"><a href="#MySQL使用" class="headerlink" title="MySQL使用"></a>MySQL使用</h1><h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h<span class="string">&#x27;HOST_NAME&#x27;</span> <span class="operator">-</span>P<span class="string">&#x27;PORT&#x27;</span> <span class="operator">-</span>u<span class="string">&#x27;USERNAME&#x27;</span> <span class="operator">-</span>p<span class="string">&#x27;PASSWORD&#x27;</span></span><br><span class="line">mysql <span class="operator">-</span>hlocalhost <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>proot</span><br><span class="line">mysql <span class="operator">-</span>hlocalhost <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>p  # 密码在下一行输入</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p # 简写 本地localhost和<span class="number">3306</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>-p与密码之间不能有空格，其他参数名与参数值之间可以有空格也可以没有空格。</li><li>密码建议在下一行输入，保证安全</li></ul><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database database_name [<span class="type">character</span> <span class="keyword">set</span> utf8];</span><br><span class="line"><span class="keyword">create</span> database briup <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"><span class="keyword">create</span> database briup charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="列出数据库"><a href="#列出数据库" class="headerlink" title="列出数据库"></a>列出数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use database_name;</span><br><span class="line">use briup;</span><br><span class="line"></span><br><span class="line">source filepath</span><br><span class="line">source <span class="operator">~</span><span class="operator">/</span>briup.sql # linux 可以直接将文件拖入进去，Windows注意要拖C盘的</span><br></pre></td></tr></table></figure><h2 id="列出库中表"><a href="#列出库中表" class="headerlink" title="列出库中表"></a>列出库中表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> table_name;</span><br><span class="line"><span class="keyword">desc</span> s_dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table_name;</span><br><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> s_region;</span><br></pre></td></tr></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host_name&#x27;</span> IDENTIFIED <span class="keyword">BY</span> [PASSWORD] <span class="string">&#x27;password_value&#x27;</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;lwsj&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;lwsj&#x27;</span>;</span><br></pre></td></tr></table></figure><p>若创建过程中，只给出用户名，而没指定主机名，则主机名默认为“%”，表示 一 组主机。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user; # 查看所有用户名</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>(); # 查看当前登录的用户</span><br></pre></td></tr></table></figure><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants; # 查看登录的当前用户的权限</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;user_name&#x27;</span> # 查看指定用户的权限</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;briup&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> privileges <span class="keyword">ON</span> database_name.table_name <span class="keyword">TO</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host_name&#x27;</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span> <span class="keyword">ON</span> briup.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;briup&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;briup&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; # 给全部权限</span><br></pre></td></tr></table></figure><h2 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> database_name.table_name <span class="keyword">FROM</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host_name&#x27;</span>; # 只能是全部撤销</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> briup.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;briup&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;briup&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">#查看briup用户权限</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;briup&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;briup&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">#可简写为</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> briup;</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>少年辛苦终身事，莫向光阴惰寸功💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expand-02-jdk8新特性</title>
      <link href="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：JVM、JDK新特性、JDK源码、高并发、MySql优化</p></blockquote><blockquote><p>本章目标：函数式接口、Lambda表达式、方法引用、Optional、Stream</p></blockquote><h1 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h1><ul><li>整型常量数据可以用下划线分隔表示，在整数的值比较大的时候， 使数值更加直观</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01_NumberUnderlineTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000_000_000L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0b00000000_00000000_00000000_00000111</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1234_5678_9</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">123_456_789</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a); <span class="comment">// a = 1000000000</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b); <span class="comment">// b = 7</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c); <span class="comment">// c = 123456789</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d = &quot;</span> + d); <span class="comment">// d = 123456789</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>JDK1.8中，接口里面可以定义默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InterfaceName</span>&#123;</span><br><span class="line">    <span class="keyword">default</span> returnType <span class="title function_">methodName</span><span class="params">(arg-list)</span>&#123;</span><br><span class="line">        <span class="comment">//代码实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FirstInterface</span>&#123;</span><br><span class="line">    <span class="comment">//传统定义,抽象方法，没有方法体。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default method in FirstInterface&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstClass</span> <span class="keyword">implements</span> <span class="title class_">FirstInterface</span>&#123;</span><br><span class="line">    <span class="comment">//所有实现类必须实现接口中未实现的方法。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是FirstInterface中的抽象方法，所有实现类必须实现！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FirstClass</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstClass</span>();</span><br><span class="line">        fc.test(); <span class="comment">//此处输出Default method in FirstInterface,对于默认方法，如果实现类中没有实现就是用默认的。</span></span><br><span class="line">        fc.before(); <span class="comment">//此处输出我是FirstInterface中的抽象方法，所有实现类必须实现。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认方法存在的两大优势：</p><ul><li>可以让接口更优雅的升级，减少使用人员操作的负担 </li><li>可以让实现类中省略很多不必要方法的空实现</li></ul><p>（不必随着接口方法增加，从而修改实现代码，因为默认方法在字了中可以不用实现）</p><p><strong>接口继承及默认方法冲突</strong></p><p>方法调用的判断规则：</p><ul><li>类中声明的方法优先级最高<ul><li>类中，声明的方法要高于任何默认方法的优先级</li></ul></li><li>如果无法依据第一条进行判断，那么子接口的优先级更高</li><li>最后，如果还是无法判断，那么继承了多个接口的类，必须通过实现（<strong>重写</strong>）方法来确定方法的调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一条规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default Method test in A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method test in B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：default method test in A</span></span><br></pre></td></tr></table></figure><blockquote><p>因为A是类，B是接口，A里边的test的优先级更高</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二条</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default Method test in A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method test in B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// default method test in B</span></span><br></pre></td></tr></table></figure><blockquote><p>因为B重写了A中的默认方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default Method test in A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method test in B&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如下代码编译会报错。</span></span><br><span class="line"><span class="comment">/*class C implements A,B&#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args)&#123;</span></span><br><span class="line"><span class="comment">        C c = new C();</span></span><br><span class="line"><span class="comment">        c.test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//如果C需要同时实现A和B接口，那么必须显示覆盖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果在C中需要显示访问A/B的默认方法，可以使用接口</span></span><br><span class="line">        名.<span class="built_in">super</span>.方法名();</span><br><span class="line">        A.<span class="built_in">super</span>.test();</span><br><span class="line">        B.<span class="built_in">super</span>.test();</span><br><span class="line">        <span class="comment">//或者自己编写test方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>JDK1.8中，接口里面可以定义静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InterfaceName</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> returnType <span class="title function_">methodName</span><span class="params">(arg-list)</span>&#123;</span><br><span class="line">        <span class="comment">//代码实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">InterfaceName.methodName();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StaticMethod</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是StaticMethod接口中的静态方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">StaticMethod</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">//运行成功</span></span><br><span class="line">        StaticMethod.test();</span><br><span class="line">        <span class="comment">//编译报错：</span></span><br><span class="line">        <span class="comment">//Static method may be invoked on containing interface class only</span></span><br><span class="line">        <span class="comment">//A.test();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，接口中的静态方法，只能使用当前接口的名字来调用</p></blockquote><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>Lambda表达式是JDK1.8新增的一种语法，以确保在java代码中可以支持函 数式编程，让代码的表示含义更简单。 </p><p>理解lambda表达式之前，需要先理解行为参数化和函数式编程的概念。</p><h2 id="行为参数化"><a href="#行为参数化" class="headerlink" title="行为参数化"></a>行为参数化</h2><p>在java代码中，我们如果需要运算，那么大部分我们的过程是确定的，但是实际参与运算的数却不确定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b, 此处传递一个计算行为)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a+<span class="number">1</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        调用计算行为,操作当前数据</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将这个 <strong>计算行为</strong>，用接口的形式进行定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result, <span class="type">int</span> i)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候， calculate 方法就可以这样进行定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Action cal)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a+<span class="number">1</span>; i&lt;=b; i++) &#123;</span><br><span class="line">        result = cal.action(result, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义累加的核心操作行为</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> <span class="keyword">implements</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result+i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义累乘的核心操作行为</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multiply</span> <span class="keyword">implements</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result*i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        result = calculate(<span class="number">3</span>,<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Add</span>());</span><br><span class="line">        <span class="comment">//[3,5]之间，累加的结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result = calculate(<span class="number">3</span>,<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Multiply</span>());</span><br><span class="line">        <span class="comment">//[3,5]之间，累乘的结果</span></span><br><span class="line">        System.out.println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，将我们要执行的核心计算操作，定义成一个参数，传给了calculate方法</p><p><strong>我们可以通过这个参数，给方法传递不同的行为，来实现不同操作，这就是行为参数化</strong></p><p>java中，不允许孤立的代码存在，我们要想将行为（核心操作代码）传递给 calculate 方法，就必须要将这些核心操作代码，包装在一个实现了 Action的类中。</p><p>为了减少声明和定义类，Java提供了<strong>匿名内部类</strong>的实现，来简化我们刚才的调用过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        result = calculate(<span class="number">3</span>,<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Action</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> result+next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//[3,5]之间，累加的结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result = calculate(<span class="number">3</span>,<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Action</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> result*next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//[3,5]之间，累乘的结果</span></span><br><span class="line">        System.out.println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是仍然存在相同的代码：</p><ul><li>new Action()</li><li>public int action(int result,int next){}</li></ul><p>我们真正关心的是：</p><ul><li>方法的参数列表</li><li>方法中的核心操作代码</li><li>方法的返回类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02_LambdaClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">action1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> result, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">action2</span> <span class="operator">=</span> (result, i) -&gt; result + i; <span class="comment">// lambda表达式</span></span><br><span class="line">        System.out.println(action1.getClass()); <span class="comment">// class com.briup.expand.chap01.Test$1</span></span><br><span class="line">        System.out.println(action2.getClass()); <span class="comment">// class com.briup.expand.chap01.Test$$Lambda$1/1324119927</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Action cal)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a + <span class="number">1</span>; i &lt;= b; i++) &#123;</span><br><span class="line">            result = cal.action(result, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，对Action接口，分别使用匿名类和Lambda表达式进行实现，然后调 用俩个对象getClass方法，观察结果有何不同？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class com.briup.expand.chap01.Test$1  匿名内部类.getClass()</span></span><br><span class="line"><span class="comment">// class com.briup.expand.chap01.Test$$Lambda$1/1324119927 Lambda表达式.getClass()</span></span><br></pre></td></tr></table></figure><ul><li>$$Lambda表示是Lambda表达式</li><li>Lambda$1表示是Lambda表达式中的第一个匿名内部类</li><li>&#x2F;1324119927：唯一标识这个lambda表达式的内部类</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote><p>函数式编程，和面向对象编程、以及面向过程编程一样，它们都是编程的一种方式</p></blockquote><p>函数式编程时面向数学的抽象，将计算过程描述为一种表达式求值。f(x) &#x3D; y</p><p>严格意义上的表达式，就是由数据和操作我按照一定的规则，组合再一切形成的序列，并且<strong>所有的表达式都是有返回结果的</strong>，这里所说的表达式和代码语句的最大区别。</p><p>但是在java中，是允许函数式编程中没有任何返回值的，因为java中有关键字void（也可以看做是一个结果），但是在其他一些专门的函数式编程语言中，是没有void的。</p><p>所以，jdk1.8中，可以把Action接口的实现，简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Action add = (int result,int next) -&gt; &#123;</span></span><br><span class="line"><span class="comment">return result + next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="type">Action</span> <span class="variable">add</span> <span class="operator">=</span> (result,next) -&gt; result + next;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829191448561.png" alt="image-20230829191448561"></p><h2 id="Lambda概述"><a href="#Lambda概述" class="headerlink" title="Lambda概述"></a>Lambda概述</h2><blockquote><p>Lambda表达式，可以用来表示一个函数，它只关注函数的<strong>参数列表， 函数主体、返回类型</strong>，并且可以将此函数作为一个参数，进行传递。</p></blockquote><p>在java中，Lambda表达式还有另一个存在的意义，那就是作为一个<strong>接口的实现类对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">a</span> <span class="operator">=</span> (str) -&gt; str.length(); <span class="comment">// 作为接口的实例化对象</span></span><br><span class="line">        System.out.println(a.test(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看出，Lambda表达式，虽然可以通过（参数列表，函数主体，返回类型）三部分来标识一个具体的函数操作，但是它必须是依托一个接口才行，所以Lambda表达式就是对<strong>接口</strong>中抽象方法的实现</p></blockquote><h2 id="Lambda使用"><a href="#Lambda使用" class="headerlink" title="Lambda使用"></a>Lambda使用</h2><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829192124234.png" alt="image-20230829192124234"></p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><blockquote><p>有且只有一个抽象方法的接口，就是函数式接口。该接口中，也允许有其他的默认方法和静态方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这也是函数式接口，里边只有一个抽象的方法action</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DefaultAction</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是默认实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculate</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这【不是】函数式接口，因为接口SubCalculate中有俩个抽象方法，自</span></span><br><span class="line">己一个，继承一个</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubCalculate</span> <span class="keyword">extends</span> <span class="title class_">Calculate</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这【不是】函数式接口，因为接口Noting中没有任何抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Noting</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8中，针对函数式接口，新增了一个注解 <strong>@FunctionalInterface</strong>,用来检查被标注的接口，是不是一个函数式接口，如果不是，那么编译器会报错。</p><p>但是，该注解不是必须要用的，它只是会让编辑器帮我们检查一下而已，以免出现接口中<strong>抽象个数不是1</strong>的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda语法"><a href="#Lambda语法" class="headerlink" title="Lambda语法"></a>Lambda语法</h3><blockquote><p>Lambda表达式的格式为：() -&gt; {}</p></blockquote><ul><li>（）表示参数列表</li><li>-&gt; 后面跟的式函数主体</li><li>{} 函数主题，表达式的返回值，由这个函数主体中代码来决定</li></ul><p>函数式接口中，抽象方法常见的有以下几种情况：</p><ul><li>无参无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Action</span> <span class="variable">action1</span> <span class="operator">=</span> () -&gt; &#123;&#125;;</span><br><span class="line"><span class="type">Action</span> <span class="variable">action2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Action action3= () -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    System.out.println(a+b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有参无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Action</span> <span class="variable">action1</span> <span class="operator">=</span> (a,b) -&gt; &#123;&#125;;</span><br><span class="line"><span class="comment">//抽象方法是多个参数的情况</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>; <span class="comment">// 两个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有参有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Action</span> <span class="variable">action</span> <span class="operator">=</span> () -&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无参有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Action</span> <span class="variable">action1</span> <span class="operator">=</span> (a,b) -&gt; a + b;</span><br><span class="line"><span class="type">Action</span> <span class="variable">action2</span> <span class="operator">=</span> (a,b) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> a+b;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(Math.random()*num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，Lambda表达式中的参数列表，里面的参数可以不写类型，因为JVM在运行时会自动推断，当然，如果直接手写上去，也完全没有问题</p></blockquote><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><p>JDK1.8中，已经定了一些会常用到的函数式接口，这些函数式接口都定义 在 <strong>java.lang.function</strong> 包中，例如 Predicate 、 Consumer 、 Function 、 Supplier 、 UnaryOperator 和 BinaryOperator 等。 </p><p>注意，如果需要，也可以自己定义类似的函数式接口，并不是必须要使用 这些定义好的接口。</p><h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.function.Predicate&lt;T&gt;</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>; <span class="comment">// T -&gt; boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个方法，用来过滤数组中所有符合要求的数据，选出大于50 的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3_PredicateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">54</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">455</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">835</span>, <span class="number">98</span>&#125;;</span><br><span class="line">        arr = Test3_PredicateTest.filter(arr, e -&gt; e &gt; <span class="number">50</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] filter(Integer[] arr, Predicate&lt;Integer&gt; p) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : arr) &#123;</span><br><span class="line">            <span class="comment">// 判断当前数据是否满足要求</span></span><br><span class="line">            <span class="keyword">if</span> (p.test(integer)) &#123;</span><br><span class="line">                list.add(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return list.toArray(new Integer[list.size()]);</span></span><br><span class="line">        <span class="comment">// 这里使用new Integer[0]即可，主要是为了告诉JVM我要转数组的类型</span></span><br><span class="line">        <span class="comment">// toArray()会进行自动扩容</span></span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829194701375.png" alt="image-20230829194701375"></p><ul><li>and</li></ul><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829194904469.png" alt="image-20230829194904469"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件1，数据大于10</span></span><br><span class="line">Predicate&lt;Integer&gt; p1 = e -&gt; e&gt;<span class="number">10</span>;</span><br><span class="line"><span class="comment">//条件2，数据小于50</span></span><br><span class="line">Predicate&lt;Integer&gt; p2 = e -&gt; e&lt;<span class="number">50</span>;</span><br><span class="line"><span class="comment">//俩个条件同时成立</span></span><br><span class="line">Predicate&lt;Integer&gt; p = p1.and(p2);</span><br><span class="line">arr = t.filter(arr,p);</span><br></pre></td></tr></table></figure><ul><li>or</li></ul><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829194940940.png" alt="image-20230829194940940"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件1，数据小于10</span></span><br><span class="line">Predicate&lt;Integer&gt; p1 = e -&gt; e&lt;<span class="number">10</span>;</span><br><span class="line"><span class="comment">//条件2，数据大于50</span></span><br><span class="line">Predicate&lt;Integer&gt; p2 = e -&gt; e&gt;<span class="number">50</span>;</span><br><span class="line"><span class="comment">//俩个条件成立一个即可</span></span><br><span class="line">Predicate&lt;Integer&gt; p = p1.or(p2);</span><br><span class="line">arr = t.filter(arr,p);</span><br></pre></td></tr></table></figure><ul><li>negate</li></ul><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829195049226.png" alt="image-20230829195049226"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件1，数据大于10</span></span><br><span class="line">Predicate&lt;Integer&gt; p1 = e -&gt; e&gt;<span class="number">10</span>;</span><br><span class="line"><span class="comment">//获取条件1相反的数据</span></span><br><span class="line">Predicate&lt;Integer&gt; p = p1.negate();</span><br><span class="line">arr = t.filter(arr,p);</span><br></pre></td></tr></table></figure><p>JDK1.8中，给 Collection 集合增加了默认方法： <strong>removeIf</strong></p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829195458458.png" alt="image-20230829195458458"></p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>java.util.function.Consumer 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个方法，用来对学生对象进行操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04_ConsumerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test04_ConsumerTest</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test04_ConsumerTest</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        <span class="comment">// 操作1、给stu对象的name属性值加前缀</span></span><br><span class="line">        Consumer&lt;Student&gt; consumer1 = (student) -&gt; student.name = <span class="string">&quot;TangClan_&quot;</span> + student.name;</span><br><span class="line">        <span class="comment">// 操作2、给stu对对象的name属性值添加后缀</span></span><br><span class="line">        Consumer&lt;Student&gt; consumer2 = student -&gt; student.name = student.name + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 操作3、给stu对象的name属性值，先加前缀，再加后缀</span></span><br><span class="line">        Consumer&lt;Student&gt; consumer3 = consumer1.andThen(consumer2);</span><br><span class="line">        <span class="comment">//如果传入consumer1，表示只加前缀</span></span><br><span class="line">        <span class="comment">//如果传入consumer2，表示只加后缀</span></span><br><span class="line">        <span class="comment">//如果传入consumer3，表示先加前缀，再加后缀</span></span><br><span class="line">        <span class="comment">// t.operStu(stu, consumer1);</span></span><br><span class="line">        <span class="comment">// t.operStu(stu, consumer2);</span></span><br><span class="line">        t.operStu(stu, consumer3);</span><br><span class="line">        System.out.println(stu.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; col = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        col.add(<span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;parker&quot;</span>);</span><br><span class="line">        <span class="comment">// 去掉中间变量，直接把Lambda表达式作为当前参数传入到forEach方法中</span></span><br><span class="line">        col.forEach(res -&gt; System.out.println(res));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operStu</span><span class="params">(Student stu, Consumer&lt;Student&gt; consumer)</span> &#123;</span><br><span class="line">        consumer.accept(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829201856470.png" alt="image-20230829201856470"></p><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>java.util.function.Function 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Returns a function that always returns its input argument.</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字符串按照指定条件转为集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05_FunctionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a-b-c-a-b-c&quot;</span>;</span><br><span class="line">        <span class="comment">// 传入字符串，返回数组，操作为把字符串按照 &quot;_&quot; 进行分割为字符串数组</span></span><br><span class="line">        <span class="comment">// &quot;a-b-c-a-b-c&quot; 转换为 &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;</span></span><br><span class="line">        Function&lt;String, String[]&gt; f1 = s -&gt; s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="comment">// 传入字符串数组，返回Set&lt;String&gt;集合，目的是去除数组中重复的数据，存放把结果存放到Set集合中</span></span><br><span class="line">        <span class="comment">// &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; 转换为集合 [a,b,c]</span></span><br><span class="line">        Function&lt;String[], Set&lt;String&gt;&gt; f2 = arr -&gt; &#123;</span><br><span class="line">            Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            set.addAll(Arrays.asList(arr));</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 刚好，f1函数的结果，作为f2函数的参数，f1和f2组合成f3函数</span></span><br><span class="line">        <span class="comment">// f3函数表示传入字符串，最后返回Set&lt;String&gt;集合</span></span><br><span class="line">        <span class="comment">// 其实内部是先讲字符串交给f1函数转换数组，再将数组交给f2函数转换Set集合</span></span><br><span class="line">        Function&lt;String, Set&lt;String&gt;&gt; f3 = f1.andThen(f2);</span><br><span class="line">        Set&lt;String&gt; set = f3.apply(str);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>理解了andThen方法，那么compose方法也就理解：f1.andThen(f2)， f1.compose(f2) </p><pre><code>俩个方法的区别是，把f2操作放在f1操作之前还是之后的问题</code></pre></blockquote><p>静态方法 identity ，API中给出的注释为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看出，该方法可以直接返回一个Function对象，传入一个参数，直接把该参数返回，不做任何操作</p><p>需要注意的式，这是一个泛型方法，因为泛型参数T是在这个方法上定义的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;String,String&gt; f = Function.identity();</span><br><span class="line">        <span class="comment">//传入hello，返回hello</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> f.apply(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的使用场景后面遇到再说哈~~</p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829215134694.png" alt="image-20230829215134694"></p><h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h4><p><strong>java.util.function.Supplier</strong> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Gets a result.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出10个1-100之间的随机的奇数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08_SupplierTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成1-100直接的随机的奇数</span></span><br><span class="line">        Supplier&lt;Integer&gt; supplier = () -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                num = (<span class="type">int</span>) (Math.random() * <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">while</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(supplier.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Predicate 、 Consumer ， Function ， Supplier ，这些接口都是带泛型的接口，泛型的类型只能是引用类型，那么如果需要操作基本类型的数据，这时候就会做自动装箱和拆箱。而<strong>大量</strong>的装箱和拆箱是比较消耗性能的，所以JDK1.8中，还专门定义了一 些针对基本类型的函数式接口，例如：</p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829215638731.png" alt="image-20230829215638731"></p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230829220034827.png" alt="image-20230829220034827"></p><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>使用Lambda表达式，相当于给函数式接口生成一个实例，但是Lambda表达 式本身，并不包含这个接口的任何信息，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">//()-&gt;&#123;&#125; 这个表达式中并没有包含任何Runnable接口的信息</span></span><br><span class="line">        <span class="comment">//但是编译和运行都是成功的</span></span><br><span class="line">        t.test(()-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Runnable run)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以Lambda表达式中没有接口的任何信息，JVM还能将其和接口匹配上，那是因为：</p><ul><li>我们在使用Lambda表达式的时候，JVM是会通过上下文<strong>自动推断</strong>它所属接口类型的</li><li>并且接口中只有一个抽象方法，自然也能匹配成功该表达式所对应实现的抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">//JVM根据上下文运行环境自动推断出 ()-&#123;&#125; 表达式对应的是接口是Runnable</span></span><br><span class="line">        t.test1(()-&gt;&#123;&#125;);</span><br><span class="line">        <span class="comment">//JVM根据上下文运行环境自动推断出 ()-&#123;&#125; 表达式对应的是接口是Action</span></span><br><span class="line">        t.test2(()-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(Runnable run)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Action action)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的，JVM还能自动推断出Lambda表达式中参数的类型，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">//这俩种写法的效果是一样的，JVM根据环境自动推断出参数a和b的类型</span></span><br><span class="line">        t.test((<span class="type">int</span> a,<span class="type">int</span> b)-&gt;a+b);</span><br><span class="line">        t.test((a,b)-&gt;a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Action action)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载解析"><a href="#重载解析" class="headerlink" title="重载解析"></a>重载解析</h2><p>如果类中的方法进行了重载，那么在使用Lambda表达式的时候，很可能给它的类型推断带来问题。</p><ul><li>编译报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编译报错，因为俩个方法都符合</span></span><br><span class="line">        test(<span class="number">1</span>,num -&gt; num&gt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,Predicate&lt;Integer&gt; p)</span>&#123; <span class="comment">// T -&gt; boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,Function&lt;Integer,Boolean&gt; f)</span>&#123; <span class="comment">// T -&gt; R</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编译通过，用强转的方式指定了表达式的对应的接口类</span></span><br><span class="line">        test(<span class="number">1</span>,(Predicate&lt;Integer&gt;)(num-&gt;num&gt;<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,Predicate&lt;Integer&gt; p)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,Function&lt;Integer,Boolean&gt; f)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>如果在Lambda表达式中，使用了局部变量，那么这个局部变量就一定要使 用 <strong>final</strong> 修饰符进行修饰，这方面的语法要求，和之前学习的匿名内部类 保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">            <span class="comment">//这里访问局部变量a之后，a就自动变成了final修饰的常量（JDK1.8）</span></span><br><span class="line">            <span class="comment">//也可以手动给局部变量a加上final修饰符</span></span><br><span class="line">            <span class="comment">//变量a的值将不可被再次赋值，变为了常量</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><h2 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::静态方法名</span><br></pre></td></tr></table></figure><p>注意：方法名后面一定<strong>没有小括号</strong>，因为这里不是在调用方法，而是在引用这个方法的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//只要函数的参数列表是String类型，函数的返回值是int类型，就可以作为Action接口的具体实现</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a1</span> <span class="operator">=</span> str -&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//使用 类名::静态方法名 的形式来引用当前类中的len方法</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a2</span> <span class="operator">=</span> Test::len;</span><br><span class="line">        System.out.println(a1.run(<span class="string">&quot;hello&quot;</span>));<span class="comment">//输出1</span></span><br><span class="line">        System.out.println(a2.run(<span class="string">&quot;hello&quot;</span>));<span class="comment">//输出5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">len</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">run</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::非静态方法名</span><br></pre></td></tr></table></figure><p><strong>注意，这里也是使用类名来进行引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Action a = new Action() &#123;</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">        * public int run(MyHandler handler,int i, String str,</span></span><br><span class="line"><span class="comment">        List&lt;Integer&gt; list) &#123;</span></span><br><span class="line"><span class="comment">        * return handler.test(i,str,list);</span></span><br><span class="line"><span class="comment">        * &#125;</span></span><br><span class="line"><span class="comment">        * &#125;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a</span> <span class="operator">=</span> MyHandler::test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">run</span><span class="params">(MyHandler handler, <span class="type">int</span> i, String str, List&lt;Integer&gt; list)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i, String str, List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规律：方法参数列表中第一个参数作为<strong>对象</strong>，从第二个参数开始，后面的都作为该对象的参数列表，返回值类型要一致</p><h2 id="使用对象引用方法"><a href="#使用对象引用方法" class="headerlink" title="使用对象引用方法"></a>使用对象引用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象::非静态方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHandler</span>();</span><br><span class="line">        <span class="type">Action</span> <span class="variable">a1</span> <span class="operator">=</span> str -&gt; str;</span><br><span class="line">        <span class="comment">//这里表示，使用handler对象的test方法，来对Action接口进行实现</span></span><br><span class="line">        <span class="comment">//因为test方法的参数列表和返回类型，恰好是和run方法的参数列表和返回类型保持一致</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a2</span> <span class="operator">=</span> handler::test; <span class="comment">// 这个时候表示a2指向了handler对象中的test方法</span></span><br><span class="line">        System.out.println(a2.run(<span class="string">&quot;tom&quot;</span>));<span class="comment">//输出：hello! tom</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    String <span class="title function_">run</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello! &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><h3 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">a1</span> <span class="operator">=</span> ()-&gt;<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//这里表示，使用Student类的无参构造函数，来对Action接口进行实现</span></span><br><span class="line">        <span class="comment">//因为Student类的无参构造函数，恰好是和run方法的参数列表和返回类型保持一致</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a2</span> <span class="operator">=</span> Student::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(a2.run());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    Student <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有参构造器"><a href="#有参构造器" class="headerlink" title="有参构造器"></a>有参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">a1</span> <span class="operator">=</span> name-&gt;<span class="keyword">new</span> <span class="title class_">Student</span>(name);</span><br><span class="line">        <span class="comment">//这里表示，使用Student类的有参构造函数，来对Action接口进行实现</span></span><br><span class="line">        <span class="comment">//因为Student类的有参构造函数，恰好是和run方法的参数列表和返回类型保持一致</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a2</span> <span class="operator">=</span> Student::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(a2.run(<span class="string">&quot;tom&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    Student <span class="title function_">run</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组构造"><a href="#数组构造" class="headerlink" title="数组构造"></a>数组构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组类型::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><ul><li>根据给定的长度，创建任意类型的数组对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">a1</span> <span class="operator">=</span> len -&gt; <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="comment">//这里表示，使用int数组的构造函数，来对Action接口进行实现</span></span><br><span class="line">        <span class="comment">//因为int数组的构造函数，恰好是和run方法的参数列表和返回类型保持一致</span></span><br><span class="line">        <span class="type">Action</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(a2.run(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] run(<span class="type">int</span> len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，无论是构造器，还是普通方法，在Lambda表达式中，都有一个可以引用过来，当做一个函数，这个函数有参数列表、函数主体、返回类型，并且把这个函数当做一个函数式接口中抽象方法的实现！</p><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><blockquote><p>java.util.Optional 类，是用来防止<strong>NullPointerException</strong>异常的辅助类型， Optional 对 象中封装的值，可以是 null ，也可以不是 null</p></blockquote><p>在Java8之前，一个函数可能因为代码逻辑问题，最终返回一个null，这时候程序中很可能出现空指针异 常。而在Java8中，不推荐返回 null ，而是返回 <strong>Optional</strong></p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830202310474.png" alt="image-20230830202310474"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * of方法 为非null的值创建一个Optional对象</span></span><br><span class="line"><span class="comment">        * 如果传入参数为null,则抛出NullPointerException</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Optional&lt;String&gt; op1 = Optional.of(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ofNullable方法</span></span><br><span class="line"><span class="comment">        * ofNullable与of方法相似,唯一的区别是可以接受参数为null的情况</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Optional&lt;String&gt; op2 = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * isPresent方法 如果值存在返回true,否则返回false</span></span><br><span class="line"><span class="comment">        * get方法 如果Optional有值则将其返回,否则抛出NoSuchElementException</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(op1.isPresent())&#123;</span><br><span class="line">            System.out.println(op1.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op2.isPresent())&#123;</span><br><span class="line">            System.out.println(op2.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ifPresent方法 如果Optional实例有值则为其调用Consumer接口中的方法,否则不做处理</span></span><br><span class="line"><span class="comment">        * Consumer:</span></span><br><span class="line"><span class="comment">        * public void accept(T t);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        op1.ifPresent(str-&gt;System.out.println(str));</span><br><span class="line">        op2.ifPresent(str-&gt;System.out.println(str));<span class="comment">//这个不执行 因为op2里面的值是null</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * orElse方法 如果有值则将其返回,否则返回指定的其它值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(op1.orElse(<span class="string">&quot;如果op1中的值为null则返回这句话&quot;</span>));</span><br><span class="line">        System.out.println(op2.orElse(<span class="string">&quot;如果op2中的值为null则返回这句话&quot;</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * orElseGet方法 orElseGet与orElse方法类似,区别在于得到的默认值的方式不同</span></span><br><span class="line"><span class="comment">        * Supplier:</span></span><br><span class="line"><span class="comment">        * public T get();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(op1.orElseGet(()-&gt;<span class="string">&quot;自己定义的返回值&quot;</span>));</span><br><span class="line">        System.out.println(op2.orElseGet(()-&gt;<span class="string">&quot;自己定义的返回值&quot;</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * map方法 如果有值,则调用mapper的函数处理并得到返回值</span></span><br><span class="line"><span class="comment">        * 返回值并且依然Optional包裹起来,其泛型和你返回值的类型一致</span></span><br><span class="line"><span class="comment">        * public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Optional&lt;Integer&gt; map1 = op1.map(str-&gt;<span class="number">1</span>);</span><br><span class="line">        System.out.println(map1.orElse(<span class="number">0</span>));</span><br><span class="line">        Optional&lt;Double&gt; map2 = op2.map(str-&gt;<span class="number">1.2</span>);</span><br><span class="line">        System.out.println(map2.orElse(<span class="number">0D</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * flatMap方法 如果有值,则调用mapper的函数返回Optional类型返回值,否则返回空</span></span><br><span class="line"><span class="comment">        Optional</span></span><br><span class="line"><span class="comment">        * flatMap与map方法类似,区别在于flatMap中的mapper返回值必须是Optional</span></span><br><span class="line"><span class="comment">        * 调用结束时,flatMap不会对结果用Optional封装,需要我们自己把返回值封装为Optional</span></span><br><span class="line"><span class="comment">        * public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt;</span></span><br><span class="line"><span class="comment">        mapper);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Optional&lt;String&gt; flatMap = op1.flatMap(str-&gt;Optional.of(str+<span class="string">&quot;_briup&quot;</span>));</span><br><span class="line">        System.out.println(flatMap.get());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">* filter方法 如果有值并且满足断言条件返回包含该值的Optional,否则返回空Optional</span></span><br><span class="line"><span class="comment">* public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        op1 = op1.filter(str-&gt;str.length()&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(op1.orElse(<span class="string">&quot;值为null&quot;</span>));</span><br><span class="line">        op1 = op1.filter(str-&gt;str.length()&gt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(op1.orElse(<span class="string">&quot;值为null&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830214424150.png" alt="image-20230830214424150"></p><p>Stream操作分为中间操作或者最终操作两种：</p><ul><li>中间操作：返回Stream本身，这样就可以将多个操作依次串起来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map、flatMap、filter、distinct、sorted、peek、limit、skip、parallel、sequential、unordered</span><br></pre></td></tr></table></figure><ul><li>最终操作：返回一特定类型的计算结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forEach、forEachOrdered、toArray、reduce、collect、min、max、count、anyMatch、allMatch、noneMatch、findFirst、findAny、iterator</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        list = list.stream() <span class="comment">//把集合list变为stream</span></span><br><span class="line">            .filter(e-&gt;e%<span class="number">2</span>==<span class="number">0</span>) <span class="comment">//过滤，保留偶数</span></span><br><span class="line">            .sorted((e1,e2)-&gt;e2-e1) <span class="comment">//排序，倒序</span></span><br><span class="line">            .collect(Collectors.toList()); <span class="comment">//结果收集到一个新的List集合中并返回</span></span><br><span class="line">            System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// [10, 8, 6, 4, 2]</span></span><br></pre></td></tr></table></figure><p>优雅、简洁</p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830215947132.png" alt="image-20230830215947132"></p><h2 id="其他转Stream"><a href="#其他转Stream" class="headerlink" title="其他转Stream"></a>其他转Stream</h2><p>可以将现有的数据，转换为Stream对象，然后再使用Stream的API对数据进行一些系列操作</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Arrays.stream(arr);</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，只要是Collection类型的集合，都可以调用stream()方法，将集合转换为Stream对象</p></blockquote><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830220446043.png" alt="image-20230830220446043"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream1</span> <span class="operator">=</span> IntStream.of(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="comment">//[1,3)</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream2</span> <span class="operator">=</span> IntStream.range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//[1,3]</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream3</span> <span class="operator">=</span> IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream转其他"><a href="#Stream转其他" class="headerlink" title="Stream转其他"></a>Stream转其他</h2><blockquote><p>使用Stream的API对数据操作后，还可以把结果转换为其他类型</p></blockquote><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * public interface IntFunction&lt;R&gt; &#123;</span></span><br><span class="line"><span class="comment">        * R apply(int value);</span></span><br><span class="line"><span class="comment">        * &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String[] strArray = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合-1"><a href="#集合-1" class="headerlink" title="集合"></a>集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 创建指定类型的List</span></span><br><span class="line">        <span class="comment">// List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::new));</span></span><br><span class="line">        Set&lt;String&gt; set3 = stream.collect(Collectors.toSet());</span><br><span class="line">        <span class="comment">// 创建指定类型的Set</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set4 = stream.collect(Collectors.toCollection(HashSet::new));</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，一个Stream在代码中，只能使用一次，再次使用就会报错</p><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830222023406.png" alt="image-20230830222023406"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;truman&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stream.collect(Collectors.joining(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        System.out.println(result); <span class="comment">// hello-world-truman</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream操作"><a href="#Stream操作" class="headerlink" title="Stream操作"></a>Stream操作</h2><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230830222717813.png" alt="image-20230830222717813"></p><h3 id="最终操作"><a href="#最终操作" class="headerlink" title="最终操作"></a>最终操作</h3><ul><li>iterator ， 返回迭代器对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = stream.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>forEach ，将调Stream中的每个元素，交给一个Consumer函数处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>count : 统计流中的元素数，并返回结果</p></li><li><p>max : 返回流中基于comparator所指定的比较规则，比较出的最大值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * Optional&lt;String&gt; max = stream.max(new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">        * public int compare(String o1, String o2) &#123;</span></span><br><span class="line"><span class="comment">        * return o1.compareTo(o2);</span></span><br><span class="line"><span class="comment">        * &#125;</span></span><br><span class="line"><span class="comment">        * &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Optional&lt;String&gt; max = stream.max(String::compareTo);</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>min ，返回流中基于comparator所指定的比较规则，比较出的最小值</p></li><li><p>toArray : 使用调用流中的元素，生成数组返回。</p></li><li><p>collect ，将元素收集到一个可以修改的容器中，并返回该容器</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::new));</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set3 = stream.collect(Collectors.toSet());</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set4 = stream.collect(Collectors.toCollection(HashSet::new));</span></span><br><span class="line">        <span class="comment">//String result = stream.collect(Collectors.joining(&quot;-&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">        <span class="comment">//把Stream中的元素，按照字符串长度进行分组，长度相同算是一组，并存放到同一个集合中</span></span><br><span class="line">        <span class="comment">//map的key是字符串的长度，value是同一组的数据</span></span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; map = stream.collect(Collectors.groupingBy(String::length));</span><br><span class="line">        map.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot; : &quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 : [C]</span></span><br><span class="line"><span class="comment">// 3 : [tom]</span></span><br><span class="line"><span class="comment">// 4 : [test, java]</span></span><br><span class="line"><span class="comment">// 5 : [hello, world]</span></span><br><span class="line"><span class="comment">// 10 : [javascript]</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">        <span class="comment">//把Stream中的元素，按照指定条件分割成俩组，条件返回true是一组，条件返回false是另一组</span></span><br><span class="line">        <span class="comment">//map的key是true或者false，value是对应的数据</span></span><br><span class="line">        <span class="comment">//按照数据中是否包含&quot;java&quot;字符串来进行划分</span></span><br><span class="line">        Map&lt;Boolean, List&lt;String&gt;&gt; map = stream.collect(Collectors.partitioningBy(s -&gt; s.indexOf(<span class="string">&quot;java&quot;</span>) != -<span class="number">1</span>));</span><br><span class="line">        map.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot; : &quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// false : [test, hello, world, tom, C]</span></span><br><span class="line"><span class="comment">// true : [java, javascript]</span></span><br></pre></td></tr></table></figure><ul><li>Match ，匹配操作，Stream中提供了多种匹配模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">        <span class="comment">//所有元素匹配成功才返回true 否则返回false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> stream.allMatch((s)-&gt;s.startsWith(<span class="string">&quot;j&quot;</span>));</span><br><span class="line">        System.out.println(allMatch);</span><br><span class="line">        <span class="comment">//任意一个匹配成功就返回true 否则返回false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> stream.anyMatch((s)-&gt;s.startsWith(<span class="string">&quot;j&quot;</span>));</span><br><span class="line">        System.out.println(anyMatch);</span><br><span class="line">        <span class="comment">//没有一个匹配的就返回true 否则返回false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> stream.noneMatch((s)-&gt;s.startsWith(<span class="string">&quot;j&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这些操作不能同时执行，因为一个Stream只能使用一次</p><ul><li>findFirst ，返回 Stream的第一个元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">        Optional&lt;String&gt; first = stream.findFirst();</span><br><span class="line">        System.out.println(first.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><ul><li>filter ， 过滤方法，返回满足predicate指定的条件的所有元素的一个新流</li><li>map ， 对调用流中的元素，应用Function所指定的操作，然后返回一个新流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; nameStream = Stream.of(<span class="string">&quot;lwsj&quot;</span>, <span class="string">&quot;truman&quot;</span>, <span class="string">&quot;peter&quot;</span>, <span class="string">&quot;parker&quot;</span>);</span><br><span class="line"><span class="comment">// 把字符串流转为 -&gt; length流 -&gt; List&lt;Integer&gt;</span></span><br><span class="line"><span class="comment">// map生成的是个1:1映射，每个输入元素，都按照规则转换成为另外一个元素</span></span><br><span class="line">List&lt;Integer&gt; collect = nameStream.map(s -&gt; s.length()).collect(Collectors.toList());</span><br><span class="line"><span class="keyword">for</span> (Integer integer : collect) &#123;</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map 方法可以和 reduce 方法配合使用， reduce 方法是将一组数据俩俩合并，最后得出一个结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1~10之间的数字累加</span></span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//reduce方法需要提供一个起始值(种子)</span></span><br><span class="line"><span class="comment">//然后依照运算规则,和Stream中的第一个数据进行操作，得出结果</span></span><br><span class="line"><span class="comment">//再将这个结果和Stream中的第二个数据进行操作，再得出结果，依次类推，直到得出最终结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stream.reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;mary&quot;</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"><span class="comment">//map方法中，让每一个数据加上前缀</span></span><br><span class="line"><span class="comment">//reduce方法中，将每个数据使用|拼接合并在一起</span></span><br><span class="line"><span class="comment">//reduce方法，也可以没有起始值，直接对Stream中的数据进行俩俩操作</span></span><br><span class="line">Optional&lt;String&gt; result = stream.map(str -&gt; <span class="string">&quot;Truman_&quot;</span> + str)</span><br><span class="line">    .reduce((s1, s2) -&gt; s1 + <span class="string">&quot;|&quot;</span> + s2);</span><br><span class="line">System.out.println(result.get());</span><br></pre></td></tr></table></figure><ul><li>sorted ， 排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line"><span class="comment">//默认自然排序</span></span><br><span class="line">stream.sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>);</span><br><span class="line"><span class="comment">//比较器排序，注意Lambda表达式中返回的值前加了符号 （自定义比较规则）</span></span><br><span class="line">stream.sorted((o1, o2) -&gt; - o1.compareTo(o2)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>limit ，返回 Stream 的前面 n 个元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;javap&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">stream.limit(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>skip ， 跳过前 n 个元素只要后面的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;javap&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;javascript&quot;</span>);</span><br><span class="line">stream.skip(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>distinct ，去除重复数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">stream.distinct().forEach(System.out::println)</span><br></pre></td></tr></table></figure><h3 id="静态方法-1"><a href="#静态方法-1" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>concat ，拼接两个流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; result = Stream.concat(stream1, stream2);</span><br><span class="line">result.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>Stream.generate ，通过Supplier接口,可以自己来控制数据的生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">generate</span><span class="params">(Supplier&lt;T&gt; s)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">//生成100个随机数,并输出</span></span><br><span class="line">Stream.generate(()-&gt;random.nextInt(<span class="number">100</span>))</span><br><span class="line">    .limit(<span class="number">100</span>)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"><span class="comment">//生成100个随机数,并存放到集合中</span></span><br><span class="line">List&lt;Integer&gt; list = Stream.generate(()-&gt;random.nextInt(<span class="number">100</span>))</span><br><span class="line">    .limit(<span class="number">100</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>Stream.iterate</li></ul><p><img src="/2023/08/29/expand-02-jdk8%E6%96%B0%E7%89%B9%E6%80%A7/image-20230831091821908.png" alt="image-20230831091821908"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// UnaryOperator：一元运算符</span></span><br><span class="line">        <span class="comment">// 生成一个等差数列，公差为3，从0开始获取前10个数字</span></span><br><span class="line">        Stream.iterate(<span class="number">0</span>, n -&gt; n+<span class="number">3</span>)</span><br><span class="line">                .limit(<span class="number">10</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IO流和Stream"><a href="#IO流和Stream" class="headerlink" title="IO流和Stream"></a>IO流和Stream</h2><p>在IO流中，也有方法，可以将读取到的数据转换为Stream对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="comment">//@since 1.8</span></span><br><span class="line">    <span class="keyword">public</span> Stream&lt;String&gt; <span class="title function_">lines</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src/dir/a.txt&quot;</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> br.lines() <span class="comment">//io流转为Stream</span></span><br><span class="line">                .mapToInt(String::length) <span class="comment">//每行字符串转换为它的字符长度</span></span><br><span class="line">                .max() <span class="comment">//获取最大长度的数字</span></span><br><span class="line">                .getAsInt();<span class="comment">//返回int类型的结果</span></span><br><span class="line">        System.out.println(maxLen);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><p>Stream有串行和并行两种。串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多 个线程上同时执行。</p><p>创建并行Stream的两种方式：</p><ul><li>调用串行Stream的 parallel()方法，可以将其转换并行Stream</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;truman&quot;</span>, <span class="string">&quot;peter&quot;</span>, <span class="string">&quot;parker&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; parallel = stream.parallel();</span><br></pre></td></tr></table></figure><ul><li>调用集合对象的parallelStream方法，之后获取并行Stream</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(list, <span class="string">&quot;truman&quot;</span>,<span class="string">&quot;perter&quot;</span>,<span class="string">&quot;parker&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = list.parallelStream();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">//生成200万个不同的字符串放到集合中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxx</span> <span class="operator">=</span> <span class="number">2000000</span>;</span><br><span class="line">        List&lt;UUID&gt; collect = Stream.generate(UUID::randomUUID)</span><br><span class="line">            .limit(maxx)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 串行Stream</span></span><br><span class="line">        <span class="comment">// long count = collect.stream().sorted().count(); // 822ms</span></span><br><span class="line">        <span class="comment">// 并行Stream</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> collect.parallelStream().sorted().count(); <span class="comment">// 381ms</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，在数据量较大的特定场景下，并行Stream比串行Stream的效率要高一些</p><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>立志欲坚不欲锐，成功在久不在速——宋.张孝祥 《论治体札子》💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expand-01-深入Java虚拟机</title>
      <link href="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：JVM、JDK源码、高并发、MySql优化</p></blockquote><h1 id="虚拟机概述"><a href="#虚拟机概述" class="headerlink" title="虚拟机概述"></a>虚拟机概述</h1><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><h3 id="Java-往事"><a href="#Java-往事" class="headerlink" title="Java 往事"></a>Java 往事</h3><p> <img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826134742280.png" alt="image-20230826134742280"></p><h3 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135315287.png" alt="image-20230826135315287"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135329908.png" alt="image-20230826135329908"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135619860.png" alt="image-20230826135619860"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135651540.png" alt="image-20230826135651540"></p><h3 id="两种JDK"><a href="#两种JDK" class="headerlink" title="两种JDK"></a>两种JDK</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135720684.png" alt="image-20230826135720684"></p><h2 id="JVM体系"><a href="#JVM体系" class="headerlink" title="JVM体系"></a>JVM体系</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826135936718.png" alt="image-20230826135936718"></p><ul><li>JDK（Java Development Kit）是Java语言的软件开发工具包，也是整个Java开发的核心，它包含了JRE和开发工具包</li><li>JRE（Java Runtime Environment), Java运行环境，包含了JVM和Java的核心类库（Java API）</li><li>JVM（Java virtual Machine），Java虚拟机，它是运行在操作系统之上的，它与硬件没有直接的交互</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826140354802.png" alt="image-20230826140354802"></p><blockquote><p>总结：JDK是开发人民的工具包，它包含了Java的运行环境和虚拟机，而一次编到处运行就是基于JVM</p></blockquote><h2 id="各种虚拟机"><a href="#各种虚拟机" class="headerlink" title="各种虚拟机"></a>各种虚拟机</h2><h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><ul><li>Sun Classic VM</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826141106997.png" alt="image-20230826141106997"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826141211102.png" alt="image-20230826141211102"></p><h2 id="JVM整体架构"><a href="#JVM整体架构" class="headerlink" title="JVM整体架构"></a>JVM整体架构</h2><h3 id="Java运行过程"><a href="#Java运行过程" class="headerlink" title="Java运行过程"></a>Java运行过程</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826141919138.png" alt="image-20230826141919138"></p><ul><li>源码编译：通过Java源码编译器将Java代码编译成JVM字节码（.class文件）</li><li>类加载：通过ClassLoader及其子类来完成JVM的类加载（.class文件—&gt;加载—&gt;方法区中）</li><li>类执行：字节码被装入内存，进入JVM虚拟机，被解释器解释执行</li></ul><h3 id="JVM模型"><a href="#JVM模型" class="headerlink" title="JVM模型"></a>JVM模型</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826143643440.png" alt="image-20230826143643440"></p><ul><li>类加载子系统</li></ul><p>Java虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型</p><ul><li>运行时数据区</li></ul><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。 </p><p>这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。</p><ul><li>执行引擎</li></ul><p>执行引擎用于执行JVM字节码指令，主要有两种方式，解释执行和编译执行。</p><p>区别在于，解释执行是在执行时翻译成虚拟机指令执行，而编译执行是在执行之前先进行编译再执行。 </p><p><strong>解释执行启动快，执行效率低；编译执行，启动慢，执行效率高。</strong> </p><p>垃圾回收器自动管理运行数据区的内存，将无用的内存占用进行清除，释放内存资源。</p><ul><li>本地方法库、本地库接口</li></ul><p>在JDK的底层，有一些实现需要调用本地方法完成（使用C或C++写的方法），就是通过本地库接口调用 的，比如System.currentTimeMillis()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>; </span><br></pre></td></tr></table></figure><h1 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h1><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.classfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassStruct</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;JVM&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac ClassStruct.java</span><br></pre></td></tr></table></figure><h2 id="字节码结构"><a href="#字节码结构" class="headerlink" title="字节码结构"></a>字节码结构</h2><h3 id="二进制概览"><a href="#二进制概览" class="headerlink" title="二进制概览"></a>二进制概览</h3><p>1）插件使用</p><blockquote><p>本人使用的是notepad++ 插件 Hex Editor，当然你也可以使用vsCode 中的Hex Editor这个插件</p></blockquote><ul><li>vsCode</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826150751030.png" alt="image-20230826150751030"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826150823761.png" alt="image-20230826150823761"></p><ul><li>notepad++</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826150933933.png" alt="image-20230826150933933"></p><blockquote><p>查看字节码</p></blockquote><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826151246911.png" alt="image-20230826151246911"></p><p>2）class文件时一个二进制文件，转换后以16进制展示，实际上class文件就是一张表，它由以下数据项构成，这些数据项从头到尾严格按照以下顺序排列：</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826151753339.png" alt="image-20230826151753339"></p><p>class文件只有两种数据类型：<strong>无符号数和表</strong></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826152106356.png" alt="image-20230826152106356"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826152233261.png" alt="image-20230826152233261"></p><h3 id="魔数与版本"><a href="#魔数与版本" class="headerlink" title="魔数与版本"></a>魔数与版本</h3><ul><li>魔数</li></ul><p>开头的4个字节表示的时魔数， CAFEBABA&#x3D;咖啡宝宝</p><p>魔数就是要来<strong>区分文件类型的一种标志</strong>，一般都是用文件的前几个字节来表示</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826152634131.png" alt="image-20230826152634131"></p><ul><li>版本号</li></ul><p>紧跟着魔数后面的4位是版本号，同样也是4个字节，其中前2个字节表示 <strong>副版本号</strong> ，后2个字节表示 <strong>主版本号</strong> 。</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826152850275.png" alt="image-20230826152850275"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826153229259.png" alt="image-20230826153229259"></p><p>在开发中，有时会遇到类似<strong>Unsupported major.minor version 51.0</strong>的错误，一般情况下都是JDK版本不匹 配造成的。 虽然JDK在执行代码时基本上向下兼容，但开发环境和服务器环境JDK最好一致，不要尝试这个坑。</p><p>区分和理解两个环境：编译环境、运行环境</p><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>再往下遵从相同的规律： 计数器（标注后面有多少个） + 对应个数的结构体</p><p>下面以常量池为例子：</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826154215658.png" alt="image-20230826154215658"></p><p>常量池记录了JVM内的一堆常量信息，这部分由 <strong>【2个字节计数】 + 【n个cp_info结构】</strong>组成</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826160102752.png" alt="image-20230826160102752"></p><p>常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。</p><ul><li><p>字面量比较接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值等。</p></li><li><p>符号引用属于编译原理方面的概念，包括下面三类常量：</p><ul><li>类和接口的全限定名（Fully Qualified Name）</li><li>字段的名称和描述符（Descriptor）</li><li>方法的名称和描述符</li></ul></li></ul><p>其中cp_info由多种类型：</p><ul><li>直接类型，存的就是当前值，这种像Integer、Long等长度都是确定的</li><li>引用类型，存的是指向其他位置的指针</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826161457648.png" alt="image-20230826161457648"></p><p>3）案例</p><p>下面以String为例，String是一种引用类，它会指向一个utf8类型来存储真实的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDK提供了一个工具javap，可以查看常量列表的详细内容：</span></span><br><span class="line">javap -v ClassStruct.class</span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230826161827309.png" alt="image-20230826161827309"></p><h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902092022171.png" alt="image-20230902092022171"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902092249489.png" alt="image-20230902092249489"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902092801425.png" alt="image-20230902092801425"></p><h1 id="运行数据区"><a href="#运行数据区" class="headerlink" title="运行数据区"></a>运行数据区</h1><p>字节码只是一个二进制文件存放在那里，要想在JVM里跑起来，先得有个运行的内存环境，也就是我们 所说的JVM运行时数据区。</p><ul><li>运行时数据区的位置</li></ul><p>运行时数据区是JVM中最为重要的部分，执行引擎频繁操作的就是它。类的初始化，以及对象空间的分配、垃圾的回收都是在这块区域发生的。</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902093238471.png" alt="image-20230902093238471"></p><ul><li>区域划分</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902093751450.png" alt="image-20230902093751450"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902093951164.png" alt="image-20230902093951164"></p><h3 id="溢出异常"><a href="#溢出异常" class="headerlink" title="溢出异常"></a>溢出异常</h3><p>没有！在虚拟机规范中，没有对这块区域设定内存溢出规范，也是<strong>唯一一个不会溢出的区域</strong>。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902094754700.png" alt="image-20230902094754700"></p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902094946438.png" alt="image-20230902094946438"></p><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>是线程私有的，生命周期与线程相同</li><li>它描述的是Java方法执行的当前线程的内存模型，每个方法被执行的时候，Java虚拟机都会创建一个栈帧，用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法从被调用直至执行完毕的过程，就对应着 一个栈帧在虚拟机栈中从入栈到出栈的过程</li></ul><h3 id="溢出异常-1"><a href="#溢出异常-1" class="headerlink" title="溢出异常"></a>溢出异常</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902100117244.png" alt="image-20230902100117244"></p><h3 id="案例一：进出栈顺序"><a href="#案例一：进出栈顺序" class="headerlink" title="案例一：进出栈顺序"></a>案例一：进出栈顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序模拟进栈、出栈过程</span></span><br><span class="line"><span class="comment"> * 先进后出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackInAndOut</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入方法A&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法二;调用方法一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        A();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入方法B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入Main方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进入方法A</span></span><br><span class="line"><span class="comment">// 进入方法B</span></span><br><span class="line"><span class="comment">// 进入Main方法</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902100747181.png" alt="image-20230902100747181"></p><h3 id="案例二：栈深度溢出"><a href="#案例二：栈深度溢出" class="headerlink" title="案例二：栈深度溢出"></a>案例二：栈深度溢出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过一个程序模拟线程请求的栈深度大于虚拟机所允许的栈深度；</span></span><br><span class="line"><span class="comment"> * 抛出StackOverflowError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOverFlow</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，循环嵌套自己</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        B();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入方法B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入Main方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902100905281.png" alt="image-20230902100905281"></p><h3 id="案例三：栈内存溢出"><a href="#案例三：栈内存溢出" class="headerlink" title="案例三：栈内存溢出"></a>案例三：栈内存溢出</h3><p>试试就试试~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 栈内存溢出，注意！很危险，谨慎执行</span></span><br><span class="line"><span class="comment">* 执行时可能会卡死系统，直到内存耗尽</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOutOfMem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>本地方法栈的功能和特点类似于虚拟机栈，均具有线程隔离的特点</li><li>不同的是，本地方法栈服务的对象是JVM执行的native方法，而虚拟机栈服务的是JVM执行的Java方法</li><li>虚拟机规范里对这块所用的语言、数据结构、没有强制规定，虚拟机可以自由实现它</li><li>甚至，HotSpot把它和虚拟机合并成了1个</li></ul><h3 id="溢出异常-2"><a href="#溢出异常-2" class="headerlink" title="溢出异常"></a>溢出异常</h3><p>和虚拟机栈一样，也是两个： </p><ul><li>如果创建的栈的深度大于虚拟机允许的深度，抛出 StackOverFlowError。 </li><li>内存申请不够的时候，抛出 OutOfMemoryError。</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Java堆是垃圾收集器管理的内存区域，因此它也被称作“GC堆”，这就是我们做JVM调优的重点区域。</p><h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902101748102.png" alt="image-20230902101748102"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902102726253.png" alt="image-20230902102726253"></p><h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902103152472.png" alt="image-20230902103152472"></p><p><font color="#d12920">需要特别说明的是：Metaspace所占用的内存空间不是在虚拟机内部，而是在本地内存空间中，这也是与1.7的永久代最大的区别</font></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902103601431.png" alt="image-20230902103601431"></p><h3 id="溢出异常-3"><a href="#溢出异常-3" class="headerlink" title="溢出异常"></a>溢出异常</h3><p>内存不足时，抛出 <strong>java.lang.OutOfMemoryError: Java heap space</strong></p><h3 id="案例：堆溢出"><a href="#案例：堆溢出" class="headerlink" title="案例：堆溢出"></a>案例：堆溢出</h3><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆溢出，Out Of Memory 测试这个只需要第三个和第四个 参数设计就可以哈！</span></span><br><span class="line"><span class="comment"> *   -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> *   -XX:HeapDumpPath=D:\</span></span><br><span class="line"><span class="comment"> *   下面两个参数是设置堆内存的初始值和最大值的</span></span><br><span class="line"><span class="comment"> *   -Xms20m   </span></span><br><span class="line"><span class="comment"> *   -Xmx20m</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    Byte[] bytes = <span class="keyword">new</span> <span class="title class_">Byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;HeapOOM&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;HeapOOM&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(++i);</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">HeapOOM</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><p>注意启动时，指定一下堆的大小：-Xms20m -Xmx20m</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902104554492.png" alt="image-20230902104554492"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902104713028.png" alt="image-20230902104713028"></p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902105124918.png" alt="image-20230902105124918"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902105350239.png" alt="image-20230902105350239"></p><h3 id="溢出异常-4"><a href="#溢出异常-4" class="headerlink" title="溢出异常"></a>溢出异常</h3><ul><li>1.6：OutOfMemoryError: PermGen space</li><li>1.8：OutOfMemoryError: Metaspace</li></ul><h3 id="案例一：1-6方法区溢出"><a href="#案例一：1-6方法区溢出" class="headerlink" title="案例一：1.6方法区溢出"></a>案例一：1.6方法区溢出</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902105654461.png" alt="image-20230902105654461"></p><p>在1.6里，字符串常量是运行时常量池的一部分，归属于方法区，放在了永久代里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果字符串常量池里有这个字符串，直接返回引用，不再额外添加</span></span><br><span class="line"><span class="comment">如果没有，加进去，返回新创建的引用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String.intern()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Explain: 测试1.6版本的jvm的方法区异常</span></span><br><span class="line"><span class="comment"> * -Xms10m 初始堆大小</span></span><br><span class="line"><span class="comment"> * -Xmx10m 最大堆大小</span></span><br><span class="line"><span class="comment"> * -XX:PermSize=6M  方法区初始大小</span></span><br><span class="line"><span class="comment"> * -XX:MaxPermSize=6m 最大方法区大小</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 修改pom文件里的版本为1.6,jvm启动参数里改为1.6 (我没有1.6.。。。。。。。。。。。。。。。。)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(++i);</span><br><span class="line">            list.add(String.valueOf(i).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902110503335.png" alt="image-20230902110503335"></p><h3 id="案例二：1-8方法区溢出"><a href="#案例二：1-8方法区溢出" class="headerlink" title="案例二：1.8方法区溢出"></a>案例二：1.8方法区溢出</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902111113252.png" alt="image-20230902111113252"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所以不论配置下面那个参数都不生效，因为字符串常量池根本不在元空间中。</span></span><br><span class="line">-XX:PermSize=6M -XX:MaxPermSize=6M</span><br><span class="line">-XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=10M</span><br></pre></td></tr></table></figure><ul><li>那如何才能让元空间溢出呢？</li></ul><p>既然字符串常量池不在这里，那就换其他的，类的基本信息总在元空间吧？</p><p>我们来试一下 cglib是一个强大的、高性能、高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口，可以在运行时生成大量的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Explain: jdk1.8以后舍弃了方法区,改为了元空间(Metaspace)</span></span><br><span class="line"><span class="comment"> * 元空间不占用堆空间，使用的是直接内存，也就是我们服务器的物理内存</span></span><br><span class="line"><span class="comment"> * -Xms10m</span></span><br><span class="line"><span class="comment"> * -Xmx10m</span></span><br><span class="line"><span class="comment"> * -XX:+PrintGCDetails 打印垃圾回收信息</span></span><br><span class="line"><span class="comment"> * -XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=10M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MetaspaceSize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">            enhancer.setSuperclass(MetaspaceSize.class);</span><br><span class="line">            enhancer.setUseCache(<span class="literal">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects,</span></span><br><span class="line"><span class="params">                                        MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invokeSuper(objects,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902112027290.png" alt="image-20230902112027290"></p><h2 id="一个案例"><a href="#一个案例" class="headerlink" title="一个案例"></a>一个案例</h2><p>假设有个Bootstrap的类，执行main方法，在JVM里，它从class文件到跑起来，大致经过如下步骤：</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902112423080.png" alt="image-20230902112423080"></p><ul><li>首先JVM会将这个Bootstrap.class信息加载到内存中的方法区</li><li>接着，主线程开辟一块内存空间，准备好程序计数器pc、虚拟机栈、本地方法栈</li><li>然后，JVM会在Heap堆上位Bootstrap创建一个<code>Class&lt;Bootstrap&gt;</code>的类实例</li><li>JVM开始执行main方法，这时在虚拟机栈里为main方法创建一个栈帧</li><li>main方法在执行的过程之中，调用了greeting方法，则JVM会为greeting方法再创建一个栈帧，推到虚拟机栈顶，再main的上面，每次只有一个栈帧处于活动状态，当前为greeting</li><li>当greeting方法运行完成后，则greeting方法出栈，当前活动帧指向main，方法继续往下运行</li></ul><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902113047040.png" alt="image-20230902113047040"></p><ul><li>独享&#x2F;共享的角度：<ul><li>独享：程序计数器、虚拟机栈、本地方法栈</li><li>共享：堆、方法区</li></ul></li><li>error的角度：<ul><li>程序计数器：不会溢出，比较特殊，其他都会</li><li>两个栈：可能会发生两种溢出<ul><li>深度超了报：StackOverflowError</li><li>空间不足报：OutOfMemoryError</li></ul></li><li>堆：只会再空间不足时，报：OutOfMemoryError，会提示heapSpace</li><li>方法区：空间不足时，报：OutOfMemoryError<ul><li>1.6 是 permspace</li><li>1.8 是 meterspace</li></ul></li></ul></li><li>归属<ul><li>计数器、虚拟机栈、本地方法中：线程创建必须配套申请，真正的物理空间</li><li>堆：真正的物理空间，但是内部结构的划分有变动</li><li>方法区：最没归属感的一块，原因就是它是一个逻辑概念。1.6被放在了堆的永久代，1.8被拆分， <strong>一部分在元空间，一部分被放在了堆里（方法区的运行时常量池里面的类对象，包括字符串常量）</strong></li><li>直接内存：这块实际上不属于运行时数据区的一部分，而是直接操作物理内存。在nio操作里 DirectByteBuffer类可以对native操作，避免流在堆内外的拷贝。</li></ul></li></ul><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902114547874.png" alt="image-20230902114547874"></p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902114849883.png" alt="image-20230902114849883"></p><p>注意： </p><ul><li>加载的字节码来源，不一定非得是class文件，可以是符合字节码规范的任意地方，甚至二进制流等。</li><li>从字节码到内存，是由类加载器（ClassLoader）完成的</li></ul><h3 id="系统类加载器"><a href="#系统类加载器" class="headerlink" title="系统类加载器"></a>系统类加载器</h3><ul><li>Bootstrap</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902115643014.png" alt="image-20230902115643014"></p><ul><li>ExtClassLoader</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902115751915-16936273690881.png" alt="image-20230902115751915"></p><ul><li>AppClassLoader</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902120419784.png" alt="image-20230902120419784"></p><ul><li>Code</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Explain: 查看各个加载器,如：BootstrapClassLoader,ExtClassLoader,ApplicationClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClassLoaders</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;systemClassLoader:&quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;systemClassLoader-parent:&quot;</span> + parent);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] bootstrap = System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        String[] ext = System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        String[] app = System.getProperty(<span class="string">&quot;java.class.path&quot;</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;bootstrap:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : bootstrap) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ext:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : ext) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//app是默认加载器，注意启动控制台的 -classpath 选项</span></span><br><span class="line">        System.out.println(<span class="string">&quot;app:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : app) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>除了上面系统提供的3种类加载器，JVM允许自己定义类加载器，典型的在Tomcat上：</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902125829094.png" alt="image-20230902125829094"></p><h3 id="双亲委派-重点"><a href="#双亲委派-重点" class="headerlink" title="双亲委派(重点)"></a>双亲委派(重点)</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902130032639.png" alt="image-20230902130032639"></p><p>类加载器会优先调父类的load方法，如果父类能加载，直接用父类的，否则最 后一步才是自己尝试加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 首先，检测是否已经加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有加载，开始按如下规则执行：</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//重点！父加载器不为空则调用父加载器的loadClass</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//父加载器为空则调用Bootstrap Classloader</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">//父加载器没有找到，则调用findclass，自己查找并加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902130556388.png" alt="image-20230902130556388"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>加载完成后，class里定义的类结构就进入了内存的方法区。 接下来，验证是连接阶段的第一步。</p><p>实际上，验证和上面的加载是<strong>交互进行</strong>的（比如class文件格式验证）。 </p><p>之所以把验证放在加载的后面，是因为除了基本的class文件格式，还需要其他很多验证，我们逐个来看：</p><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902130837215.png" alt="image-20230902130837215"></p><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902130939891.png" alt="image-20230902130939891"></p><h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902131054699.png" alt="image-20230902131054699"></p><h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902131203646.png" alt="image-20230902131203646"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>注意是类变量，也就是类里的静态变量，而不是new的那些实例变量，new的在下面的初始化阶段</p><ul><li>类变量 &#x3D; 静态变量</li><li>实例变量 &#x3D; 实例化new出来的那些</li></ul><h3 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h3><p>理论上这些值都在方法区里，但是注意，方法区本身就是一个逻辑概念。 </p><ul><li>1.6里，在永久代 </li><li>1.8以后，静态类变量如果是一个对象，其实它在堆里</li></ul><h3 id="初始化值"><a href="#初始化值" class="headerlink" title="初始化值"></a>初始化值</h3><p>注意：即使是static变量，它在这个阶段初始化进内存的依然是它的初始值，而不是你想要什么就是什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通类变量：在准备阶段为它开了内存空间，但是它的value是int的初始值，也就是 0！</span></span><br><span class="line"><span class="comment">//而真正的123赋值，是在类构造器，也就是下面的初始化阶段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">//final修饰的类变量，编译成字节码后，是一个ConstantValue类型</span></span><br><span class="line"><span class="comment">//这种类型，在准备阶段，直接给定值123，后期也没有二次初始化一说</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902142447933.png" alt="image-20230902142447933"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230902142840888.png" alt="image-20230902142840888"></p><h3 id="两个初始化"><a href="#两个初始化" class="headerlink" title="两个初始化"></a>两个初始化</h3><ul><li>类变量与实例变量的区分</li></ul><p>这里所说的初始化是一个class类加载到内存的过程，所谓的初始化值是类里定义的类变量，也就是静态变量</p><p>这个初始化要和new一个类区分开来，new的是实例变量，是在执行阶段才创建的</p><ul><li>实例变量创建的过程（new）<ul><li>在方法区中找到对应类型的类信息</li><li>在当前方法栈帧的本地变量表中放置一个reference指针</li><li>在堆中开辟一块空间，放这个对象的实例</li><li>将指针指向堆里对象的地址</li></ul></li></ul><h1 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h1><h2 id="对象创建-1"><a href="#对象创建-1" class="headerlink" title="对象创建"></a>对象创建</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>从你new一个对象开始，发生了什么？ </p><p>遇到new指令，JVM首先要做的事是检查有没有这个类，有的话，加载它！</p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>类加载检查通过后，就要给新对象分配内存。 </p><p>因为一个类型确定后，它内部定义了哪些结构哪些值，所需要的内存空间也就确定了。</p><ul><li>指针碰撞（Bump The Pointer）</li></ul><p>这种分配前提是内存中有整片连续的空间，用的在一边，空闲的在另一边，一个指针指向分界线。</p><p>需要多少指针往2空闲那边移动多少，直接划分出来一段，给当前对象。</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230903100520367.png" alt="image-20230903100520367"></p><ul><li>空闲列表（Free List）</li></ul><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230903100709579.png" alt="image-20230903100709579"></p><ul><li>并发性</li></ul><p>无论指针移动还是空闲列表的同一个指针空间，在并发分配的情况下会不会有问题？ </p><p>确实有并发问题，那JVM是如何解决的呢？</p><p>方式一：CAS原子操作+失败重试</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230903101634891.png" alt="image-20230903101634891"></p><p>方式二：本地线程分配缓冲（TLAB）</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230903103716311.png" alt="image-20230903103716311"></p><p>对象创建时内存分配的流程：</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230903112614115.png" alt="image-20230903112614115"></p><ul><li>内存区域<ul><li>栈上分配使用的是栈来进行对象内存的分配</li><li>TLAB分配使用的是Eden区域进行内存分配，实际上还是属于堆内存</li></ul></li><li>优先级<ul><li>栈上分配优先于TLAB分配进行，逃逸分析中若可进行栈上分配优化，会优先进行对象栈上直接分配内存</li><li>当无法进行栈上直接分配时，则会进行TLAB分配</li></ul></li></ul><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p>对象在堆上的布局，可以分为三个部分：对象头、实例数据、对齐填充。</p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904084052863.png" alt="image-20230904084052863"></p><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904084426080.png" alt="image-20230904084426080"></p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>一般分为两部分，Mark Word 和 类型指针（HotSpot）</p><ul><li>Mark Work, 官方叫法，其实就是存储对象自己运行时的数据</li></ul><p>如哈希码、GC分代年龄、锁状态标记、线程持有的锁、偏向的线程id (具体的分类在下面)</p><ul><li>类型指针</li></ul><p>指向当前对象的类型，也就是方法区里，类信息的地址。（当然这里不是绝对的，HotSpot这么设计的。）</p><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904085034371.png" alt="image-20230904085034371"></p><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904085247007.png" alt="image-20230904085247007"></p><h2 id="对象的访问"><a href="#对象的访问" class="headerlink" title="对象的访问"></a>对象的访问</h2><p>我们的程序运行时，每一个方法相关的变量信息都在栈里，那么怎么找到这个对象呢？(<strong>栈中变量引用如何指向堆中对象</strong>)</p><h3 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904090112323.png" alt="image-20230904090112323"></p><p>栈指针指向堆里的一个句柄的地址，这个句柄再定义两指针分别指向类型和实例</p><p>很显然，拦截回收移动对象的话只需要改句柄即可，不会波及到栈，但是多了一次寻址操作。</p><h3 id="直接地址"><a href="#直接地址" class="headerlink" title="直接地址"></a>直接地址</h3><p><img src="/2023/08/26/expand-01-%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230904090400597.png" alt="image-20230904090400597"></p><p>很显然，垃圾回收移动对象要改栈里的地址值，但是它减少了一次寻址操作。</p><blockquote><p>备注：HotSpot使用的是直接地址方式</p></blockquote><h1 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h1><h2 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h3 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h3><h3 id="X参数"><a href="#X参数" class="headerlink" title="-X参数"></a>-X参数</h3><h3 id="XX参数"><a href="#XX参数" class="headerlink" title="-XX参数"></a>-XX参数</h3><h3 id="参数查询"><a href="#参数查询" class="headerlink" title="参数查询"></a>参数查询</h3><h2 id="垃圾回收概述"><a href="#垃圾回收概述" class="headerlink" title="垃圾回收概述"></a>垃圾回收概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>实际上，垃圾回收并不是Java首创的，垃圾收集的历史远比Java语言本身还要久。 </p><p>最早使用垃圾回收功能的语言是<strong>Lisp</strong>，于1960年诞生于麻省理工学院。</p><h2 id="回收事件三要素"><a href="#回收事件三要素" class="headerlink" title="回收事件三要素"></a>回收事件三要素</h2><h3 id="在哪收（地点）"><a href="#在哪收（地点）" class="headerlink" title="在哪收（地点）"></a>在哪收（地点）</h3><h3 id="什么时候收（时间）"><a href="#什么时候收（时间）" class="headerlink" title="什么时候收（时间）"></a>什么时候收（时间）</h3><h3 id="回收谁（人物）"><a href="#回收谁（人物）" class="headerlink" title="回收谁（人物）"></a>回收谁（人物）</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><h2 id="回收算法（策略）"><a href="#回收算法（策略）" class="headerlink" title="回收算法（策略）"></a>回收算法（策略）</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><h3 id="标记复制算法"><a href="#标记复制算法" class="headerlink" title="标记复制算法"></a>标记复制算法</h3><h3 id="分代"><a href="#分代" class="headerlink" title="分代"></a>分代</h3><h2 id="回收器（执行者）"><a href="#回收器（执行者）" class="headerlink" title="回收器（执行者）"></a>回收器（执行者）</h2><h3 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h3><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><h3 id="并发-CMS"><a href="#并发-CMS" class="headerlink" title="并发 - CMS"></a>并发 - CMS</h3><h3 id="并发-G1"><a href="#并发-G1" class="headerlink" title="并发 - G1"></a>并发 - G1</h3><h3 id="并发-ZGC（了解）"><a href="#并发-ZGC（了解）" class="headerlink" title="并发 - ZGC（了解）"></a>并发 - ZGC（了解）</h3><h3 id="归纳总结-1"><a href="#归纳总结-1" class="headerlink" title="归纳总结"></a>归纳总结</h3><h1 id="调优实战"><a href="#调优实战" class="headerlink" title="调优实战"></a>调优实战</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h2 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h3 id="执行日志"><a href="#执行日志" class="headerlink" title="执行日志"></a>执行日志</h3><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><h2 id="初步调优"><a href="#初步调优" class="headerlink" title="初步调优"></a>初步调优</h2><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><h3 id="二次分析"><a href="#二次分析" class="headerlink" title="二次分析"></a>二次分析</h3><h2 id="二次调优"><a href="#二次调优" class="headerlink" title="二次调优"></a>二次调优</h2><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><h4 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h4><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-类加载-反射</title>
      <link href="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java高级编程，灵活运用反射，线程，IO和网络等进行编程</p></blockquote><h1 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h1><blockquote><p>温故而知新：<a href="https://www.lzwgxust.top/post/190b6531.html?highlight=java">01-Java基础入门</a></p></blockquote><h1 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h1><blockquote><p>JVM(Java Virtual Machine) 是Java平台的核心组件，它提供了跨平台的能力，使得Java程序能够在不同的操作系统上运行。JDK中的<strong>JVM负责解释和执行Java字节码文件</strong>，同时还提供了<strong>内存管理、垃圾回收</strong>等功能，使得Java程序能够高效、安全地运行。</p><p>JVM内存结构</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824185021385.png" alt="image-20230824185021385"></p><ul><li><strong>类加载器（Class Loader）</strong>：类加载器负责加载Java字节码文件（.class文件），并将其转换为可执行的代码。它将类加载到JVM的运行时数据区域中，并解析类的依赖关系</li><li><strong>运行时数据区（Runtime Data Area）</strong>：运行时数据区域时JVM用于存储程序运行时的数据的区域。它包括以下几个部分：<ul><li>方法区（Method Area）：用于存储类的结构信息、常量池、静态变量等</li><li>堆（Heap）：用于存储对象实例和数组内存</li><li>栈（Stack）：也叫做虚拟机栈，方法调用执行、局部变量所需内存由它提供</li><li>本地方法栈（Native Method Stack）：本地方法栈与虚拟机栈所发挥的作用非常相似，其区别是虚拟机栈为虚拟机栈是为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务</li><li>程序计数器（Program Counter）：用于存储当前线程执行的字节码指令的地址</li></ul></li><li><strong>执行引擎（Execution Engine）</strong>：执行引擎负责执行编译后的字节码指令，将其 转换为机器码并执行。它包括<strong>解释器和即时编译器（Just-In-Time Compiler， JIT）</strong>两个部分，用于提高程序的执行效率（其具体工作原理，下一章节具体讨论）</li><li><strong>垃圾回收器（Garbage Collector）</strong>：垃圾回收器负责自动回收不在使用的对象和释放内存空间。它通过标记-清除、复制、标记-整理等算法来进行垃圾回收</li><li>**本地方法接口（Native Method Interface)**：本地方法接口允许Java程序调用本地方法 即使用其他语言（C、C++）编写的代码</li></ul></blockquote><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><blockquote><p>JVM架构及执行流程如下：</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824190709549.png" alt="image-20230824190709549"></p><ul><li>解释执行</li></ul><p>class文件内容，需要交给JVM进行解释执行，简单理解就是JVM解释一行就 执行一行代码。所以如果Java代码全是这样的运行方式的话，效率会稍低一 些。</p><ul><li>JIT（Just In Time）即使编译</li></ul><p>执行代码的另一种方式，JVM可以把Java中的 <strong>热点代码</strong> 直接编译成计算机可 以运行的二进制指令，这样后续再调用这个热点代码的时候，就可以直接运 行编译好的指令，大大提高运行效率。</p></blockquote><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><blockquote><p>类加载器可以将编译得到的 <strong>.class文件</strong> （<strong>存储在磁盘上的物理文件</strong>）加载在 到<strong>内存</strong>中。</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824191049535.png" alt="image-20230824191049535"></p></blockquote><h2 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h2><blockquote><p><font color="#d12920">当第一次使用到某个类时，该类的class文件会被加载到内存方法区。</font></p><ul><li>使用 <strong>java</strong> 命令来运行某个主类（main方法）</li><li>创建类的实例（对象）</li><li>调用类的<strong>static方法</strong></li><li>访问类或接口的<strong>static成员</strong>，或者为该类static成员赋值</li><li>初始化某个类时，其父类会被自动加载</li><li>使用反射方式来获取类的字节码对象时，会加载某个类或接口的<strong>class文件</strong></li></ul></blockquote><h2 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h2><blockquote><p>类的加载过程：加载 、验证、准备、解析、初始化</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824191717374.png" alt="image-20230824191717374"></p><p>具体加载步骤：</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824191929104.png" alt="image-20230824191929104"></p><ul><li>加载 Loading</li></ul><p>将类的字节码文件加载到内存方法区中。这个阶段由类加载器完成，类加载器 根据类的全限定名来定位并读取类的字节码文件，然后将字节码转换为JVM内部 的数据结构。</p><ul><li><p>链接 Linking</p><ul><li>验证 Verification</li></ul><p>对加载的字节码进行验证，确保字节码的结构和语义是正确的（确保class文 件中的信息符合虚拟机规范，有没有安全隐患）。</p><p>验证过程包括文件格式验证、元数据验证、字节码验证和符号引用验证等， 以确保字节码的安全性和正确性。</p><ul><li>准备 Preparation</li></ul><p>为类的 <strong>static静态变量</strong>分配内存，并设置默认初始值</p><p>这个阶段会在方法区中为类的静态变量分配内存空间，并设置默认<strong>初始值 （如0、0.0、null等）</strong>，但不会执行静态变量的初始化代码。</p><ul><li>解析 Resolution</li></ul><p>将类的符合引用解析为直接引用</p><p>在解析阶段，将<strong>符号引用（如类名、方法名、字段名）</strong>转换为<strong>直接引用（如直接指向方法、字段的指针或偏移量）</strong>，以便于后续的访问和调用</p></li><li><p>初始化 Initialization</p></li></ul><p>对类进行初始化，包括执行<strong>静态变量</strong>的赋值和<strong>静态代码块</strong>的初始化。</p><p>在此阶段，会按照程序的顺序执行类的静态变量赋值和静态代码块中的初始化 代码，完成类的初始化工作。</p><p><strong>注意事项：</strong></p><p><font color="skyblue">类加载过程时按需进行的，即在首次使用类时才会触发类的加载和初始化。此外，类加载过程是由Java虚拟机的类加载器负责完成的，不同的类加载器可能有不同的加载策略和行为。</font></p><p><strong>类加载小结：</strong></p><p><font color="skyblue">JVM的类加载过程包括加载、验证、准备、解析和初始化等阶段，它们共同完成将Java类加载内存中，并为类的静态变量分配内存、解析符号引用、执行静态代码块等操作，最终使得类可以被正确的使用和执行。</font></p></blockquote><h2 id="加载器分类"><a href="#加载器分类" class="headerlink" title="加载器分类"></a>加载器分类</h2><blockquote><p>JDK8类加载器可以分为以下四类：</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824194139242.png" alt="image-20230824194139242"></p><ul><li>Bootstrap ClassLoader 根类加载器</li></ul><p>也被称为引导类加载器，通常表示为null。</p><p>它是Java虚拟机的一部分，负责加载Java核心类库，比如<strong>rt.jar</strong>等。根加载器是所有类加载器的顶级加载器，它不是一个Java对象，而是由JVM实现的一部分</p><p>类一般存在**%JAVA_HOME%\jre\lib\rt.jar**中</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824194559895.png" alt="image-20230824194559895"></p><ul><li><strong>Extension ClassLoader 扩展类加载器</strong></li></ul><p>负责加载Java的扩展类库，也可以通过 <strong>java.ext.dirs</strong> 系统属性来指定扩 展类库的路径</p><p>这些类一般存在 <strong>%JAVA_HOME%\jre\lib\ext\</strong> 下的jar包中</p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824194841038.png" alt="image-20230824194841038"></p><ul><li><strong>System ClassLoader 系统类加载器</strong></li></ul><p>它负责加载应用程序的类，包括<strong>用户自定义的类和第三方库</strong>等。它是大多数Java应用程序默认的类加载器。</p><p>系统类加载器的<strong>搜索路径</strong>包括<strong>当前工作目录</strong>和<strong>CLASSPATH环境变量</strong>指定的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test034_ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">// 获取系统类加载器的父加载器 -- 扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">exClassLoader</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        <span class="comment">// 获取平台类加载器的父加载器 -- 根类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">bootClassLoader</span> <span class="operator">=</span> exClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;systemClassLoader = &quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;exClassLoader = &quot;</span> + exClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;bootClassLoader = &quot;</span> + bootClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// systemClassLoader = sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">// exClassLoader = sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class="line"><span class="comment">// bootClassLoader = null</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h2><blockquote><p><strong>双亲委派机制</strong>是Java类加载器的一种工作机制，通过层级加载和委托父类加载器来加载类，确保类的唯一性、安全性、和模块化。</p><ul><li>问题引入</li></ul><p>用户自定义的 <strong>java.lang.String</strong> ，在测试类main方法中使用该类，思考： 类加载器到底加载是哪个类，是JDK提供的String，还是用户自定义的String？（代码自己写哈~）</p><p><font color="#d12920">结果：最终加载的类是JDK提供的 java.lang.String</font>    为什么？<strong>答案是双亲委托机制！</strong></p><ul><li>双亲委派机制</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824201551149.png" alt="image-20230824201551149"></p><p>一开始看图有点难懂：听我细细道来，有这样一个场景 ：孔融得到一个梨，他先问自己的父亲吃不吃？他的父亲又问一下他的爷爷吃不吃？，他的爷爷因为牙疼吃不了，就把梨让给了他爸爸吃，他的爸爸因为刚刚已经吃饱了，于是又把梨给了他吃。现在孔融自己决定吃不吃。</p><p>现在回到真实场景：现在来了一个用户自定义类（java.lang.String） –&gt; Application(往上抛给) —&gt; Extension(继续往上抛) –&gt; Bootstrap(看看自己有没有) 有的话自己加载，没有的话放行下—&gt; Extension(看看自己有没有)有的话自己加载，没有的话放行 –&gt; Application(有加载)，没有—&gt; ClassNotFondException异常。</p><p><strong>注意：这里的有没有指的是 比如在Bootstrap 的 rt.jar 的一堆.class 有没有对应的类，像这个传进来的java.lang.String因为在 boostrap中有对应的类了，所以直接加载，就不会再去加载用户自己写的java.lang.String类了</strong></p></blockquote><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230824202235428.png" alt="image-20230824202235428"></p><p>案例展示：</p><p>准备一个jdbc的配置文件 <strong>db.properties</strong> ，借助类加载器中方法解析，遍 历输出其配置内容。</p><ul><li>db.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc://mysql:3306/db01?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test036_LoadFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">// 2、利用加载器区加载一个指定的文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> systemClassLoader.getResourceAsStream(<span class="string">&quot;com/briup/chap13/test/db.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、实例化Properties对象，解析配置文件内容并输出</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">// 配置文件内容遍历</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entries = properties.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entries) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) entry.getKey();</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) entry.getValue();</span><br><span class="line">                System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4、关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230825085048419.png" alt="image-20230825085048419"></p><p><font color="#d12920">注意事项：getResourceAsStream(String path)，参数path是相对路径，相对当前测试类class文件所在的目录！</font></p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230825085338618.png" alt="image-20230825085338618"></p></blockquote><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><blockquote><p>Java反射机制是指在Java程序在运行状态下，<strong>动态地获取、检查和操作类的信息和对象的能力。</strong></p><p>反射机制作用：</p><ul><li>对于任意一个类，都能够知道这个类的所有属性和方法</li><li>对于任意一个对象，都能够调用它的任意一个方法和属性</li></ul><p>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><p>当一个类被使用的时候，类加载器会把该类的字节码文件装入内存（类加载），同时在对空间创建一个 <strong>字节码对象（Class类对象）</strong>，这个对象是Java反射机制的核心，它包含了一个类运行时信息。</p></blockquote><h2 id="反射核心类"><a href="#反射核心类" class="headerlink" title="反射核心类"></a>反射核心类</h2><blockquote><p>在Java中，<strong>Class</strong>类是一个重要的核心类，它用于表示一个类或接口的运行时信息。每个类在Java虚拟机种都有一个对应的<strong>Class</strong>对象，可以通过该对象<strong>获取类的构造函数、方法、属性等信息，并且可以进行实例化对象、方法调用和数据成员访问等操作。</strong></p><p>Class核心类JavaSE源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="comment">//字节码类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Class</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable,</span><br><span class="line">GenericDeclaration,</span><br><span class="line">Type,</span><br><span class="line">AnnotatedElement &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//获取类的所有构造方法</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException &#123;&#125;</span><br><span class="line">    <span class="comment">//获取类的所有数据成员</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException &#123;&#125;</span><br><span class="line">    <span class="comment">//获取类的所有成员方法</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java反射中， <strong>Class 、 Constructor 、 Method 和 Field</strong> 是表示类的不同部分的关键类。它们提供了访问和操作类的构造函数、方法和字段的方法。</p><ul><li>Class类：表示一个类的运行时信息。通过Class类可以获取类的构造函数、方法和字段等信息。可以使用<strong>Class.forName()<strong>方法获取一个类的</strong>Class</strong>对象，也可以通过对象的<strong>getClass()</strong> 方法获取其对应的Class对象。<font color="#d12920">（其实是.class的一个镜像）</font></li><li><strong>Constructor</strong>类：表示一个类的构造函数。通过<strong>Constructor</strong>类可以创建类的实例。可以使用Class对象的<strong>getConstructors()</strong> 或 <strong>getConstructor()</strong> 方法获取构造函数的对象。</li><li><strong>Method</strong> 类：表示一个类的方法。通过 <strong>Method</strong> 类可以调用类的方法。可以使用 <strong>Class</strong> 对象的 <strong>getMethods</strong>() 或 <strong>getMethod</strong>() 方法获取方法的对象。</li><li><strong>Field</strong> 类：表示一个类的字段。通过 <strong>Field</strong> 类可以访问和修改类的字段的 值。可以使用 <strong>Class</strong> 对象的 <strong>getFields</strong>() 或 <strong>getField</strong>() 方法获取字段的 对象。</li></ul></blockquote><h2 id="字节码对象"><a href="#字节码对象" class="headerlink" title="字节码对象"></a>字节码对象</h2><blockquote><p>JVM虚拟机对类进行加载时，会在堆空间创建一个 <strong>字节码对象（Class类对象）</strong></p><p>简单来说：<font color="#d12920">如果要用反射机制，则必须先获取类的字节码对象</font></p><p>获取<strong>Class</strong>对象方式：</p><ul><li>使用类字面常量：<strong>类名.class</strong></li><li>Object类中方法：<strong>对象.getClass()</strong>  public final native Class&lt;?&gt; getClass();</li><li>借助Class类中方法：<strong>Class.forName(“类的全包名”)</strong> public static Class&lt;?&gt; forName(String className);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test043_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt; aClass = s.getClass();</span><br><span class="line">        Class&lt;String&gt; aClass1 = String.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;aClass = &quot;</span> + aClass); <span class="comment">// aClass = class java.lang.String</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aClass1 = &quot;</span> + aClass1); <span class="comment">// aClass1 = class java.lang.String</span></span><br><span class="line">        System.out.println(aClass == aClass1); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用3种不同方式，获取自定义类的字节码对象，并验证是否唯一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test043_Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; aClass = stu.getClass();</span><br><span class="line">        Class&lt;?&gt; aClass1 = Class.forName(<span class="string">&quot;com.briup.chap13.pojo.Student&quot;</span>);</span><br><span class="line">        Class&lt;Student&gt; aClass2 = Student.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;aClass = &quot;</span> + aClass);</span><br><span class="line">        System.out.println(<span class="string">&quot;aClass == aClass1 : &quot;</span> + (aClass == aClass1));</span><br><span class="line">        System.out.println(<span class="string">&quot;aClass2 == aClass1 : &quot;</span> + (aClass2 == aClass1));</span><br><span class="line">        System.out.println(<span class="string">&quot;aClass == aClass2 : &quot;</span> + (aClass == aClass2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aClass = class com.briup.chap13.pojo.Student</span></span><br><span class="line"><span class="comment">// aClass == aClass1 : true</span></span><br><span class="line"><span class="comment">// aClass2 == aClass1 : true</span></span><br><span class="line"><span class="comment">// aClass == aClass2 : true</span></span><br></pre></td></tr></table></figure><p><font color="#d12920">一个字节码对象，有且只有一个</font></p><p><strong>补充：其他类型字节码对象获取</strong></p><ul><li>基本数据类型获取字节码对象固定格式：数据类型.class</li><li>数据类型获取格式：数据类型[].class; 数组名.getClass();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 基本数据类型</span></span><br><span class="line">    Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">    System.out.println(integerClass); <span class="comment">// int</span></span><br><span class="line">    System.out.println(<span class="type">double</span>.class); <span class="comment">// double</span></span><br><span class="line">    <span class="comment">// 数据类型</span></span><br><span class="line">    Class&lt;<span class="type">int</span>[]&gt; aClass = <span class="type">int</span>[].class;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">int</span>[]&gt; aClass1 = arr.getClass();</span><br><span class="line">    System.out.println(<span class="string">&quot;aClass = &quot;</span> + aClass); <span class="comment">// class [I</span></span><br><span class="line">    System.out.println(<span class="string">&quot;aClass1 = &quot;</span> + aClass1); <span class="comment">// class [I</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><blockquote><p>通过反射可以获取类的<strong>构造方法（含private）对象，并借助其实例化对象。</strong></p><ul><li>构造器相关方法</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230825220928177.png" alt="image-20230825220928177"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test044_Constructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">// 1、获取字节码对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.briup.chap13.pojo.Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、由字节码对象获取所有的public构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; con : constructors) &#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取所有构造方法(含private)</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; con : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、返回指定的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = clazz.getDeclaredConstructor(String.class, String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Constructor类创建对象方法</strong></li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230825221657468.png" alt="image-20230825221657468"></p><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230825222722517.png" alt="image-20230825222722517"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取空参构造器创建对象</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.briup.chap13.pojo.Student&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; con = clazz.getConstructor();</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) con.newInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;stu = &quot;</span> + stu); <span class="comment">// stu = Student&#123;id=&#x27;null&#x27;, name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取私有private构造器</span></span><br><span class="line">Constructor&lt;?&gt; con2 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">con2.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> (Student)con2.newInstance(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;stu2 = &quot;</span> + stu2); <span class="comment">// stu2 = Student&#123;id=&#x27;1001&#x27;, name=&#x27;null&#x27;, age=0&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><blockquote><p> 通过反射可以获取类的所有<strong>数据成员（含private）对象</strong>，进而实现数据成员值的获取与设置。</p><ul><li>Filed相关方法</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230826093753560.png" alt="image-20230826093753560"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test045_Field</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.briup.chap13.pojo.HighStudent2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;clazz = &quot;</span> + clazz);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有的公共变量（包含继承的）</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有的属性包含 private的，但是没有继承过来的</span></span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的public属性（含继承的）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">accumulatedMoney</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;accumulatedMoney&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;accumulatedMoney = &quot;</span> + accumulatedMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性获取及设置方法</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230826095021586.png" alt="image-20230826095021586"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test045_Field</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1、获取字节码对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.briup.chap13.pojo.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        <span class="comment">// 2、获取public属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f1</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;lwsj&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String) f1.get(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        <span class="comment">// 3.借助属性对象 获取属性值</span></span><br><span class="line">        <span class="comment">// 属性是依赖对象而存在的，所以：</span></span><br><span class="line">        <span class="comment">// 注意：通过反射里面属性 来获取 属性值，一定要 依赖普通对象</span></span><br><span class="line">        f1.set(stu, <span class="string">&quot;1002&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;after set, stu&quot;</span> + stu);</span><br><span class="line">        <span class="comment">// 4、获取private属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置可以访问</span></span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 5、获取private属性值输出，然后修改</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) f2.get(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        f2.set(stu,<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;stu = &quot;</span> + stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><blockquote><p>通过反射可以获取类里面所有的成员<strong>（含私有）方法</strong>，并调用。</p><ul><li>Method获取相关方法</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230826100343588.png" alt="image-20230826100343588"></p><ul><li>Method对象调用方法</li></ul><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230826100416725.png" alt="image-20230826100416725"></p><ul><li>参数一：用obj对象调用方法</li><li>参数二：调用方法的传递的参数（如果没有就不写）</li><li>返回值：方法的返回值（如果没有就不写）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test046_Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1、获取字节码对象</span></span><br><span class="line">        Class&lt;Student&gt; clazz = Student.class;</span><br><span class="line">        <span class="comment">// 2、获取所有的public method对象（含继承的）</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、获取指定的public 方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getId&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;m1 = &quot;</span> + m1);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;10001&quot;</span>, <span class="string">&quot;lwsj&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="comment">// 4、使用method对象调用方法</span></span><br><span class="line">        <span class="comment">// 不带参数但是有返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String) m1.invoke(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        <span class="comment">// 带参数没有返回值</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 如果是私有方法记得给访问权限</span></span><br><span class="line">        <span class="comment">// m2.setAccessible(true);</span></span><br><span class="line">        m2.invoke(stu, <span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;stu = &quot;</span> + stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/21/13-%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8D%E5%B0%84/image-20230826102557913.png" alt="image-20230826102557913"></p></blockquote><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">现有一个集合定义如下：</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">要求，往list集合中添加元素：<span class="string">&quot;hello&quot;</span>、<span class="number">123</span>、<span class="number">3.14</span></span><br><span class="line">请编码实现。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test047_Question</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&gt; clazz = list.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">        m1.invoke(list, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        m1.invoke(list,<span class="number">123</span>);</span><br><span class="line">        m1.invoke(list,<span class="number">3.14</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：泛型只在编译阶段做语法检查，运行期间会被自动忽略</font></p><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz1 = list1.getClass();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz2 = list2.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1.getName());</span><br><span class="line">        System.out.println(clazz2.getName());</span><br><span class="line">        System.out.println(clazz1 == clazz2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// java.util.ArrayList</span></span><br><span class="line"><span class="comment">// java.util.ArrayList</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>三军可夺帅也，匹夫不可夺志也。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-网络编程</title>
      <link href="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java高级编程，灵活运用反射，线程，IO和网络等进行编程</p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><blockquote><p><strong>强烈推荐真的超级棒滴</strong>⚓⚓：<a href="https://xiaolincoding.com/network/">图解网络介绍 | 小林coding</a></p></blockquote><blockquote><p>也称为计算机通信网，其时利用通信线路将地理上分散的、具有独立功能的计算机系统和通信设备按不同的形式链接起来，以功能完善的网络软件及协议实现资源共享和信息传递的系统。<strong>最简单的计算机网络</strong>就只有两台计算机和连接它们的一条链路，即<strong>两个节点和一条链路</strong>。</p><p>通过编程方式，使得计算机网络中不同计算机上的应用程序间能够进行数据的传输，这就是网络编程要做的事情</p></blockquote><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><blockquote><ul><li><strong>Client&#x2F;Server（C&#x2F;S结构）</strong>，表示 客户端&#x2F;服务器 的软件结构，例如QQ、 微信、百度网盘客户端等，只要是需要我们下载安装，并且和服务器通 信的这一类软件，都属于C&#x2F;S的软件结构。</li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821140202794.png" alt="image-20230821140202794"></p><ul><li><strong>Browser&#x2F;Server（B&#x2F;S结构）</strong>，表示 浏览器&#x2F;服务器 的软件结构，例如淘 宝网、新浪新闻、凤凰网等，只要是需要使用浏览器，并且和服务器通 信的这一类软件，都属于B&#x2F;S的软件结构</li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821140322709.png" alt="image-20230821140322709"></p><p>C&#x2F;S VS B&#x2F;S :</p><ul><li><p>C&#x2F;S在图形的表现能力上以及运行的速度上肯定是强于B&#x2F;S的</p></li><li><p>C&#x2F;S需要运行专门的客户端，并且它不能跨平台，C++在windows下写的程序肯定是不能在linux下运行</p></li><li><p>B&#x2F;S不需要传媒的客户端，只要系统中安装了浏览器即可访问，方便用户的使用</p></li><li><p>B&#x2F;S是基于网页语言的、与操作系统无关，所以跨平台也是它的优势。</p><p> 随着网页技术以及浏览器的进步，B&#x2F;S在表现能力上的处理以及运行的速 度上会越来越快，所以现在越来越多的C&#x2F;S结构的软件，也推出了对应B&#x2F;S的 版本，例如webQQ，在线文档工具、在线画图工具等。同时也包括很多网 页版的游戏，也是随着前端技术的发展，慢慢出现的。</p></li></ul></blockquote><h2 id="通信要素"><a href="#通信要素" class="headerlink" title="通信要素"></a>通信要素</h2><blockquote><p>如果两台计算机上的应用程序能够实现通信，那么必须解决3个问题，找 到对方计算机，找到对方应用程序，采用相同的通信协议。</p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821155341102.png" alt="image-20230821155341102"></p><ul><li>IP地址</li></ul><p>可认为IP地址是个标识号，通过这个标识号能够找到网络世界中唯一的那个计算机</p><ul><li>端口</li></ul><p>端口号可以用来标识计算机中唯一的那个应用程序。网络的通信，本质上是两个应用程序的通信。每台计算机都有很多应用程序，在网络通信时，就采用端口号进行区分这些应用程序。</p><ul><li>协议</li></ul><p>当我们和其他人沟通交流的时候都要使用互相能听懂的语言。计算机也 一样，计算机与计算机通过网络进行数据和信息交换的时候，也要使用 同样的“语言”，这个语言被称为网络通讯协议。 </p><p>网络通信协议对数据的<strong>传输格式、传输速率、传输步骤</strong>等做了统一规 定，通信双方必须同时遵守才能完成数据交换。常见的协议有<strong>UDP协议 和TCP协议。</strong></p></blockquote><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><blockquote><p>全称”互联网协议地址”，也称IP地址。是分配给上网设备的数字标签。常 见的IP分类为：ipv4和ipv6 </p><ul><li>IPv4：共32位，表示范围43亿左右，一般使用点分4段表示法</li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821155958314.png" alt="image-20230821155958314"></p><ul><li>IPv6：共128位，表示范围更大，号称可以为地球上每一粒沙子分配一个IP</li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821160226492.png" alt="image-20230821160226492"></p><p>IP域名： 本质上也是一个IP地址，可读性更好，更容易记忆，需要使用dns域名解 析服务器解析。</p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821160351257.png" alt="image-20230821160351257"></p><p>公网、内网IP：</p><ul><li>公网IP：是可以连接互联网的IP地址</li><li>内网IP：也叫局域网IP，只能组织机构内部使用<ul><li>192.168.开头的是常见局域网地址，范围即为<strong>192.168.0.0~192.168.255.255</strong>，专门为组织机构内部使用</li></ul></li></ul><p>DOS常用命令：</p><ul><li>ipconfig：查看本机IP地址</li><li>ping IP地址：检查网络是否连通</li></ul><p>特殊IP地址：</p><ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></blockquote><h1 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h1><blockquote><p>端口号用来标记正在计算机设备上运行的应用程序，其范围是<strong>0~65535</strong>。 其中，<strong>0~1023之间的端口号用于系统内部的使用</strong>，我们自己普通的应用程 序要使用<strong>1024以上的端口号即可</strong>，同时也要避免和一些知名应用程序默认 的端口冲突，例如：<strong>oracle启动后默认占用端口号1521</strong>，<strong>mysql启动后默认 占用端口号3306</strong>，<strong>redis启动后默认占用端口号6379</strong>，<strong>tomcat启动后默认占 用端口号8080</strong>。</p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821161042296.png" alt="image-20230821161042296"></p><ul><li><p>程序1，在客户端电脑中的内存中运行着，并且占用了端口号8899</p></li><li><p>程序2，在服务器端电脑中的内存中运行着，并且占用了端口号8888 俩个程序，通过IP+端口号的方式，找到对方进行通信，传输信息</p></li></ul><p>端口分类：</p><ul><li><p>周知端口</p><ul><li>0~1023，被预先定义的知名应用占用，如：HTTP占用80，FTP占用21，MySQL占用3306</li></ul></li><li><p>注册端口</p><ul><li><strong>1024~49151，分配给用户进程或某些应用程序（可自己分配）</strong></li></ul></li><li><p>动态端口</p><ul><li>49152~65535，之所以被称为动态端口，是因为它一般不固定分配某种进程，而是动态分配</li></ul></li></ul><p>注意事项： </p><ul><li><strong>自己开发的程序一般选择使用注册端口</strong> </li><li><strong>同一时刻一个设备中两个程序的端口号不能重复，否则出错</strong></li></ul></blockquote><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><blockquote><p>计算机网络中，不同设备进行连接和通信的规则被称为<strong>网络通信协议</strong>。通 信协议，对俩台计算机之间所传输数据的传输格式、传输步骤等做了统一 规定要求，通信双方必须同时遵守才能完成数据交换。</p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821162346024.png" alt="image-20230821162346024"></p><p><strong>OSI（Open System Interconnect）</strong>，即开放式网络互连标准。 一般叫OSI参 考模型，是<strong>ISO（国际标准化组织）</strong>在1985年研究的网络互连模型，它共包 含七层(why?)，具体可参考下图。</p><p>TCP&#x2F;IP网络模型，是事实上的国际标准，它被简化为了四个层，从下到上分 别依次是<strong>应用层、传输层、网络层、网络接口层。</strong></p><ul><li>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等</li><li>传输层：主要使用网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议</li><li>网络层：网络层时整个TCP&#x2F;IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。</li><li>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821164623802.png" alt="image-20230821164623802"></p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821164728042.png" alt="image-20230821164728042"></p></blockquote><h1 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h1><blockquote><p>虽然完整的通信过程比较复杂，但是JavaAPI中把这些通信实现的细节进 行了封装，使得我们可以直接使用相应的类和接口，来进行网络程序开 发，而不用考虑通信的细节。</p><p>java.net包中对常见的两种通信协议进行了封装和支持：UDP和TCP</p><ul><li>UDP：用户数据报协议（User Datagram Protocol) （了解）</li></ul><p>UDP是<strong>无连接通信协议</strong>，在数据传输时，数据的发送端和接收端不建立连接，也不能保证对方能接受成功。</p><p>例如，当一台计算机向另外一台计算机发送数据时（UDP），<strong>发送端不会确认接收端是否存在，就会直接发出数据，同样接收端在收到数据 时，也不会向发送端反馈是否收到数据。</strong></p><p>由于使用UDP协议<strong>消耗资源小，通信效率高</strong>，所以通常都会用于音频、视频和普通数据的传输，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在传输重要数据时，不建议使用UDP协议，因为<strong>它不能保证数据传输的完整性</strong>。</p><ul><li>TCP，传输控制协议（Transmission Control Protocol）（important）</li></ul><p>TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立连接，然后再传输数据，它提供了两台计算机之间<strong>可靠的、无差错</strong>的。</p><p>在TCP连接中，将计算机明确划分为客户端与服务器端，并且由客户端 向服务端发出连接请求，每次连接的创建都需要经过“三次握手”的过 程，四次挥手断开连接。</p><p><strong>TCP的三次握手： （打电话过程，客户端A，服务器B）</strong></p><p>TCP协议中，在发送数据的<strong>准备阶段</strong>，客户端与服务器之间的三次交互， 以保证连接的可靠</p><ul><li>第一次握手：客户端向服务器端发送连接请求，等待服务器确认（<strong>A 打电话给B， 嘟嘟嘟嘟等待中</strong>）</li><li>第二次握手：服务器端向客户端回送一个响应，通知客户端收到了连接请求（**B接电话 喂~**）</li><li>第三次握手：客户端再次向服务器端发送确认信息，确认连接<strong>（A听到B的声音后，回应：喂~在干嘛呀🌳）</strong></li></ul><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821170814966.png" alt="image-20230821170814966"></p><p>完成上述的三次握手后，客户端和服务器端的连接就已经建立了，在这个安全的、可靠的连接基础之上，就可以开始进行数据传输了。 TCP协议应用的十分广泛，例如下载文件、浏览网页、远程登录等。</p><p>TCP的四次挥手： <strong>（打电话过程，客户端A，服务器B）</strong></p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821171357791.png" alt="image-20230821171357791"></p></blockquote><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230831102338168.png" alt="image-20230831102338168"></p><h1 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>在TCP通信协议下，计算机网络中不同设备上的应用程序之间可以通信，通信时需<strong>严格区分客户端（Client）与服务器端（Server）。</strong></p><p>在Java中，对于这样基于TCP协议下连接通信的客户端和服务端，分别进行 了抽象：</p><ul><li>java.net.ServerSocket：类表示服务端</li><li>java.net.Socket：类表示客户端</li></ul><p>使用Socket 和 ServerSocket进行的编程，也称为<strong>套接字编程</strong>。</p></blockquote><h2 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h2><blockquote><p>TCP客户端和服务器进行通信，其通信流程是固定的，具体如下：</p><p><strong>服务器端：</strong></p><ul><li>创建<strong>ServerSocket</strong>（需绑定端口，方便客户端连接）</li><li>调用<strong>ServerSocket</strong>对象的<strong>accept()<strong>方法接收一个客户端请求，得到一个</strong>Socket</strong></li><li>调用<strong>Socket</strong>的<strong>getInputStream</strong>() 和 <strong>getOutputStream</strong>() 获取和客户端相连的IO流<ul><li>输入流可以读取客户端发送过来的数据</li><li>输出流可以发送数据到客户端</li></ul></li><li>操作完成，<strong>close</strong>()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建绑定到指定端口的服务器套接字 （就是服务在监听这个端口比如port=2333）</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ServerSocket</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>(port, <span class="number">50</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听要连接到此的套接字并接受它 (客户端连接这个端口，就会被服务器监听到)</span></span><br><span class="line"><span class="keyword">public</span> Socket <span class="title function_">accept</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (isClosed())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;Socket is closed&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isBound())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SocketException</span>(<span class="string">&quot;Socket is not bound yet&quot;</span>);</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>((SocketImpl) <span class="literal">null</span>);</span><br><span class="line">    implAccept(s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：accept() 方法是阻塞的，作用是等待客户端连接，如果有客户端连接则立马返回，如果没有客户端连接则一致阻塞等待。</font></p></blockquote><blockquote><p> <strong>客户端：</strong></p><ul><li>创建<strong>Socket</strong>连接服务器（需指定服务器ip地址、端口），找对应的服务器进行连接</li><li>调用<strong>Socket</strong>的<strong>getInputStream</strong>()和<strong>getOutputStream</strong>()方法获取和服务端相连的IO流<ul><li>输入流可以读取服务端输出流写出的数据</li><li>输出流可以写出数据到服务端的输入流</li></ul></li><li>操作完毕，<strong>close</strong>()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="comment">// 创建流套接字并将其连接到指定IP指定端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Socket</span><span class="params">(InetAddress address, <span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>(address != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(address, port) : <span class="literal">null</span>,</span><br><span class="line">         (SocketAddress) <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建流套接字并将其连接到指定主机上的指定端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Socket</span><span class="params">(String host, <span class="type">int</span> port)</span> <span class="keyword">throws</span> UnknownHostException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>(host != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(host, port) :</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(InetAddress.getByName(<span class="literal">null</span>), port),</span><br><span class="line">         (SocketAddress) <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此套接字的输入流</span></span><br><span class="line"><span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br><span class="line"><span class="comment">// 返回此套接字的输出流</span></span><br><span class="line"><span class="keyword">public</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821182218102.png" alt="image-20230821182218102"></p></blockquote><h2 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h2><blockquote><p>搭建TCP客户端，发送信息到服务器</p><ul><li>Test01_TcpClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01_TcpClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建Socket对象，（指定）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">23333</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">        System.out.println(<span class="string">&quot;success connect port 23333 server, socket: &quot;</span> + socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取数据传输的IO流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据传输</span></span><br><span class="line">        <span class="comment">// 3.1、先发送数据给服务器</span></span><br><span class="line">        os.write(<span class="string">&quot;hello server I am Tcp client&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;success send data! &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.2、接收服务返回的消息</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;read: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、关闭资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Test02_TcpServer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02_TcpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建ServerSocket（port）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">23333</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        <span class="comment">// 2、调用SocketServer的accept() 方法获得一个Socket</span></span><br><span class="line">        System.out.println(<span class="string">&quot;listening for port 23333&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">// 3、获取网络通信的IO流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 4、数据传输</span></span><br><span class="line">        <span class="comment">// 4.1、获取客户端传输的数据</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(buff);</span><br><span class="line">        System.out.println(<span class="string">&quot;server read succeeded!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">// 4.2、server 发送消息给 client</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server send mes to client&quot;</span>);</span><br><span class="line">        os.write(<span class="string">&quot;I love you&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;success send mes!&quot;</span>);</span><br><span class="line">        <span class="comment">// 5、关闭资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="反转案例"><a href="#反转案例" class="headerlink" title="反转案例"></a>反转案例</h2><blockquote><p>搭建一个TCP客户端，从键盘录入整行数据（遇到quit结束录入）然后发送 给服务器，再接收服务器返回的数据并输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03_ReverseClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">23333</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success connect port 23333 server, socket: &quot;</span> + socket);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义增强流 更好的实现功能</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 核心</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input data: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            line = sc.nextLine();</span><br><span class="line">            ps.println(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;success send data&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equals(line)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 从服务器接收 返回的消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;receive msg: &quot;</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;client will close&quot;</span>);</span><br><span class="line">        br.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        ps.close();</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搭建一个TCP服务器，逐行接收从客户端发送过来的字符串（读取到quit字 符串则结束读取），然后对字符串进行<strong>反转</strong>，最后把反转的字符串返回给 客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04_ReverseServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">23333</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success start server port 23333&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;success connect client &quot;</span> + socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、获取IO流并增强</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.业务操作</span></span><br><span class="line">        <span class="comment">// 4.1、逐行收取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">            line = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;read: &quot;</span> + line);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取到quit，则结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equals(line)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.2 对数据 进行 反转</span></span><br><span class="line">            sb.append(line);</span><br><span class="line">            sb.reverse();</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sb.toString();</span><br><span class="line"></span><br><span class="line">            ps.println(msg);</span><br><span class="line">            System.out.println(<span class="string">&quot;server success send reverse msg&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器即将关闭!&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">        br.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="传输对象"><a href="#传输对象" class="headerlink" title="传输对象"></a>传输对象</h2><blockquote><p>准备一个stud.txt文件，放到src&#x2F;dir目录下，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">010.tom.19</span><br><span class="line">001.zs.21</span><br><span class="line">003.lucy.19</span><br><span class="line">002.jack.20</span><br></pre></td></tr></table></figure><p>搭建TCP客户端，逐行读取stud.txt中数据，然后<strong>转化为Student对象</strong>，最后 将所有对象发送到服务器端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 逐行读取stud.txt中 数据 --&gt; Student对象</span></span><br><span class="line"><span class="comment">* 再将所有对象 发送到 服务器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05_</span>对象客户端 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">        <span class="comment">//1.搭建客户端装增强</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line">        <span class="comment">//3.解析文件 得到对象 并发送</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src/dir/stud.txt&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//拆分数据 001.zs.20</span></span><br><span class="line">            String[] arr = line.split(<span class="string">&quot;[.]&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> arr[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(arr[<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">//封装学生对象 并添加到 list集合</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id,name,age);</span><br><span class="line">            list.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送集合(含所有学生)</span></span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生发送成功，数量: &quot;</span> + list.size());</span><br><span class="line">        <span class="comment">//4.关闭资源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端即将关闭&quot;</span>);</span><br><span class="line">        oos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搭建TCP服务器，接收从客户端发送过来的所有学生，然后遍历输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 搭建服务器，接收从客户端发送过来的所有学生</span></span><br><span class="line"><span class="comment">* 遍历输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06_</span>对象服务器 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">        <span class="comment">//1.搭建服务器，指定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动成功 端口 8989...&quot;</span>);</span><br><span class="line">        <span class="comment">//2.接收客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功连接：&quot;</span> + socket);</span><br><span class="line">        <span class="comment">//3.获取输入流 并 包装增强</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">        <span class="comment">//4.接收 遍历数据</span></span><br><span class="line">        List&lt;Student&gt; list =</span><br><span class="line">            (List&lt;Student&gt;)ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;成功接收学生数量: &quot;</span> +</span><br><span class="line">                           list.size());</span><br><span class="line">        <span class="keyword">for</span> (Student s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.资源关闭</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器即将终止&quot;</span>);</span><br><span class="line">        ois.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="多线程案例"><a href="#多线程案例" class="headerlink" title="多线程案例"></a>多线程案例</h2><blockquote><p>搭建一个TCP客户端，读取键盘信息，然后发送给服务器，遇到quit退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 接盘录入信息 然后发给服务器，遇到quit结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07_</span>聊天客户端 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">        <span class="comment">//1.搭建客户端</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功连接，socket: &quot;</span> + socket);</span><br><span class="line">        <span class="comment">//2.封装得到IO流</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//3.读取键盘信息 然后发送给服务器</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            line = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equals(line))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ps.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.关闭资源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端即将关闭&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搭建TCP服务器，分离多线程接收客户端发送过来的数据，然后进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08_</span>聊天服务器 &#123;</span><br><span class="line">    <span class="comment">//多线程 服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">        <span class="comment">//1.搭建服务器，指定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动成功 端口 8989...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.接收客户端的连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端成功连接：&quot;</span> + socket);</span><br><span class="line">            <span class="comment">// 单独分离子线程 为 当前客户端提供服务</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">//1.获取IO流</span></span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span></span><br><span class="line">                                                <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">                        <span class="comment">//2.数据操作</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((line = br.readLine()) !=</span><br><span class="line">                               <span class="literal">null</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;read: &quot;</span> +</span><br><span class="line">                                               line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">//3.关闭资源</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端对应资源即 将关闭!&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (br != <span class="literal">null</span>)</span><br><span class="line">                                br.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="literal">null</span>)</span><br><span class="line">                                socket.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            th.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现 单线程服务器，接收多个客户端 聊天信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main01</span><span class="params">(String[] args)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">        <span class="comment">//1.搭建服务器，指定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动成功 端口 8989...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.接收客户端的连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端成功连接：&quot;</span> + socket);</span><br><span class="line">            <span class="comment">//3.封装IO流对象，逐行读取聊天信息并输出</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span></span><br><span class="line">                                   <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;read: &quot;</span> + line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.关闭资源</span></span><br><span class="line">            System.out.println(<span class="string">&quot;客户端即将关闭: &quot;</span> + socket);</span><br><span class="line">            br.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            <span class="comment">//能否关闭 server</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><blockquote><p>在UDP通信协议下，两台计算机之间进行数据交互，并不需要先建立连接，客户端直接往指定的IP和端口号上发送数据即可，但是它并不能保证数据一定能让对方收到。</p><p><strong>java.net.DatagramSocket</strong> 和 <strong>java.net.DatagramPacket</strong> 是UDP编程中使用到的两个类，客户端和服务器都使用这两个类</p><ul><li><strong>java.net.DatagramSocket</strong>  负责接收和发送数据</li><li><strong>java.net.DatagramPacket</strong>  负责<strong>封装要发送的数据和接收到的数据</strong></li></ul></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerUDP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建socket，并指定监听的端口号</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">            <span class="comment">//创建packet，用于接收数据</span></span><br><span class="line">            <span class="comment">//指定buf从下标0开始，最多接收length长度的数据</span></span><br><span class="line">            packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,<span class="number">0</span>,buf.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动，等待客户端发送数据过来&quot;</span>);</span><br><span class="line">            <span class="comment">//receive方法会阻塞，等待客户端发送数据过来</span></span><br><span class="line">            <span class="comment">//使用packet接收数据，数据存放在packet中的buf数组中</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="comment">//把收的数据转为字符串输出，数据从buf的下标0开始，长度为packet.getLength()</span></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器接收的数据为:&quot;</span>+<span class="keyword">new</span></span><br><span class="line">                               <span class="title class_">String</span>(buf,<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientUDP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="string">&quot;hello world 中国&quot;</span>.getBytes();</span><br><span class="line">            <span class="comment">//socket负责发送数据</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">            <span class="comment">//打好数据报,并指定要发生到的ip和端口号</span></span><br><span class="line">            <span class="comment">//buf中从0开始，全部数据都发送</span></span><br><span class="line">            packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,</span><br><span class="line">                                        <span class="number">0</span>,buf.length,InetAddress.getByName(ip), port);</span><br><span class="line">            <span class="comment">//发送数据</span></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端发送数据完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：即使不启动服务器，客户端也可以发送数据，因为UDP不提前建立连接，也不保证数据会让对方收到</strong></p></blockquote><h1 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h1><blockquote><p><strong>URI（uniform resource identifier）</strong>，统一资源<strong>标识</strong>符，用来唯一的标识一个 资源。 </p><p><strong>URL（uniform resource locator）</strong>，统一资源<strong>定位</strong>符，它是一种具体的URI， 即URL可以用来标识一个资源，而且还指明了如何定位这个资源。</p><p>例如，<code>http://127.0.0.1/hello</code> ，这就是一个<strong>URL</strong>，它不仅标识了一个资源， 还能定位这个资源。 </p><p>例如，&#x2F;hello ，这就是一个<strong>URI</strong>，它只是标识了一个资源。</p><p><strong>java.net.URL</strong> 可以表示一个URL地址，使用URL对象打开一个连接后，可 以获取这个网络资源返回的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.jd.com&quot;</span>);</span><br><span class="line">        <span class="comment">//打开这个URL的连接，强制为HttpURL的连接对象</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">httpConn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="comment">//设置请求方式</span></span><br><span class="line">        httpConn.setRequestMethod(<span class="string">&quot;GET&quot;</span>); <span class="comment">// 默认就是Get</span></span><br><span class="line">        <span class="comment">//模拟浏览器发送的请求的情况</span></span><br><span class="line">        httpConn.setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;Mozilla/5.0 (WindowsNT 10.0; Win64; x64; rv:79.0)   Gecko/20100101Firefox/79.0&quot;</span>);</span><br><span class="line">        <span class="comment">//获取这个URL连接的输入流，准备读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> httpConn.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转换为字符流</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里读到的信息，和用浏览器这URL获取的内容是一样的，只不过浏览 器能解析这些内容以网页的形式呈现</p><p>注意，浏览器发送请求时，请求头中都会携带<strong>User-Agent</strong>这个字段，例如：</p><p>Firefox浏览器中使用F12</p><p><img src="/2023/08/19/12-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20230821195308836.png" alt="image-20230821195308836"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>三更灯火五更鸡，正是男儿读书时。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea轻松上手无忧版</title>
      <link href="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/"/>
      <url>/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>idea yyds!!!</p></blockquote><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><blockquote><p>模式 idea默认快捷键–&gt;自己习惯快捷键</p><ul><li><strong>快速补充变量：ctrl+shif+v –&gt; ctrl+\ 或者 .var</strong></li><li><strong>切换文件：ctrl+tab</strong></li><li><strong>多功能快捷键：Alt + Enter （牛的）</strong></li><li><strong>定位方法or属性：ctrl + F12</strong></li><li><strong>查看接口中有哪些实现类：选中要查看的接口 ctrl+alt+左键</strong></li><li><strong>快速打开实现方法：ctrl+o</strong></li><li><strong>保存+格式化：Ctrl + Alt + L</strong></li><li><strong>快速运行：Ctrl + Shift + F10  –&gt; Ctrl + F11</strong></li><li><strong>单行上下移动：Shift + Alt + 向下箭头&#x2F;向上箭头 –&gt; Alt + 向下箭头&#x2F;向上箭头</strong></li><li><strong>下一行：Shift + Enter</strong></li><li><strong>反撤回：ctrl + shift + z –&gt; ctrl + y</strong></li><li><strong>搜索类：Ctrl + N</strong></li><li><strong>批量修改变量名：Shift+F6 -&gt; shift + 6</strong> </li><li>多行编辑：ctrl+shift+alt+左键</li><li>收缩代码 和 展开代码：Ctrl -  和 Ctrl +</li><li>当前类快速创建类：ctrl+alt+insert （鸡肋）</li><li>快速抽取封装成方法：ctrl+alt+m</li><li>查看方法所需要的参数类型：ctrl+q</li><li>快速打开项目结构：同时左+右键</li><li>进行大小写的切换：ctrl+shift+u</li><li>查看参数：ctrl + p</li><li>编辑源：ctrl + h</li><li>打开结构：alt + 7</li><li>将局部变量变成全局变量：ctrl+alt+f</li><li>将局部变量变成方法形参：ctrl+alt+p</li><li>打开类的继承和实现图：Ctrl + alt + u   或者 Ctrl+Shift+Alt+u</li><li>查看方法信息(前提是得先选中方法)：Ctrl+Q</li><li>快速找到对应文件的磁盘位置：Ctrl + 左键 + 文件</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231029211614899.png" alt="image-20231029211614899"></p><ul><li>快速重写方法：ctrl + O</li></ul></blockquote><h2 id="自己喜好的快捷键"><a href="#自己喜好的快捷键" class="headerlink" title="自己喜好的快捷键"></a>自己喜好的快捷键</h2><blockquote><p>超爱的好吧~~</p><ul><li>快速补充变量： Ctrl+\</li><li>快速运行：Ctrl + F11</li><li>单行上下移动：Alt + 向下箭头&#x2F;向上箭头</li><li>反撤回：ctrl + y</li><li>批量修改变量名：Shift+F6 -&gt; shift + 6</li><li>查看方法的实现类：ctrl + Alt + 左键</li></ul></blockquote><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="设置放大和缩小代码"><a href="#设置放大和缩小代码" class="headerlink" title="设置放大和缩小代码"></a>设置放大和缩小代码</h2><blockquote><ul><li>increase: Ctrl+鼠标向上滑动</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230819153326209.png" alt="image-20230819153326209"></p><ul><li>decrease：Ctrl+鼠标向下滑动</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230819153126484.png" alt="image-20230819153126484"></p><p>其他快捷键同理哈~~</p></blockquote><h2 id="设置默认大小"><a href="#设置默认大小" class="headerlink" title="设置默认大小"></a>设置默认大小</h2><blockquote><p>18 size</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820165152465.png" alt="image-20230820165152465"></p></blockquote><h2 id="注释设置"><a href="#注释设置" class="headerlink" title="注释设置"></a>注释设置</h2><blockquote><ul><li>颜色 #0A860E</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820152229255.png" alt="image-20230820152229255"></p><ul><li>全部展开</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820152350530.png" alt="image-20230820152350530"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230821144329654.png" alt="image-20230821144329654"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230821144411807.png" alt="image-20230821144411807"></p><ul><li>效果</li></ul><p>要的就是这种效果啦~</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820152738917.png" alt="image-20230820152738917"></p></blockquote><h2 id="添加文件头部信息"><a href="#添加文件头部信息" class="headerlink" title="添加文件头部信息"></a>添加文件头部信息</h2><blockquote><p>每当我们创建文件的时候应当指明创建人、创建时间、版本、描述等基本信息</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820153318067.png" alt="image-20230820153318067"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@ClassName</span> $&#123;NAME&#125; </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 你的名字</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> </span></span><br><span class="line"><span class="comment">   */</span> </span><br></pre></td></tr></table></figure></blockquote><h2 id="自定义文件模板"><a href="#自定义文件模板" class="headerlink" title="自定义文件模板"></a>自定义文件模板</h2><blockquote><p>比如mybatis-mapper.xml文件 可以自定义一个文件模板，方便使用</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231024203015332.png" alt="image-20231024203015332"></p><h2 id="自动导包-删包"><a href="#自动导包-删包" class="headerlink" title="自动导包&#x2F;删包"></a>自动导包&#x2F;删包</h2><blockquote><p>当有多个包的文件名相同的的时候仍然是需要我们自己手动导包滴！</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820163416493.png" alt="image-20230820163416493"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820163529160.png" alt="image-20230820163529160"></p></blockquote><h2 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h2><blockquote><p>楚门暂时不想用 👻 </p><p>但是可以告诉你快捷键哦：ctrl+alt+L (但是这个快捷键会与QQ的快捷键发生冲突，我的解决方案是将QQ的删掉)</p></blockquote><h2 id="sql语句自动提示"><a href="#sql语句自动提示" class="headerlink" title="sql语句自动提示"></a>sql语句自动提示</h2><blockquote><p>哔哩哔哩大学：<a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?p=118&vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">Day08-15. Mybatis-入门-配置SQL提示</a></p></blockquote><h2 id="注释在开头"><a href="#注释在开头" class="headerlink" title="注释在开头"></a>注释在开头</h2><blockquote><p>不要问，强迫症！🌟</p><ul><li>Java</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820164641560.png" alt="image-20230820164641560"></p><ul><li>xml</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820164718680.png" alt="image-20230820164718680"></p></blockquote><h2 id="设置serialVersionUID"><a href="#设置serialVersionUID" class="headerlink" title="设置serialVersionUID"></a>设置serialVersionUID</h2><blockquote><p>alt+enter 设置可选生成 serialVersionUID选项。</p><p>前提是实现了 <strong>Serializable</strong> 这个接口喔~<br><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230824100018906.png" alt="image-20230824100018906"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230824100123377.png" alt="image-20230824100123377"></p><p>出来啦啦啦🍘🍘</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230824100149552.png" alt="image-20230824100149552"></p></blockquote><h2 id="搜索全部类"><a href="#搜索全部类" class="headerlink" title="搜索全部类"></a>搜索全部类</h2><blockquote><p>idea ：Ctrl + N 默认搜索的是当前项目下的类， 我们要设置成可以搜索全部项目下的类！！</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230825111737694.png" alt="image-20230825111737694"></p></blockquote><h2 id="实施模板（Live-Templates"><a href="#实施模板（Live-Templates" class="headerlink" title="实施模板（Live Templates)"></a>实施模板（Live Templates)</h2><blockquote><p>设置一些常用的代码模板</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230827212202532.png" alt="image-20230827212202532"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230827212607625.png" alt="image-20230827212607625"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230827212947341.png" alt="image-20230827212947341"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230827213030870.png" alt="image-20230827213030870"></p><p>这样就有属于自己的快捷键啦~~</p></blockquote><h2 id="debug中的force-step-into-建议不要配置"><a href="#debug中的force-step-into-建议不要配置" class="headerlink" title="debug中的force step into (建议不要配置)"></a>debug中的force step into (建议不要配置)</h2><blockquote><p>因为不同版本的idea会有所区别，我的idea2021.1.3没有出来这个force step into</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230908101454964.png" alt="image-20230908101454964"></p><blockquote><p>但是我想把它弄出来哈！太难了呜呜</p><p>有两种解决方案：</p><ul><li><a href="https://blog.csdn.net/weixin_44050791/article/details/128803608">idea debug 按钮不全 ( Force Step Into 按钮没了 )</a></li><li><a href="https://www.cnblogs.com/miao123-blog/p/17134033.html">idea debug 没有 force step into 按钮</a></li></ul></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230908103829089.png" alt="image-20230908103829089"></p><h1 id="快捷提示"><a href="#快捷提示" class="headerlink" title="快捷提示"></a>快捷提示</h1><blockquote><ul><li>iter: Iterate Iterable or array</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820205238068.png" alt="image-20230820205238068"></p><ul><li>itar: Iterate elements of array &#x3D; &#x3D; listFiles.for</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820205301287.png" alt="image-20230820205301287"></p><ul><li>cast 或者 castvar</li><li>soutc  或者  seerc</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230913183418618.png" alt="image-20230913183418618"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230913183439665.png" alt="image-20230913183439665"></p><ul><li>jaxrs</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230906212539275.png" alt="image-20230906212539275"></p><ul><li>psfs &#x3D; public static final String</li><li>psfi &#x3D; public static final int </li><li>psf &#x3D; public static final</li><li>fori、forr(逆序)</li></ul></blockquote><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><h2 id="Chinese-中文语言包"><a href="#Chinese-中文语言包" class="headerlink" title="Chinese 中文语言包"></a>Chinese 中文语言包</h2><blockquote><p>楚门已经习惯看英文啦 🍠</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820164034633.png" alt="image-20230820164034633"></p></blockquote><h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><blockquote><p>看源码的必备神器✌</p></blockquote><h2 id="Atom-Material-Icons"><a href="#Atom-Material-Icons" class="headerlink" title="Atom Material Icons"></a>Atom Material Icons</h2><blockquote><p>超级好看的图标好吧😀</p></blockquote><h2 id="One-Dark-theme"><a href="#One-Dark-theme" class="headerlink" title="One Dark theme"></a>One Dark theme</h2><blockquote><p>暗黑主题爱好者 is me💜</p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230820153858487.png" alt="image-20230820153858487"></p></blockquote><h2 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h2><blockquote><p>对于记不住快捷键的小猿来说就是福音！🍅</p></blockquote><h2 id="LeetCode-Editor"><a href="#LeetCode-Editor" class="headerlink" title="LeetCode Editor"></a>LeetCode Editor</h2><blockquote><p>程序员的历练地！</p><p>有两种登录方式：</p><ul><li><p>用户名(一般是手机号)+密码</p></li><li><p>用户名（LeetCode用户名）+ Cookie</p></li></ul><p>具体可以看这个up主哈：<a href="https://www.bilibili.com/video/BV1ru4y1v7xv/?spm_id_from=333.788&vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">labuladong-Jetbrains IDE 算法刷题插件</a></p><ul><li>下面是用到的配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LC_$!&#123;question.frontendQuestionId&#125;_$!velocityTool.camelCaseName(<span class="variable">$&#123;question.titleSlug&#125;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package leetcode.editor.cn; // 这里的包名得看你自己的</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @ClassName <span class="variable">$&#123;question.title&#125;</span></span><br><span class="line"> * @Author luozongwei</span><br><span class="line"> * @Date $!velocityTool.<span class="built_in">date</span>()</span><br><span class="line"> * @Version 1.0</span><br><span class="line"> * @Description </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">class LC_<span class="variable">$&#123;question.frontendQuestionId&#125;</span>_$!velocityTool.camelCaseName(<span class="variable">$&#123;question.titleSlug&#125;</span>)&#123;</span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">  Solution solution = new LC_$!&#123;question.frontendQuestionId&#125;_$!velocityTool.camelCaseName(<span class="variable">$&#123;question.titleSlug&#125;</span>)().new Solution();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//力扣代码</span><br><span class="line"><span class="variable">$&#123;question.code&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h2><blockquote><p>解放双手</p><p>最好是自定义一个空的maven模块：generator_code</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231008185252910.png" alt="image-20231008185252910"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231008185601189.png" alt="image-20231008185601189"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231031141752364.png" alt="image-20231031141752364"></p><blockquote><p>注意点，基本上所有的generation对于数据库中的时间类型，都是默认在Java实体类中 <code>Date</code></p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231008185844209.png" alt="image-20231008185844209"></p><h2 id="Free-MyBatis-Tool"><a href="#Free-MyBatis-Tool" class="headerlink" title="Free MyBatis Tool"></a>Free MyBatis Tool</h2><blockquote><p>提供了Mybatis-Generator代码生成器  别问？说多了都是泪</p><p>最好是自定义一个空的maven模块：generator_code</p><p>注意：下面的pojo 和 mapper要看你自己的项目中使用的是不是这两个包名，有可能是bean 和 dao!!</p><p>关于具体Example使用可以看这篇博客：<a href="https://blog.csdn.net/qq_43318965/article/details/106665863#:~:text=Mybatis-generator%E7%94%9F%E6%88%90Example%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%951.Generator%E6%8F%92%E4%BB%B6%E7%94%9F%E6%88%90Mapper%E5%92%8CExample%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D1-1.Mapper%E6%96%87%E4%BB%B6%E4%B8%8A%E7%AF%87%E4%BB%8B%E7%BB%8D%E4%BA%86SpringBoot%E6%95%B4%E5%90%88generator%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91%E3%80%82,%E6%89%80%E4%BB%A5%E6%9C%AC%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%BB%E8%A6%81%E4%BB%8B%E7%BB%8D%E7%94%9F%E6%88%90%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB%E3%80%81Example%E3%80%81mapper%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%B0%8F%E9%BA%BB%E8%A2%8B%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E3%80%82">【精选】Mybatis-generator生成Example使用心得-CSDN博客</a></p></blockquote><ul><li>选择一个table</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231101153758339.png" alt="image-20231101153758339"></p><ul><li>选择多个table</li></ul><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231101153545529.png" alt="image-20231101153545529"></p><blockquote><p>具体使用：</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231101102553302.png" alt="image-20231101102553302"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231101154911831.png" alt="image-20231101154911831"></p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><blockquote><p>主要让idea 中的 vue代码高亮</p><p>具体配置：<a href="https://blog.csdn.net/weixin_39680839/article/details/81871810">IDEA 编辑器配置vue高亮显示</a></p></blockquote><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><h3 id="设置条件断点"><a href="#设置条件断点" class="headerlink" title="设置条件断点"></a>设置条件断点</h3><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919214404614.png" alt="image-20230919214404614"></p><h3 id="断点回退-回到过去"><a href="#断点回退-回到过去" class="headerlink" title="断点回退 (回到过去~)"></a>断点回退 (回到过去~)</h3><blockquote><p>主要是当我们点的太快了，想要回到上一步看看参数的时候，可以试试</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919215129274.png" alt="image-20230919215129274"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230919215512407.png" alt="image-20230919215512407"></p><h3 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h3><blockquote><p>主要就是可以在程序debug的过程中，添加数据或者执行条件</p><p>alt+F8：打开Evaluate 表达式</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230920212705189.png" alt="image-20230920212705189"></p><blockquote><p>可以通过Trace Current Stream Chain 动态观察流的结果</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230920213045131.png" alt="image-20230920213045131"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230920213505113.png" alt="image-20230920213505113"></p><h3 id="设置异常断点"><a href="#设置异常断点" class="headerlink" title="设置异常断点"></a>设置异常断点</h3><blockquote><p>比如当我们需要调试程序是否出现空指针异常的时候，一般是先运行一遍程序，然后再定位，再打断点再指定位置，真的太麻烦了。</p><p>现在教一个不需要手动打断点，只要直接Debug运行就即可</p><p>本文以空指针异常NullPointerException为例子，其他同理</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829135957770.png" alt="image-20230829135957770"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829140104836.png" alt="image-20230829140104836"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829140209233.png" alt="image-20230829140209233"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829140245771.png" alt="image-20230829140245771"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829140516156.png" alt="image-20230829140516156"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230829140706535.png" alt="image-20230829140706535"></p><h2 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h2><blockquote><p>比如我们想在项目中快速查找 文字或单词 captchaImage,没错就是若依哈哈！</p><p>当然也可以使用快捷键Ctrl+Shift+F</p><p>如果查询的是路径的话，最后是  &#x2F;captchaImage</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231017200223719.png" alt="image-20231017200223719"></p><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231017200322037.png" alt="image-20231017200322037"></p><h2 id="查看springBoot-ioc中的bean"><a href="#查看springBoot-ioc中的bean" class="headerlink" title="查看springBoot ioc中的bean"></a>查看springBoot ioc中的bean</h2><h2 id><a href="#" class="headerlink" title></a><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20231109164421021.png" alt="image-20231109164421021"></h2><h1 id="idea问题"><a href="#idea问题" class="headerlink" title="idea问题"></a>idea问题</h1><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><blockquote><p>idea中的路径问题可谓是恶心至极！在深恶痛绝后，分析让如下：</p><p>主要是在多模块的情况下出现路径问题：</p></blockquote><h3 id="通过反射获取文件"><a href="#通过反射获取文件" class="headerlink" title="通过反射获取文件"></a>通过反射获取文件</h3><blockquote><p> XXX.class.getClassLoader().getResourceAsStream(“文件名”);</p><p>通过这种方法获得的是resources目录下的文件,直接写文件名即可</p></blockquote><p><img src="/2023/08/13/idea%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230928192308129.png" alt="image-20230928192308129"></p><h3 id="main方法中"><a href="#main方法中" class="headerlink" title="main方法中"></a>main方法中</h3><blockquote><p>这种情况下需要加上模块名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;client/src/main/resources/data-file-simple&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;client/src/main/resources/gather-backup&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Junit-Test中"><a href="#Junit-Test中" class="headerlink" title="Junit Test中"></a>Junit Test中</h3><blockquote><p>不需要加模块名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;src/main/resources/data-file-simple&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/gather-backup&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="番外篇Typora（还没开始哈）"><a href="#番外篇Typora（还没开始哈）" class="headerlink" title="番外篇Typora（还没开始哈）"></a>番外篇Typora（还没开始哈）</h1><blockquote><p>typora可以说是每一个程序员必备的文档工具了</p></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-File-IO流</title>
      <link href="/2023/08/13/11-File-IO%E6%B5%81/"/>
      <url>/2023/08/13/11-File-IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java高级编程，灵活运用反射，线程，IO和网络等进行编程</p></blockquote><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>java.io.file 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><ul><li>构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Comparable&lt;File&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过将给定路径名字符串来创建新的 File实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String pathname)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pathname == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.path = fs.normalize(pathname);</span><br><span class="line">        <span class="built_in">this</span>.prefixLength = fs.prefixLength(<span class="built_in">this</span>.path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从**父抽象路径名和子路径名字符串**创建新的 File实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String parent, String child)</span> &#123;</span><br><span class="line">        <span class="comment">//省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(File parent, String child)</span> &#123;</span><br><span class="line">        <span class="comment">//省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test011_File</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 文件路径名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pathname</span> <span class="operator">=</span> <span class="string">&quot;D:\\aaa.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname);</span><br><span class="line">        <span class="comment">// 文件路径名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pathname2</span> <span class="operator">=</span> <span class="string">&quot;D:\\aaa\\bbb.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname2);</span><br><span class="line">        <span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;D:\\aaa&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">child1</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent, child1);</span><br><span class="line">        <span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">child2</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentDir, child2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个File对象代表硬盘中实际存在的一个文件或者目录</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建</li></ul></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><ul><li>路径获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File绝对路径名字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//File文件构造路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//File文件或目录的名称</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//File文件或目录的长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test012_File</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\luozongwei\\Desktop\\aaa.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的绝对路径: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的构造路径: &quot;</span> + file.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件或目录的名称：&quot;</span> + file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件或目录的长度: &quot;</span> + file.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件的绝对路径: C:\Users\luozongwei\Desktop\aaa.txt</span></span><br><span class="line"><span class="comment">// 文件的构造路径: C:\Users\luozongwei\Desktop\aaa.txt</span></span><br><span class="line"><span class="comment">// 文件或目录的名称：aaa.txt</span></span><br><span class="line"><span class="comment">// 文件或目录的长度: 19</span></span><br></pre></td></tr></table></figure><p>API中说明：length(),表示文件的长度。但是File对象表示目录，则返回值未指定。</p><ul><li>路径操作<ul><li>绝对路径：从盘符开始的路径，这是一个完整的路径</li><li>相对路径：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用</li></ul></li></ul><p>案例描述：<strong>输入具体文件路径，以及只输入文件名字</strong>，通过File的绝对路径方法， 验证结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test013_File</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// D盘下的Test1101_File.java文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Test1101_File.java&quot;</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 项目下的Test1101_File.java文件（不包含包名）  当前项目就近原则</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Test1101_File.java&quot;</span>);</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// D:\Test1101_File.java</span></span><br><span class="line"><span class="comment">// E:\work\2023-CoreJava\Test1101_File.java</span></span><br></pre></td></tr></table></figure><ul><li>判断操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断文件或目录是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//判断是否是文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//判断是否是目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>创建删除操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当且仅当具有该名称的文件尚不存在时，创建一个新的空文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//创建目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//创建多级目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//文件或目录的删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><strong>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</strong></p><ul><li>目录遍历操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Comparable&lt;File&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//目录文件调用该方法，获取目录中所有子文件名，返回String数组</span></span><br><span class="line">    <span class="comment">//其他文件调用该方法，返回null</span></span><br><span class="line">    <span class="keyword">public</span> String[] list();</span><br><span class="line">    <span class="comment">//目录文件调用该方法，获取目录中所有子文件，返回File数组</span></span><br><span class="line">    <span class="comment">//其他文件调用该方法，返回null</span></span><br><span class="line">    <span class="keyword">public</span> File[] listFiles();</span><br><span class="line">    <span class="comment">//目录文件调用该方法，获取目录中符合筛选条件的子文件，返回File数组</span></span><br><span class="line">    <span class="comment">//其他文件调用该方法，返回null</span></span><br><span class="line">    <span class="keyword">public</span> File[] listFiles(FileFilter filter);</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test016_File</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dirPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dirPath);</span><br><span class="line"></span><br><span class="line">        String[] list = dirFile.list();</span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、准备普通文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;readme.pdf&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dirFile, fileName);</span><br><span class="line">        <span class="comment">// 4、普通文件调用list返回null</span></span><br><span class="line">        String[] list2 = file.list();</span><br><span class="line">        System.out.println(list2); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、获取目录中所有子文件对象，并遍历输出</span></span><br><span class="line">        File[] listFiles = dirFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : listFiles) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、使用文件过滤器，获取目录下所有普通文件，并遍历输出</span></span><br><span class="line">        File[] listFiles2 = dirFile.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pathname.isFile()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file1 : listFiles2) &#123;</span><br><span class="line">            System.out.println(file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><blockquote><p>在计算机中，流是一个抽象的概念，是对输入输出设备的抽象。在Java程序中，对于数据的输入&#x2F;输出操作，都是以“流”的方式进行</p><p>数据以二进制的形式在<strong>程序与设备</strong>之间流动传输，就像水在管道里流动一样，所以就把这种数据传输的防暑称为输入流、输出流。这里描述的设备，可以是<strong>文件、网络、内存</strong>等</p><p>流具有方向性，可以分为输入和输出流</p><p>以java程序本身作为参照点：</p><ul><li>如果数据是从程序“流向”文件，那么这个流就是输出流</li><li>如果数据是从文件“流向”程序，那么这个流就是输入流</li></ul><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820212646132.png" alt="image-20230820212646132"></p></blockquote><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><blockquote><p>Java中的IO流可以根据很多不同的角度进行划分，最常见的是以<strong>数据的流向和数据的类型</strong>来划分</p><ul><li>数据流向<ul><li>输入流：把数据从其他设备上读取到程序中的流</li><li>输出流：把数据从程序中写出到其他设备上的流</li></ul></li><li>数据类型<ul><li>字节流：以字节为单位(byte)，读写数据的流</li><li>字符流：以字符为单位(char)，读写数据的流</li></ul></li></ul><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820212929702.png" alt="image-20230820212929702"></p></blockquote><h2 id="流的结构"><a href="#流的结构" class="headerlink" title="流的结构"></a>流的结构</h2><blockquote><p>在Java中，和IO流相关的类，主要是在java.io包中定义</p><p>几乎所有的流，都是派生自四个抽象的父类型：</p><ul><li>InputStream，字节输入流</li><li>OutputStream，字节输出流</li><li>Reader，字符输入流</li><li>Writer，字符输出流</li></ul><p>Java中常用的流及其继承结构：</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820215500815.png" alt="image-20230820215500815"></p><p>流会具备起码的三个特点：</p><ul><li>是输入还是输出</li><li>是字节还是字符</li><li>流的目的地<ul><li>如果是输入流，就表示这个流从什么地方读数据</li><li>如果是输出流，就表示这个流把数据写到什么地方</li></ul></li></ul></blockquote><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><blockquote><p>一切文件数据（文本、图片、视频等）在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么杨的流对象，<strong>底层传输的始终为二进制数据。</strong></p><p>java.io.InputStream 是所有<strong>字节输入流的抽象父类型</strong>：</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820220204926.png" alt="image-20230820220204926"></p><p>java.io.OutputStream 是所有<strong>字节输出流的抽象父类型</strong>：</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820220246589.png" alt="image-20230820220246589"></p><p>一般情况，是以哦那个字节流来操作数据的时候，往往时使用一对，一个字节输入流，负责读取数据，一个字节输出流，负责将数据写出去，而这些流都将InputStream和OutputStream的子类型。</p><p><strong>使用流的基本步骤</strong>：</p><ul><li>选择流</li><li>声明流</li><li>创建流</li><li>使用流</li><li>关闭流</li></ul></blockquote><h3 id="文件输入流"><a href="#文件输入流" class="headerlink" title="文件输入流"></a>文件输入流</h3><blockquote><p>文件字节输入流 <strong>FileInputStream</strong> ，用于从文件中读取字节数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream</span> <span class="keyword">extends</span> <span class="title class_">InputStream</span></span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line"><span class="comment">//通过File对象来创建一个 FileInputStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileInputStream</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="comment">//通过文件路径名(字符串)实例化FileInputStream对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileInputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="comment">//逐个字节读取,返回值为读取的单个字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//小数组读取,将结果存入数组,返回值为读取的字节个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[])</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//小数组读取,存入数组指定位置,返回值为读取的字节个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820220737004.png" alt="image-20230820220737004"></p><p>注意事项： <strong>创建FileInputStream对象时，必须传入一个有效文件路径，否则抛出 FileNotFoundException ！</strong></p></blockquote><h3 id="文件输出流"><a href="#文件输出流" class="headerlink" title="文件输出流"></a>文件输出流</h3><blockquote><p>文件字节输出流， <strong>FileOutputStream</strong> ，用于写入字节数据到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileOutputStream</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span></span><br><span class="line"><span class="comment">//创建文件输出流以写入由指定的 File对象表示的文件。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="comment">//创建文件输出流以指定的名称写入文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(File file, <span class="type">boolean</span> append)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span> b[])</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>创建一个输出流对象时传入的文件路径可以不存在，不会抛出异常，系统会走动创建该文件</li><li>如果有这个文件，系统默认会清空这个文件的数据</li></ul><p>注意：不同操作系统中回车、换行符时不同的</p><ul><li>回车符 \r 和 换行符 \n<ul><li>回车符：回到一行的开头（return）</li><li>换行符：下一行（newline）</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾时 回车+换行，即 \r\n</li><li>Unix系统里，每行结尾只有 换行，即\n</li><li>Mac系统里，每行结尾时 回车，即\r。从 Mac OS X开始与Linux统一</li></ul></li></ul><p>综合案例： 拷贝 <strong>src&#x2F;dir&#x2F;a.txt</strong> 内容到 <strong>src&#x2F;dir&#x2F;b.txt</strong> 中，a.txt文件内容如下。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">1、确认过眼神，我遇上的人。我策马出征，马蹄声如泪奔。青石板上的月光照进这</span><br><span class="line">山城。</span><br><span class="line">我一路的跟，你轮回声，我对你用情极深。 --方文山 《醉赤壁》</span><br><span class="line">2、无关风月 我题序等你回 悬笔一绝 那岸边浪千叠 --方文山 《兰亭序》</span><br><span class="line">3、那画面太美，我不敢看 --方文山 《布拉格广场》</span><br><span class="line">4、你说 想哭就弹琴 想起你就写信情绪来了就不用太安静 --方文山 《想你就写</span><br><span class="line">信》</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230820221841699.png" alt="image-20230820221841699"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test024_Copy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.DESKTOP, <span class="string">&quot;aaa.txt&quot;</span>));</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.CHAP_11, <span class="string">&quot;bbb.txt&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buff, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;copy finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>逐个字节拷贝效率太低，推荐使用小数组拷贝</li><li>关闭资源的顺序应该和打开资源顺序相反：<strong>先打开的后关闭，后打开的先关闭</strong></li></ul></blockquote><h3 id="文件追加"><a href="#文件追加" class="headerlink" title="文件追加"></a>文件追加</h3><blockquote><p>回顾之前案例，我们发现每次创建文件输出流对象，在操作时都会清空目标文件 中的数据。</p><p>思考：如<strong>何保留目标文件中数据，在原有文件内容的后面添加新数据呢？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件输出流以写入由指定的 File对象表示的文件。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(File file, <span class="type">boolean</span> append)</span>; </span><br><span class="line"><span class="comment">// 创建文件输出流以指定的名称（内容）写入文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(String name, <span class="type">boolean</span> append)</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean append<ul><li>true：表示追加数据</li><li>false：表示清空原有数据</li></ul></li></ul></blockquote><h3 id="内存输出流"><a href="#内存输出流" class="headerlink" title="内存输出流"></a>内存输出流</h3><blockquote><p>使用文件流，我们可以操作文件中的数据</p><p><strong>使用内存流，我们可以操作内存中字节数组中的数据</strong></p><p>内存字字节流，也称为<strong>字节数组流</strong>，主要有下面两种：</p><ul><li>java.io.ByteArrayOutputStream<ul><li>内存输出流，负责把数据写入到内存中的字节数组中</li></ul></li><li>java.io.ByteArrayInputStream<ul><li>内存输入流，负责从内存中的字节数组中读取数据</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayOutputStream</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span> &#123;</span><br><span class="line">    <span class="comment">//存储数据的数组</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">byte</span> buf[];</span><br><span class="line">    <span class="comment">//存入字节数组的元素(字节)个数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//无参构造器创建的字节数组输出流，数组大小为32个字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ByteArrayOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关键方法：获取内存输出流中存储的数据，返回字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">byte</span> <span class="title function_">toByteArray</span><span class="params">()</span>[] &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(buf, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例展示： 小数组方式读取 src&#x2F;dir&#x2F;a.txt 文件中的所有内容，写入到字节数组输出流 中，然后从字节输出流中获取所有数据，最后转换成String字符串输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test024_ByteArrayOutput</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、关联流对象和文件</span></span><br><span class="line">        <span class="comment">// 创建内存输出流对象[new byte[32]]</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.CHAP_11, <span class="string">&quot;bbb.txt&quot;</span>));</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、读取文件内容 然后写入到 内存输出流中</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;copy finish&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、关键方法：获取内存输出流中的数据</span></span><br><span class="line">        <span class="type">byte</span>[] byteArray = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、将byte[] --&gt; String 并输出</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(byteArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：内存流使用完不需要close()去释放资源！</font></p><p>因为内存流的底层数据源时内存中的字节数组，不需要进行资源释放或关闭操作。当使用完<strong>ByteArrayXxxStream</strong>后，可以选择不进行任何操作，它会自动被垃圾回收机制回收</p></blockquote><h3 id="内存输入流"><a href="#内存输入流" class="headerlink" title="内存输入流"></a>内存输入流</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayInputStream</span> <span class="keyword">extends</span> <span class="title class_">InputStream</span> &#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="type">byte</span> buf[];</span><br><span class="line"> <span class="keyword">protected</span> <span class="type">int</span> pos;</span><br><span class="line"> <span class="keyword">protected</span> <span class="type">int</span> count;</span><br><span class="line"> <span class="comment">//关键构造器</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ByteArrayInputStream</span><span class="params">(<span class="type">byte</span> buf[])</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.buf = buf;</span><br><span class="line">     <span class="built_in">this</span>.pos = <span class="number">0</span>;</span><br><span class="line">     <span class="built_in">this</span>.count = buf.length;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821090215911.png" alt="image-20230821090215911"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test024_ByteArrayInput</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、实例化sc对象，输入一行</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;input line:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建内存输入流对象 ByteArrayInputStream</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = line.getBytes();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.DESKTOP, <span class="string">&quot;aaa.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = bais.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;success write to file&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        bais.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存流总结：</p><ul><li>如果要操作文件，则需要使用文件流</li><li>如果要操作内存中的数据，则可以选择内存流</li></ul><p>内存字节流提供了一种在内存中进行数据读取和写入的便捷方式。内存流在实际 开发中有专门的应用场景，了解即可。</p><p>以下是一些常见的应用场景：</p><ul><li>数据的临时存储：内存字节流可以将数据暂时存储在内存中的字节数组 中，而不需要写入到磁盘或网络中。这在一些临时性的数据处理场景中非 常有用，例如在内存中对数据进行加密、解密、压缩、解压缩等操作。</li><li>数据的转换：内存字节流可以用于将数据从一种格式转换为另一种格式。 例如，可以将一个对象序列化为字节数组，然后再将字节数组反序列化为 对象。这在一些需要将数据在内存中进行格式转换的场景中非常有用。</li><li>测试和调试：内存字节流可以用于测试和调试目的，例如模拟输入流或输 出流的行为。通过将数据写入内存字节流，可以方便地检查数据的内容和 格式，而无需依赖外部资源。</li><li>单元测试：内存字节流在单元测试中也非常有用。可以使用内存字节流模 拟输入和输出流，以便在测试中验证代码的正确性和可靠性，而无需依赖 外部文件或网络连接。</li></ul><p>需要注意的是，由于内存字节流将数据存储在内存中的字节数组中，因此在处理 大量数据时可能会占用较多的内存。在这种情况下，需要谨慎使用内存字节流， 以避免内存溢出的问题。</p></blockquote><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><blockquote><p><strong>java.io.Reader</strong> 是所有<strong>字符输入流</strong>的抽象父类型：</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821202648318.png" alt="image-20230821202648318"></p><p>java.io.Writer 抽线类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821202843724.png" alt="image-20230821202843724"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入单个字符</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span>; </span><br><span class="line"><span class="comment">// 写入字符数组</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 写入字符数组的某一部分，off数组的开始索引，len写的字符个数</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>; </span><br><span class="line"><span class="comment">// 写入字符串</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">// 写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭此流，但要先刷新它</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>这些字符流中的读和写的方法，与字节流中的读和写方法类似，掌握了字节 流的使用，这些很容易理解</p></blockquote><h3 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h3><blockquote><p><strong>java.io.FileReader</strong> 类是读取<strong>字符文件（纯文本文件）</strong>的便利类。构造时使用系统默认的字符编码和默认字节缓冲区</p><p>java.io.FileWriter 类是写出字符到文件的便利类。构造时使用系统默认的 字符编码和默认字节缓冲区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> <span class="keyword">extends</span> <span class="title class_">InputStreamReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileReader</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileReader</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter</span> <span class="keyword">extends</span> <span class="title class_">OutputStreamWriter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(String fileName, <span class="type">boolean</span> append)</span> <span class="keyword">throws</span></span><br><span class="line">        IOException;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(File file, <span class="type">boolean</span> append)</span> <span class="keyword">throws</span></span><br><span class="line">        IOException;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>创建一<strong>输入流对象</strong>时，必须传入一个有效文件路径，否则会抛出 <code>FileNotFoundException</code></p><p>创建一个<strong>输出流对象</strong>时，传入的文件路径可以不存在，系统会自动创建该文件。如果有这个文件，默认会清空这个文件的数据</p><p>案例描述：使用文件字符流拷贝a.txt文件内容到b.txt文件末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test025_FileReaderWriter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.实例化流对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.DESKTOP, <span class="string">&quot;aaa.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置文件追加</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(CommonPath.DESKTOP, <span class="string">&quot;bbb.txt&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 2.使用流进行文件拷贝</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//刷新流</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">// 3.关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="操作字节文件"><a href="#操作字节文件" class="headerlink" title="操作字节文件"></a>操作字节文件</h3><blockquote><p>案例描述：使用文件字符流完成图片的拷贝，看结果发现问题</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821215247430.png" alt="image-20230821215247430"></p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821215326945.png" alt="image-20230821215326945"></p><p>修改上面 Test025_FileReaderWriter 案例： </p><p>​1.将操作的文件换成 src&#x2F;dir&#x2F;001.jpg和src&#x2F;dir&#x2F;002.jpg </p><p>​2.去除输出流追加标志</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821215434306.png" alt="image-20230821215434306"></p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821215528916.png" alt="image-20230821215528916"></p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230821215543925.png" alt="image-20230821215543925"></p><p><font color="#d12920">结论：字符流，只能操作文本文件，不能操作图片，视频等非文本文件</font></p><p>当我们单纯读或写存文本文件时，使用字符流</p><p>其他情况（图片、音频、doc、xls、ppt等等），使用字节流</p></blockquote><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><blockquote><p>之前我们对异常的处理，都是直接throws抛出，实际开发中并不能这样处理，建 议使用 <strong>try…catch…finally</strong> 代码块处理异常部分代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test026_Catch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、实例化流对象</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileReader</span>(CommonPath.DESKTOP + <span class="string">&quot;aaa.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置文件追加</span></span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(CommonPath.DESKTOP+<span class="string">&quot;bbb.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 2、使用流进行文件拷贝</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 刷新流</span></span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展知识：JDK7新增异常处理方式（了解即可）</p><p>JDK7优化后的 <strong>try-with-resource</strong> 语句，该语句确保了每个资源在语句结束 时关闭。</p><p>所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句,如果存在多个,使用<span class="string">&#x27;;&#x27;</span>隔开) &#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test027_Catch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、实例化流对象，这种格式，系统会自动释放资源</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src/dir/a.txt&quot;</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;src/dir/b.txt&quot;</span>, <span class="literal">true</span>))&#123;</span><br><span class="line">            <span class="comment">// 2. 使用流进行文件拷贝</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(cbuf, <span class="number">0</span> ,len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 刷新流</span></span><br><span class="line">            fw.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;copy finish&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h2><blockquote><ul><li>System.in 标准输入流，是类<strong>InputStream</strong>的对象默认可以从键盘输入读取字节数据</li><li>System.out 标准输出流，是类<strong>PrintStream</strong>的对象默认可以控制台中输出字符和字节数据</li><li>非标准流可以改变打印流方向</li></ul><p>案例描述：先按照标准输出流输出内容，然后改变输出方向，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test028_PrintStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;src/ps.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="缓冲流（有cp）"><a href="#缓冲流（有cp）" class="headerlink" title="缓冲流（有cp）"></a>缓冲流（有cp）</h2><blockquote><p>缓冲思想：</p><p>在Java的I&#x2F;O流中，缓冲思想是一种常见的优化技术，<strong>用于提高读取和写入数据的效率</strong>。它通过在内存中引入缓冲区（Buffer）来减少实际的I&#x2F;O的操作次数，从而提高数据传输的效率。</p><p>缓冲思想的基本原理是将数据暂时存储在内存中的缓冲区中，然后按照一定的块大小进行读取或写入操作。相比于直接对磁盘或网络进行读写操作，使用缓冲区可以减少频繁的I&#x2F;O操作，从而提高效率。</p><p>缓冲流也叫高效流</p><ul><li>缓冲字节流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的缓冲输入流</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in)</span>;</span><br><span class="line"><span class="comment">// 创建一个新的缓冲输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedOutputStream</span><span class="params">(OutputStream out)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line"> <span class="comment">//缓冲输入流，又称为包装流，使用时需要传入基本输入字节流对象</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in)</span>;</span><br><span class="line"> <span class="comment">//size，代表设置读取缓冲大小</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in, <span class="type">int</span> size)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedOutputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterOutputStream</span> &#123;</span><br><span class="line"> <span class="comment">//缓冲输出流，又称为包装流，使用时需要传入基本输出字节流对象</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">BufferedOutputStream</span><span class="params">(OutputStream out)</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//size，代表设置写入缓冲大小</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">BufferedOutputStream</span><span class="params">(OutputStream out, <span class="type">int</span> size)</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230822183405353.png" alt="image-20230822183405353"></p><p>可以看出，字节缓冲流的构造器，要求一定要传入一个字节流对象，然后缓冲流就可以对这个字节流的功能进行增强，提供缓冲数据的功能，从而提高读写的效率。</p><p>如何验证使用缓冲流来增强文件字节流的功能，提高读写效率？</p><p>案例描述： 完成背影.txt文件的复制粘贴，并结合时间戳完成效率的验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03_BufferedStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、声明流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影.txt&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影copy.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// is = new FileInputStream(file1);</span></span><br><span class="line">            <span class="comment">// os = new FileOutputStream(file2);</span></span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1));</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">while</span> ((data = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buf, <span class="number">0</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;-----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -----costTime: 368ms</span></span><br><span class="line"><span class="comment">// -----costTime: 39ms + byte[]</span></span><br><span class="line"><span class="comment">// -----costTime: 4ms Buffered</span></span><br><span class="line"><span class="comment">// -----costTime: 2ms Buffered + byte[]</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>缓冲字符流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的缓冲输入流</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedReader</span><span class="params">(Reader in)</span>;</span><br><span class="line"><span class="comment">// 创建一个新的缓冲输出流</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedWriter</span><span class="params">(Writer out)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="comment">//缓冲输入流，又称为包装流，使用时需要传入基本输入字符流对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedReader</span><span class="params">(Reader in)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//size，代表设置读取缓冲大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedReader</span><span class="params">(Reader in, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">//缓冲输出流，又称为包装流，使用时需要传入基本输出字符流对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedWriter</span><span class="params">(Writer out)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//size，代表设置写入缓冲大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedWriter</span><span class="params">(Writer out, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟缓冲字节流差不多滴，此处省略啦~</p><p><strong>缓冲字符流特殊使用</strong></p><p>针对文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="comment">//一次读取一行字符串，遇到换行符为止，算是一行</span></span><br><span class="line">    <span class="comment">//该方法的返回值，【不会】包含回车换行（\r\n）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">//写入一行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果下一行是空行，<strong>readLine</strong>方法返回空字符串，也就是<strong>String line &#x3D; “”</strong></li><li>如果没有下一行数据了，<strong>readLine</strong>方法返回<strong>null</strong></li></ul><p>案例描述：结合字符缓存流读一行特性，完成文件的拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test025_BufferedCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影.txt&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影Copy.txt&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f1));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(f2));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// bw.write(line);</span></span><br><span class="line">                <span class="comment">// bw.write(line + &quot;\n&quot;); // 不同的操作系统换行可能不一样</span></span><br><span class="line">                bw.write(line);</span><br><span class="line">                bw.newLine(); <span class="comment">// 插入换行符，会根据系统自动判定</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;success copy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般BufferedReader和PrintWriter连用，原因<strong>PrintWriter自带换行功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">/*println方法重载*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">()</span> &#123;</span><br><span class="line">        newLine();<span class="comment">//换行功能</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(<span class="type">boolean</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            print(x);</span><br><span class="line">            println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            print(x);</span><br><span class="line">            println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0205_PrintWriter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影.txt&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/背影Copy.txt&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(f1));</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(f2));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// pw.write(line);</span></span><br><span class="line">                pw.println(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pw != <span class="literal">null</span>) &#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;success copy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>字符数组流：</strong></p><p>使用字符流，从<strong>字符数组</strong>中读取数据，以及向<strong>字符数组</strong>中写数据。</p><ul><li>java.io.<strong>CharArrayReader</strong> 负责从字符数组中读取数据</li><li>java.io.<strong>CharArrayWriter</strong> 负责把数据写入到字符数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test029_CharArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] arr = <span class="string">&quot;hello China I love you&quot;</span>.toCharArray();</span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">CharArrayReader</span>(arr);</span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">CharArrayWriter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 返回本次一共读了多少个字节</span></span><br><span class="line">            in.read(cbuf);</span><br><span class="line">            <span class="comment">// 将数据写入到了 out对象中的属性里面，该属性是一个字符数组</span></span><br><span class="line">            out.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// CharArrayWriter中的toCharArray方法，可以将写入到out对象中的数据返回</span></span><br><span class="line">            <span class="type">char</span>[] chars = ((CharArrayWriter) out).toCharArray();</span><br><span class="line">            System.out.println(Arrays.toString(chars));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察 <strong>CharArrayWriter</strong> 源码，查看 <strong>toCharArray</strong> 方法是如何实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a copy of the input data.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an array of chars copied from the input data.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">toCharArray</span><span class="params">()</span>[] &#123; </span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(buf, count); <span class="comment">// 直接是复制一份出来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><blockquote><p><strong>1）字符编码和字符集</strong></p><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英 文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符 存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规 则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就 会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><ul><li>字符编码 <strong>Character Encoding</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</li><li>字符集 <strong>Charset</strong> ：也叫<strong>编码表</strong>。是一个系统支持的所有字符的集合，包括 各国家文字、标点符号、图形符号、数字等。<ul><li>编码表:生活中文字和计算机中二进制的对应规则</li></ul></li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必 然至少有一套字符编码。常见字符集有<strong>ASCII字符集、GBK字符集、Unicode字符 集</strong>等。</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230823091329197.png" alt="image-20230823091329197"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li>ASCII字符集 ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交 换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英 语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英 文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII 的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲 常用字符。</li></ul></li><li>ISO-8859-1字符集：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、 德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li>GBxxx字符集：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li>GB2312：简体中文码表。一个小于127的字符的意义与原来相同。但两 个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包 含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们 都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了 两个字节长的编码，这就是常说的”<strong>全角</strong>“字符，而原来在127号以下的那 些就叫”<strong>半角</strong>“字符了。</li><li>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了 双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支 持繁体汉字以及日韩汉字等。</li><li>GB18030：最新的中文码表。收录汉字70244个，采用多字节编码，每个 字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时 支持繁体汉字以及日韩汉字等。</li></ul></li><li>Unicode字符集 ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标 准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编 码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网 页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作 小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开 发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编 码，编码规则：<ul><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ul></li></ul></li></ul></blockquote><blockquote><p><strong>2）编码引出的问题</strong></p><p>使用 <strong>FileReader</strong> 读取项目中的文本文件。由于软件的设置，都是默认的 <strong>UTF-8</strong> 编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件 时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><p>为方便测试，首先将文件另存为时选择编码为gbk编码，然后代码默认去读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test027_GbkToUtf8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src/dir/a.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//       �   @%       a hello，中国</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>字节字符转换</strong></p><ul><li><strong>java.io.OutputStreamWriter</strong>, 可以将<strong>字节输出流—&gt;为字符输出流</strong>，并指定编码</li><li><strong>java.io.InputStreamReader</strong>, 可以将<strong>字节输入流—-&gt;为字符输入流</strong>，并指定编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="comment">//使用默认编码转换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="comment">//略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用指定编码转换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in, String charsetName)</span>&#123;</span><br><span class="line">        <span class="comment">//略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">//使用默认编码转换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream in)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用指定编码转换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream in, String charsetName)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，它的构造器参数，要求传入一个需要转换的字节输出流，和一 指定的字符编码</p><p>指定编码读取案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test027_InputStreamReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.声明流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 转换流，同时也是一个字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span>  <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 2.创建流</span></span><br><span class="line">        <span class="comment">// 创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/File_GBK.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 将字节流转换为字符流（编码选择GBK或者UTF-8试试）</span></span><br><span class="line">        <span class="comment">//注意：转换的要和文件本身编码一致</span></span><br><span class="line">        isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// “包裹”转换流，增强这个字符流的功能，可以一次读出一行字</span></span><br><span class="line">        <span class="comment">// 注意，转换流同时也是一个字符流</span></span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        isr.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你好，中国</span></span><br></pre></td></tr></table></figure><p>指定编码写入案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test027_OutputStreamWriter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/File_GBK.txt&quot;</span>);</span><br><span class="line">        osw =  <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(osw);</span><br><span class="line">        out.println(<span class="string">&quot;你好，程序员！&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把编码改为GBK，运行查看文件的内容，观察有什么不一样的地方</p></blockquote><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><blockquote><p><strong>DataOutputStream</strong> 负责把指定类型数据，转化为字节并写出去</p><p><strong>DataInputStream</strong> 负责把读取到的若干个字节，转化为指定类型的数据</p><p>案例描述：</p><p>完成对应基本数据类型的文件存储，然后按照对应基本数据类型读取文件，需要观 察文件内容格式是否和平常文本直接存入数据是否效果一致，原因为何？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test028_DataStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 基本数据以及字符串写入文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// &quot;包裹&quot;文件字节输出流，增强数据写出共嗯</span></span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        out.writeLong(<span class="number">1000L</span>);</span><br><span class="line">        out.writeInt(<span class="number">5</span>);</span><br><span class="line">        out.writeDouble(<span class="number">10.5D</span>);</span><br><span class="line">        out.writeChar(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        out.writeUTF(<span class="string">&quot;hello，中国&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">// 基本数据以及字符串读取文件</span></span><br><span class="line">        <span class="comment">// “包裹”文件字节输入流，增强读取数据功能</span></span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="comment">// 注意，数据读出来的顺序要，和之前写进去的顺序一致</span></span><br><span class="line">        System.out.println(in.readLong());</span><br><span class="line">        System.out.println(in.readInt());</span><br><span class="line">        System.out.println(in.readDouble());</span><br><span class="line">        System.out.println(in.readChar());</span><br><span class="line">        System.out.println(in.readUTF());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><blockquote><p>java.io.<strong>ObjectOutputStream</strong>, 将Java对象转换为字节序列，并输出到内存、文件、网络等地方（序列化）</p><p>java.io.<strong>ObjectInputStream</strong>，从某个地方读取出对象的字节序列，并生成对应的对象。(反序列化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStream</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span> <span class="keyword">implements</span> <span class="title class_">ObjectOutput</span>,</span><br><span class="line">ObjectStreamConstants</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">ObjectInput</span>,</span><br><span class="line">ObjectStreamConstants</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span><span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>序列化机制</strong></p><blockquote><p>Java 提供了一种对象序列化的机制，可以将对象和字节序列之间进行转换：</p><ul><li>序列化</li></ul><p>程序中，可以用一个字节序列来表示一个对象，该字节序列包含了对象的类型、对象中的数据等。如果这个字节序列写出到文件中，就相当于在文件中保存了这个对象的信息。</p><ul><li>反序列化</li></ul><p>相反的过程，从文件中将这个字节序列读取回来，在内存中重新生成这个对象，对象的类型、对象中的数据等，都和之前的那个对象保持一致。（<strong>注意，这时候的对象和之前的对象，内存地址可能是不同的</strong>）</p><p><img src="/2023/08/13/11-File-IO%E6%B5%81/image-20230822200953812.png" alt="image-20230822200953812"></p><p>完成对象的序列化和反序列化，就需要用到对象流了</p></blockquote><p><strong>序列化要求</strong></p><blockquote><p>在java中，并非所有对象都可以进行序列化和反序列化，而是只有实现了指定接口的对象才可以进行</p><p><strong>java.io.Serializable</strong> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中没有抽象方法，这只是一个“<strong>标识</strong>”接口，实现它的的对象才可以进行 序列化和反序列化操作</p><p>案例描述：将学生对象保存在文件中，并读取出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test026_ObjectStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src/dir/stu.txt&quot;</span>));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line">        <span class="comment">// 读取文件中对象</span></span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/dir/stu.txt&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">            System.out.println(stu1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，必须序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，如果不实现这个接口的，将来序列化操作会报错</strong></p></blockquote><p><strong>transient关键字</strong></p><blockquote><p>java中的关键字 <strong>transient</strong> ，可以修饰类中的属性，它是让对象在进行<strong>序列化</strong> 的时候，忽略掉指定的<strong>属性值</strong>。</p><p>transient 的单词含义就是短暂的、转瞬即逝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// 用在序列化的时候 序列化后 age = 0 相当于值被消掉了</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="随机访问流"><a href="#随机访问流" class="headerlink" title="随机访问流"></a>随机访问流</h2><blockquote><p><strong>java.io.RandomAccessFile</strong> 是JavaAPI中通提供的对文件进行随机访问的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFile</span> <span class="keyword">implements</span> <span class="title class_">DataOutput</span>,</span><br><span class="line">DataInput, Closeable &#123;</span><br><span class="line">    <span class="comment">//传入文件以及读写方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode)</span> <span class="keyword">throws</span></span><br><span class="line">        FileNotFoundException&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳过pos字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seek</span><span class="params">(<span class="type">long</span> pos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出，它并<strong>没有继承</strong>之前介绍到的那四个抽象父类型</p><p>之前使用的每一个流，要么是读数据的，要么是写数据的，而这个随机访问流，它的对象即可读文件，又可写文件，同时它还可以任意定位到文件的某一个位置进行读或者写操作</p><ul><li>对象即可读也可以写</li><li>随机定位文件中的任意字节位置进行读或写，并且可以前后反复定位</li></ul><p>创建该类的对象时，需要指定要操作的文件和操作的模式：</p><ul><li>“r” 模式，以只读方式来打开指定文件夹。如果试图对该RandomAccessFile执 行写入方法，都将抛出IOException异常。</li><li>“rw” 模式，以读写方式打开指定文件。如果该文件尚不存在，则试图创建该 文件。</li><li>“rws” 模式，以读写方式打开指定文件。相对于”rw” 模式，还要求对文件内 容或元数据的每个更新都同步写入到底层设备。</li><li>“rwd” 默认，以读写方式打开指定文件。相对于”rw” 模式，还要求对文件内 容每个更新都同步写入到底层设备。</li></ul><p>案例描述： 将a.txt文件内容：hello peter haha，使用随机访问流进行内容替换，完成后文件 内容：hello parke23</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test028_RandomAccessFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">ras</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/dir/a.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 文件中要替换数据的位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">replacePos</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 文件中要插入的内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replaceContent</span> <span class="operator">=</span> <span class="string">&quot;parker&quot;</span>;</span><br><span class="line"><span class="comment">// 设置randomAccessFile为读写模式</span></span><br><span class="line">ras = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// randomAccessFile定位到要替换数据的位置，准备去写要替换的内容</span></span><br><span class="line">ras.seek(replacePos);</span><br><span class="line"><span class="comment">// 在指定位置，写入需要替换的内容，覆盖原来此位置上的内容</span></span><br><span class="line">ras.write(replaceContent.getBytes());</span><br><span class="line"><span class="comment">// 回到开头，进行读数据</span></span><br><span class="line">ras.seek(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>((len = ras.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// System.out.println(new String(buf, 0, len));</span></span><br><span class="line">System.out.write(buf, <span class="number">0</span> ,len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.flush();</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">ras.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello parker23</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><blockquote><p><strong>这个类不属于流，本质上是一个键值对集合</strong>，Hashtable的子类，在实际开发中我们用来处理配置文件</p><p>可以结合固定文本结构获取数据 创建文件db.properties文件，内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">lwsj</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">lwsj</span></span><br></pre></td></tr></table></figure><p>案例描述：通过Properties类加载db.properties文件，获取文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test028_Properties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 流加载文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/dir/db.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取流对象</span></span><br><span class="line">        p.load(in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(driver + <span class="string">&quot;--&quot;</span> + url + <span class="string">&quot;--&quot;</span> + username + <span class="string">&quot;--&quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// com.mysql.cj.jdbc.Driver--127.0.0.1:8080--lwsj--lwsj</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>欲穷千里目，更上一层楼💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-多线程</title>
      <link href="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java高级编程，灵活运用反射，线程，IO和网络等进行编程</p></blockquote><h1 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h1><blockquote><ul><li>进程</li></ul><p>进程是指一个内存中运行的应用程序，<strong>它是资源分配的最小单位</strong></p><p>一个程序从创建、运行到消亡，这样整个过程就是一个进程</p><p>一个操作系统中可以同时运行<strong>多个进程</strong>，每个进程运行时，系统都会为其<strong>分配独立的内存空间</strong>。</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815160146487.png" alt="image-20230815160146487"></p><p>在操作系统中，启动一个应用程序的时候，会有一个或多个进程同时被创 建，这些进程其实就表示了当前这个应用程序，在系统中的资源使用情况 以及程序运行的情况。如果关闭这个进程，那么对应的应用程序也就关闭 了。</p><ul><li>线程</li></ul><p>线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程，一个进程中也可以有多个线程，此时这个应用程序就可以称之为<strong>多线程程序</strong>，<strong>它是CPU调度的最小单位</strong>。</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815181524122.png" alt="image-20230815181524122"></p><p><font color="#d12920">结论：一个程序运行后至少有一个进程，一个进程中可以包含一个（main线程）或多个线程！</font></p></blockquote><blockquote><p>当一个进程中启动了多个线程去分别执行代码（同时完成多个功能）的时 候，这个程序就是<strong>多线程程序</strong>，内存等资源使用情况如下：</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815182509460.png" alt="image-20230815182509460"></p><p><strong>思考：JVM是多线程吗？</strong></p><p>是，JVM可以在运行进程的同时，进行GC垃圾回收，<strong>同一时刻做不同事情</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01_JVM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test01</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;main end ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test01</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当GC进行垃圾回收指定对象的时候对象的finalize方法会被自动调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test被销毁， n: &quot;</span> + n);</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815183522489.png" alt="image-20230815183522489"></p></blockquote><h1 id="并发并行"><a href="#并发并行" class="headerlink" title="并发并行"></a>并发并行</h1><blockquote><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一时间段内</strong>发生</li></ul><p>线程的并发执行，是指在一个时间段内（微观），两个或多个线程，<strong>使用同一个CPU交替运行。</strong></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815183841996.png" alt="image-20230815183841996"></p><ul><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（<strong>同时发生</strong>）</li></ul><p>线程的并行执行，是指在同一时刻，两个或多个线程，<strong>各自使用一个CPU同时运行</strong></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815184129214.png" alt="image-20230815184129214"></p><p>如果计算机是<strong>单核CPU</strong>的话，那么同一时刻<strong>只能</strong>有一个线程使用CPU来 执行代码 </p><p>如果计算机是<strong>多核CPU</strong>的话，那么同一时刻<strong>有可能</strong>是俩个线程同时使用 不同的CPU执行代码</p><p>补充内容：</p><p>如果我们的计算机是多核的，在程序中编写了俩个线程，然后启动并 运行它们，计算机会用一个CPU运行还是两个CPU去运行，我们无法知 道也无法控制，因为计算机内核中有专门的资源调度算法负责资源的分 配，我们从应用程序的层面无法干涉。</p></blockquote><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a><strong>线程调度</strong></h1><blockquote><ul><li>时间片</li></ul><p>并发多线程只有一个CPU，某个微观时刻，当指定线程拥有CPU的使用权，则该线程代码就可以执行，而其他线程阻塞等待。</p><p>一个线程不可能一直拥有CPU的使用权，不可能一直执行下去，它拥有CPU执行的时间是很短的，微秒纳秒级别，这个时间段我们就称之为CPU时间片。</p><p>线程执行时如果一个时间片结束了，则该线程就会停止运行，并交出CPU的使用权，然后等待下一个CPU的时间片的分配。</p><p>在宏观上，一段时间内，我们感觉俩个线程在同时运行代码，其实在微观中，这两个线程在使用一个CPU的时候，它们是<strong>交替着运行</strong>的，每个线程每次都是运行一个很小的时间片，然后就交出CPU使用权，只是它们俩个交替运行的速度太快了，给我们的感觉，好像是它们俩个线程在同时运行。</p><ul><li>调度方式<ul><li>时间片轮转<ul><li>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间</li></ul></li><li>抢占式调度<ul><li>系统会让优先级高的线程优先使用CPU（提高抢占到的概率），但是如果线程的优先级相同，那么会随机选择一个线程获取当前CPU的时间片</li></ul></li></ul></li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815185836288.png" alt="image-20230815185836288"></p><p><font color="#d12920">JVM中的线程，使用的为抢占式调度。</font></p></blockquote><h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><blockquote><p><strong>java.lang.Thread</strong> 是java中的线程类，所有线程对象都必须是Thread 类或其子类的实例。 每个线程的作用，就是完成我们给它指定的任务，实际上就是执行一段我 们指定的代码。我们只需要在 <strong>Thread 类的子类中重写 run 方法</strong>，完成相应 的功能。</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815190131636.png" alt="image-20230815190131636"></p><p>Java中通过继承Thread类来<strong>创建并启动</strong>一个新的线程的步骤如下：</p><ul><li>定义 Thread 类的子类，重写 run()方法，run() 方法中的代码就是线程的执行任务</li><li>创建Thread子类对象（<strong>可以是匿名内部类对象</strong>），这个对象就代表一个要独立运行的新线程</li><li>调用线程对象的**start()**方法来启动该线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04_Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in main, hello&quot;</span>);</span><br><span class="line">            <span class="comment">// 当前执行代码的线程睡眠500毫秒</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in run hello method&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815190812146.png" alt="image-20230815190812146"></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815191015988.png" alt="image-20230815191015988"></p><p>可以看出，main线程在执行main方法的过程中，创建并启动了t线程， 并且t线程启动后，和main线程就没有关系了，这时候main线程和t线程 <strong>都是自己独立的运行，并且他们俩个是要争夺CUP的时间片（使用权） 的</strong></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815191237243.png" alt="image-20230815191237243"></p><p>attention1: 栈区，又被称为方法调用栈，是线程专门执行方法中代码的地方，并且每一个线程，都有自己都灵的栈空间，和别的线程互不影响。</p><p>attention2: 最先启动的线程是主线程（main线程），因为它要执行程序的入口main方法，在主线程中，创建并且启动了t线程，启动之后main线程和t线程各独立运行，并且争夺CPU的时间片</p><p>attention3：线程启动之后（调用start方法），会开始争夺CPU的时间片，然后<strong>自动执行run</strong>如果子类重写了，那么就调用到重写后的run方法。</p><p>attention4：<strong>堆区是对所有线程的共享的，每个线程中如果创建了对象，那么对象就会存放到堆区中</strong></p><p>attention5：线程对象t被创建出来的时候，它还只是一个普通的对象，但是当调用饿了t.start()方法之后，线程对象t可以说才真正的“<strong>现出原形</strong>”:开辟了单独的栈空间，供线程t调用方法使用</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815192226866.png" alt="image-20230815192226866"></p><ul><li><strong>提高程序的执行效率</strong>：多线程可以让程序同时处理多个任务，从而提高程序的执行效率。尤其是在涉及到大量数据处理或耗时的操作时，多线程可以极大地缩短程序的执行时间。</li><li><strong>提高系统资源利用率</strong>：多线程可以充分利用计算机的多核处理器，同时利用计算机的内存、网 络、磁盘等资源，从而提高系统资源的利用率。</li><li><strong>提高程序的响应速度</strong>：多线程可以使程序在处理任务时不会被阻塞，从而提高程序的响应速度， 保证程序的实时性。</li><li><strong>实现复杂的交互操作</strong>：多线程可以在程序中实现复杂的交互操作，例如同时响应多个用户的请 求，同时执行多个任务等。</li></ul></blockquote><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><blockquote><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815193302936.png" alt="image-20230815193302936"></p><p>实际开发中，这样的方式更常见，书写简洁，<strong>推荐使用</strong>。</p></blockquote><h1 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h1><blockquote><ul><li>默认线程名：</li></ul><p>不管是主线程，还是我们创建的子线程，都是有名字的。默认情况下，<strong>主线程的名字为main</strong>，main线程中创建出的子线程，它们名字命名规则如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread构造器源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">()</span> &#123;</span><br><span class="line">    init(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中， <strong>“Thread-“ + nextThreadNum()</strong> 就是在拼接出这个线程默认的名 字，比如第一个子线程<strong>Thread-0</strong>，第二个为<strong>Thread-1</strong>，第三个为<strong>Thread-2</strong>， 以此类推。</p><ul><li>获取当前线程对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> Thread <span class="title function_">currentThread</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 当前线程 === 执行当前方法的线程</span></span><br><span class="line"><span class="comment">// 也就是看目前是对在调用当前方法。</span></span><br></pre></td></tr></table></figure><ul><li>获取线程名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>常见用法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815193924619.png" alt="image-20230815193924619"></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815194453720.png" alt="image-20230815194453720"></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815194807548.png" alt="image-20230815194807548"></p><p><strong>注意，一定要记得，start方法启动线程后，线程会自动执行run方法</strong> </p><p><strong>千万不要直接调用run方法，这样就不是启动线程执行任务，而是普通的方法调用，和调用sayHello没区别</strong></p></blockquote><blockquote><p>设置线程名</p><ul><li>通过线程对象设置线程名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><ul><li>创建对象时，设置线程名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target, String name)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">//第一种设置方式</span></span><br><span class="line">    thread.setName(<span class="string">&quot;MAIN线程&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;线程名称: &quot;</span> + thread.getName());</span><br><span class="line">    <span class="comment">//第二种设置方式</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;子线程t&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in run, 线程名称：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="main线程"><a href="#main线程" class="headerlink" title="main线程"></a>main线程</h1><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//获取执行当前方法的线程对象</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;执行当前方法的线程名字为：&quot;</span>+currentThread.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//执行当前方法的线程名字为：main</span></span><br></pre></td></tr></table></figure><p>上面代码使用java命令运行的过程是：</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815195526815.png" alt="image-20230815195526815"></p><ul><li>使用java命令运行Test类，会先启动JVM</li><li>应用类加载器通过CLASSPATH环境遍历配置的路径，找到Test.class文件，并加载到方法区<ul><li>注意：这里会同时产生一个<strong>Class类型对象</strong>，来代表这个Test类型，并且会优先处理类中的静态代码（<strong>静态属性、静态方法、静态代码块</strong>）</li></ul></li><li>JVM创建并启动一个名字叫做main的线程</li><li>main线程将Test中的main方法加载到栈区中</li><li>在栈里面，main线程就可以一行行的执行方法中的代码了</li><li>如果在执行代码中，遇到了方法调用，那么线程会继续把被调用的方法，加载到栈中（压栈操作），然后执行<strong>栈顶</strong>这个最新添加进来的方法，栈顶方法执行完，就释放（出栈操作），然后在执行当前最新的栈顶方法</li><li>代码执行过程输出执行结果</li><li>当前是单线程程序，main线程结束了，JVM就停止了</li><li>如果是多线程程序，那么JVM要等于所有线程都结束了才会停止</li></ul></blockquote><h1 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h1><blockquote><p>前面的课程中，我们通过Thread的子类创建线程。 </p><p>现在我们学习第二种创建线程对象的方式：<strong>借助Runnable接口的实现类完 成</strong></p><p><strong>java.lang.Runnable</strong> ，该接口中只有一个抽象方法 run</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815200945017.png" alt="image-20230815200945017"></p><p>其实 <strong>Thread</strong> 类也是 <strong>Runnable</strong> 接口的实现类，其代码结构大致为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread类源码分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/* What will be run. */</span></span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，子类重写Thread中的run方法，这个run方法其实也来自于 Runnable接口</p><p>通过以上的代码结构可知，我们可以借助构造器 <strong>public Thread(Runnable target)</strong> 直接创建线程对象，该构造器需要传一个 Runnable 接口的实现类对象。</p><p>当线程对象创建成功后，调用线程对象 run 方法，默认会调用Runnable实 现类重写的run方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08_Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3.实例化对象</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable2</span>();</span><br><span class="line">        <span class="comment">// r.run();</span></span><br><span class="line">        <span class="comment">// 4.创建Thread对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        th.setName(<span class="string">&quot;child-thread1&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.启动线程</span></span><br><span class="line">        th.start();</span><br><span class="line">        <span class="comment">// 匿名内部类方式 获取Runnable实现类对象</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">80</span>; i &gt;= <span class="number">30</span>; i--)</span><br><span class="line">                    System.out.println(<span class="string">&quot;in thread: &quot;</span> + name + <span class="string">&quot; i: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2, <span class="string">&quot;子线程2&quot;</span>);</span><br><span class="line">        th2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建Runnable实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>; i &lt;= <span class="number">70</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;in thread: &quot;</span> + name + <span class="string">&quot; i:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230815201656256.png" alt="image-20230815201656256"></p><p>两种线程实现方式对比：</p><ul><li>继承Thread类<ul><li>好处：编程比较简单，可以直接使用Thread类中的方法</li><li>缺点：可以扩展性较差，不能再继承其他的类</li></ul></li><li>实现Runnable接口<ul><li>好处：扩展性强，实现该接口的同时还可以继承其他的类</li><li>缺点：编程相对复杂，不能直接使用Tread类中的方法</li></ul></li></ul></blockquote><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><blockquote><p>Java中，线程可以分为两类：</p><ul><li>前台线程 &#x3D; 执行线程 &#x3D; 用户线程</li></ul><p><strong>这种线程专门用来执行用户编写的代码，地位较高，JVM是否会停止运行，就是要看当前是否还有前台线程没有执行完，如果还剩下任意一个前台线程没有“死亡”，那么JVM就不能停止！</strong>（结束立即停止）</p><p>例如，执行程序入口的主线程（main），就是一个前台线程，在单线程程 序中，main方法执行完，就代表main线程执行完了，这时候JVM就停止了</p><p><font color="#d12920">注意：我们在主线程创建并启动的新线程，默认情况下就是一个前台线程</font></p><ul><li>后台线程 &#x3D; 守护线程 &#x3D; 精灵线程</li></ul><p><strong>这种线程是用来给前台线程服务的，给前台线程提供一个良好的运行环境，地位比较低，JVM是否停止运行，根本不关心后台线程的运行情况和状态。</strong>（不关心）</p><p>例如，垃圾回收器，其实就一个后台线程，它一直在背后默默的执行着负 责垃圾回收的代码，为我们前台线程在执行用户代码的时候，提供一个良 好的内存环境。</p><p>设置后台（守护）线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread类守护线程设置源码分析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">    <span class="comment">/* Whether or not the thread is a daemon thread. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">daemon</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setDaemon</span><span class="params">(<span class="type">boolean</span> on)</span> &#123;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        daemon = on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><blockquote><p>线程类Thread中，有一个属性表示线程的优先级，取值1-10，默认为5。线程的优先级越高，越容易获得CPU时间片而执行</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230817191959260.png" alt="image-20230817191959260"></p><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread类线程优先级设置源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> priority;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">        ThreadGroup g;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt;</span><br><span class="line">            MIN_PRIORITY) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">                newPriority = g.getMaxPriority();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//核心代码，底层借助该方法实现</span></span><br><span class="line">            setPriority0(priority = newPriority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setPriority0</span><span class="params">(<span class="type">int</span> newPriority)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可以看出，最终设置线程优先级的方法，是一个native方法，并不是Java语言实现的</p><p>多个线程争夺CPU时间片：</p><ul><li>优先级相同，获得CPU使用权的概率相同</li><li>优先级不同，那么高优先级的线程有更高的概率获取到CPU的使用权</li></ul><p><font color="#d12920">优先级是建议性的，而非强制，可能有效，也可能无效</font></p></blockquote><h1 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h1><blockquote><p>Java中使用 java.lang.ThreadGroup类来表示线程组，它可以对一批线程进行管理，对线程组进行操作，同时也会对线程组里面的这一批线程操作。</p><p>java.lang.ThreadGroup ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadGroup</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadGroup</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadGroup</span><span class="params">(ThreadGroup parent, String name)</span>&#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建线程组的时候，需要指定该线程组的名字。</strong></p><p><strong>也可以指定其父线程组，如果没有指定，那么这个新创建的线程组的父线程组就是当前线程组。</strong></p><p>案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11_ThreadGroup</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">// 获取当前线程的线程组 main 线程组就是它自身</span></span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">currenThreadGroup</span> <span class="operator">=</span> currentThread.getThreadGroup();</span><br><span class="line">        System.out.println(currenThreadGroup);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// java.lang.ThreadGroup[name=main,maxpri=10]</span></span><br><span class="line"><span class="comment">// 可以看出，当前线程组的名字为main，并且线程组中的线程最大优先级可以设置为10</span></span><br></pre></td></tr></table></figure><p>案例2： 用户在主线程中创建的线程，<strong>属于默认线程组（名字叫”main”的线程组）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>();</span><br><span class="line">    <span class="type">ThreadGroup</span> <span class="variable">threadGroup</span> <span class="operator">=</span> t.getThreadGroup();</span><br><span class="line">    System.out.println(threadGroup);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// java.lang.ThreadGroup[name=main,maxpri=10]</span></span><br></pre></td></tr></table></figure><p>案例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ThreadGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;我的线程组&quot;</span>);</span><br><span class="line">    <span class="comment">//指定线程所属的线程组</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group,<span class="string">&quot;t线程&quot;</span>);</span><br><span class="line">    <span class="type">ThreadGroup</span> <span class="variable">threadGroup</span> <span class="operator">=</span> t.getThreadGroup();</span><br><span class="line">    System.out.println(threadGroup);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// java.lang.ThreadGroup[name=我的线程组,maxpri=10]</span></span><br></pre></td></tr></table></figure><p>案例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，启动后，三个线程都会进行休眠，等run方法运行完就“死亡”了</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line"><span class="comment">//返回当前线程组中还没有“死亡”的线程个数</span></span><br><span class="line">System.out.println(<span class="string">&quot;线程组中还在存活的线程个数</span></span><br><span class="line"><span class="string">为：&quot;</span>+group.activeCount());</span><br><span class="line"><span class="comment">//准备好数组，保存线程组中还存活的线程</span></span><br><span class="line">Thread[] arr = <span class="keyword">new</span> <span class="title class_">Thread</span>[group.activeCount()];</span><br><span class="line"><span class="comment">//将存活的线程集中存放到指定数组中，并返回本次存放到数组的存活</span></span><br><span class="line">线程个数</span><br><span class="line">System.out.println(<span class="string">&quot;arr数组中存放的线程个数</span></span><br><span class="line"><span class="string">为：&quot;</span>+group.enumerate(arr));</span><br><span class="line"><span class="comment">//输出数组中的内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr数组中的内容为：&quot;</span>+Arrays.toString(arr));</span><br></pre></td></tr></table></figure><p><font color="skyblue">注意：只有在创建线程对象的时候，才能指定其所在的线程组，线程运行中途不能改变它所属的线程组</font></p></blockquote><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><blockquote><p><strong>java.lang.Thread.State</strong> 枚举类型中（内部类形式），定义了线程的几种状态，其代码结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">/* Java thread status for tools,</span></span><br><span class="line"><span class="comment">    * initialized to indicate thread &#x27;not yet started&#x27;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">threadStatus</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        NEW,</span><br><span class="line">        RUNNABLE,</span><br><span class="line">        BLOCKED,</span><br><span class="line">        WAITING,</span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回线程当前所处的状态</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// get current thread state</span></span><br><span class="line">        <span class="keyword">return</span> sun.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态解释：</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230817200006595.png" alt="image-20230817200006595"></p><p>线程状态变化的情况如下：</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230817200420764.png" alt="image-20230817200420764"></p><p>一个线程从创建到启动、到运行、到死亡，以及期间可能出现的情况。</p><p>分析：</p><ul><li><p>刚创建好的线程对象，就是出于 NEW的状态</p></li><li><p>线程启动后，会处于RUNNABLE状态，其中包含俩种情况</p><ul><li><strong>就绪状态</strong>，此时这个线程没有运行，因为没有抢到CPU的执行权</li><li><strong>运行状态</strong>，此时这个线程正在运行中，因为抢到CPU的执行权</li><li>JavaAPI中没有定义就绪状态和运行状态，而是统一叫做<strong>RUNNABLE（可运行状态）</strong></li><li>线程多次抢到CPU执行权，“断断续续”把 run 方法执行完之后，就变成了<strong>TERMINATED状态（死亡）</strong></li></ul><p>之所以“断断续续”的运行，是因为每次抢到CPU执行权的时候，只是运行很小的一个时间片，完了之后还要重新抢夺下一个时间片并且中间还有可能抢不到的情况。</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230817202259463.png" alt="image-20230817202259463"></p></li></ul></blockquote><h1 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h1><blockquote><p>线程类Thread中的sleep方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 该静态方法可以让当前执行的线程暂时休眠制定的毫秒数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span></span><br><span class="line">        InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><strong>线程执行了sleep方法后，会从RUNNABLE状态进入到TIMED_WAITING状态</strong></li><li><strong>TIMED_WAITING阻塞结束后，线程会自动回到RUNNABLE状态</strong></li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230817202909993.png" alt="image-20230817202909993"></p></blockquote><h1 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h1><blockquote><p>Thread类中 join 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaAPI-Thread源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="comment">//... 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="comment">//... 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：</p><p>join方法，可以让<strong>当前线程阻塞</strong>，等另一个指定线程运行结束后，当前线程才可以继续运行。</p><ul><li>join() 一直等待到线程结束，死等</li><li>join(long millis) 只等待参数毫秒，时间到了后，继续运行</li></ul><p>状态转换：</p><p>线程执行了join()方法后，会从<strong>RUNNABLE状态进入到WAITING（无限期等待）</strong>状态</p><p>线程执行了<strong>join(long million)方法后，会从RUNNABLE进入到TIMED_WAITING（有限期等待）状态</strong></p><p>join方法状态图：</p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818161433956.png" alt="image-20230818161433956"></p></blockquote><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><blockquote><p>如果有多个线程，它们在一段时间内，并发访问堆区中的同一个变量（<strong>含写入操作</strong>），那么最终可能会出现数据和预期的结果不符的情况，这种情况就是线程安全问题。</p><p>案例演示： 模拟电影院售票业务，准备50张电影票，让多个窗口一起售卖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15_ThreadSafe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//TicketRunnable r = new TicketRunnable();</span></span><br><span class="line">        <span class="type">TicketRunnable2</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketRunnable2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;1号窗口&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;2号窗口&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;3号窗口&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name + <span class="string">&quot; 正在卖票，编号：&quot;</span> + num);</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818162322461.png" alt="image-20230818162322461"></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818162608662.png" alt="image-20230818162608662"></p><p>线程安全问题都是由<strong>全局变量及静态变量</strong>引起的</p><p>若每个线程中队全局、静态变量只有读操作，<strong>而无写操作</strong>，一般来说，线程是安全</p><p>若多个线程同时执行写操作，就很可能出现线程安全问题，此时需要<strong>考虑线程同步技术</strong></p></blockquote><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><blockquote><p>Java中提供了线程同步的机制，来解决上述的线程安全问题。 </p><p>Java中实现线程同步，主要借助 <strong>synchronized</strong> 关键字实现。</p></blockquote><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object类及其子类对象都可以作为 线程同步锁对象</span></span><br><span class="line"><span class="keyword">synchronized</span>(mutex锁对象) &#123;</span><br><span class="line">    <span class="comment">//需要同步操作的代码</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决买电影票出现的问题（<strong>加锁</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnable2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//待售票数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//准备锁对象【多个线程必须使用相同锁对象】</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">mutex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//同步代码块：固定书写格式，需要使用同一把锁</span></span><br><span class="line">            <span class="comment">//线程执行流程：</span></span><br><span class="line">            <span class="comment">// 1.线程成功抢占到共享资源mutex(上锁成功)，才能进入代码块执行</span></span><br><span class="line">            <span class="comment">// 其他抢占资源失败的线程，则进入阻塞状态</span></span><br><span class="line">            <span class="comment">// 2.同步代码执行完成，该线程自动释放共享资源(解锁)</span></span><br><span class="line">            <span class="comment">// 其他线程由阻塞转入就绪状态，重新抢占资源(上锁)</span></span><br><span class="line">            <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                <span class="comment">//如果待售数量 小于0，跳出循环，线程结束</span></span><br><span class="line">                <span class="keyword">if</span>(num &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//每隔50ms 销售 一张票</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//输出信息：模拟卖票</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span></span><br><span class="line">                    Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name + <span class="string">&quot; 正在卖票，编号：&quot;</span> + num);</span><br><span class="line">                <span class="comment">//编号自减</span></span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意，要实现线程同步，必须满足下面两个条件：</font></p><ul><li>所有线程都需要参与线程同步</li><li>所有线程必须使用同一个锁对象</li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818163811352.png" alt="image-20230818163811352"></p><p>线程同步理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程只有竞争到锁，才能执行同步代码块中代码(上锁)</span></span><br><span class="line"><span class="keyword">synchronized</span>(mutex锁对象) &#123;</span><br><span class="line">    <span class="comment">// 需要同步操作的代码</span></span><br><span class="line">   <span class="comment">// 程序执行流程离开该代码块，则自动释放锁（解锁）</span></span><br><span class="line">    <span class="comment">// 离开含多种情况，正常出右大括号、break、return或遇到异常跳出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">线程同步可理解成一个规则（进卫生间必须竞争到钥匙开门，离开卫生间必须锁门交出钥匙）</font></p><ul><li>所有的线程都遵循这种规则，才能同步成功</li><li>如果个别线程不遵循规则（不用钥匙，破门而入），则无法实现同步</li></ul><p><font color="#d12920">锁对象可以理解成保证线程同步的重要因素(打开卫生间的唯一钥匙)</font></p><ul><li>多个线程使用同一把锁（用唯一的钥匙开门），才能保证线程同步</li><li>如果使用不同的锁（不同的人用不同的钥匙去开门），则也无法实现线程同步效果</li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818165030648.png" alt="image-20230818165030648"></p></blockquote><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><blockquote><p>使用synchronized修饰的方法，就叫做同步方法，固定格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> [<span class="keyword">static</span>] <span class="keyword">synchronized</span> 返回值类型 同步方法() &#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>同步方法可以是不同成员方法，也可以是static静态方法</li><li>普通成员同步方法，默认锁对象为<strong>this</strong>，即当前方法的调用对象</li><li>static静态同步方法，默认锁对象是<strong>当前类的字节码对象（一个类右且只有一个</strong>）</li></ul><p><strong>类的字节码对象：类名.class，固定用法</strong></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818165827925.png" alt="image-20230818165827925"></p><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230818165943437.png" alt="image-20230818165943437"></p></blockquote><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><blockquote><ul><li>线程间通信</li></ul><p>多个线程并发执行时，在默认情况下CPU是<strong>随机切换线程</strong>的，当我们需要多个线程来共同完成一件任务，并且我们希望他们<strong>有规律的执行</strong>，那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><ul><li>等待唤醒机制</li></ul><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对<strong>同一个变量的使用或操作</strong>。就是多个线程在操作同一份数据时，避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个下次你能有效的利用资源。</p></blockquote><h2 id="wait和notify"><a href="#wait和notify" class="headerlink" title="wait和notify"></a>wait和notify</h2><blockquote><p>Object类中有三个方法：wait()、notify()、notifyAll</p><p>当一个对象，在线程同步的代码中，充当锁对象的时候，在synchronized同步的代码块中，就可以调用这个锁对象的这三个方法了。</p><p>三个核心点：</p><ul><li>任何对象中都一定有这三个方法</li><li>只有对象作为<strong>锁对象</strong>的时候，才可以调用。</li><li>只有在<strong>同步的代码块</strong>中，才可以调用</li></ul><p>其他情况下，调用一个对象的这三个方法，都会报错！</p><ul><li>等待唤醒机制：</li></ul><p>这是多个线程间的一种<strong>协作机制</strong>。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。</p><p>就是在一个线程进行了规定操作后，就进入等待状态（wait()），等待其他线程执行完它们的指定代码过后在将其唤醒（notify()）；在有多个下次你进行等待时，如果需要，可以使用notifyAll()来唤醒所有的等待线程。</p><p>wait&#x2F;notify就是线程间的一种协作机制。</p><ul><li>方法详解：</li></ul><p>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义 如下：</p><ul><li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 <strong>WAITING</strong>。它还 要等着别的线程执行一个<strong>特别的动作，也即是“通知（notify）</strong>”在这个 对象上等待的线程从wait set 中释放出来，重新进入到<strong>调度队列 （ready queue）</strong>中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆 有空位置后，等候就餐最久的顾客最先入座。</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li></ul><p>注意：</p><p>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初终端的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用wait方法之后的地方恢复执行。</p><p>总结如下：</p><ul><li>如果能获取锁，线程就从WAITING状态–&gt;RUNNABLE状态</li><li>否则，从wait set处理，又进入entry set，线程就从WAITING –&gt; BLOCKED</li></ul><p>注意事项：</p><ul><li>wait方法与notify方法必须要由同一个锁对象调用。因为：<strong>对应的锁对象可以通过notify唤醒使用同一个锁对象调用wait方法后的线程。</strong></li><li>wait方法与notify方法是属于Object类的方法。因为：<strong>锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的</strong></li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因 为：<strong>必须要通过锁对象调用这2个方法。</strong></li></ul></blockquote><h2 id="两线程通信"><a href="#两线程通信" class="headerlink" title="两线程通信"></a>两线程通信</h2><blockquote><p>创建两个线程，一个是生产者线程，蒸包子，另一个是消费者线程，吃包 子，要求两个线程轮流执行（先生产再消费）。</p><p>案例实现： </p><ul><li>生产者线程类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bum</span> &#123;</span><br><span class="line">    <span class="comment">//包子数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//包子存在标识</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bum bum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(String name, Bum bum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.bum = bum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bum)&#123;</span><br><span class="line">                <span class="comment">//根据flag判断包子是否存在，如果存在则 线程进行</span></span><br><span class="line">                等待</span><br><span class="line">                    <span class="keyword">if</span>(bum.flag)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            bum.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//生产包子</span></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次，&quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot;: 开始生产包子...&quot;</span>);</span><br><span class="line">                bum.num++;</span><br><span class="line">                System.out.println(<span class="string">&quot;生产完成，包子数量: &quot;</span> + bum.num + <span class="string">&quot;，快来吃!&quot;</span>);</span><br><span class="line">                <span class="comment">//生产完成，修改flag存在标识为true</span></span><br><span class="line">                bum.flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//通知 消费者线程吃包子</span></span><br><span class="line">                bum.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者线程类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bum bum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, Bum bum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.bum = bum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bum)&#123;</span><br><span class="line">                <span class="comment">//根据flag判断包子是否存在，如果不存在则线程等待</span></span><br><span class="line">                <span class="keyword">if</span>(bum.flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bum.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次，&quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot; 开始吃包子...&quot;</span>);</span><br><span class="line">                bum.num--;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费完成，包子数量: &quot;</span> + bum.num + <span class="string">&quot;，快生产吧!&quot;</span>);</span><br><span class="line">                <span class="comment">//消费完成，修改flag存在标识为false</span></span><br><span class="line">                bum.flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//通知 消费者线程吃包子</span></span><br><span class="line">                bum.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建两个线程，一个生产包子，另一个消费包子，要求线程按照</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17_TwoCommunication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//准备共享对象</span></span><br><span class="line">        <span class="type">Bum</span> <span class="variable">bum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bum</span>();</span><br><span class="line">        <span class="comment">//生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(<span class="string">&quot;打工人&quot;</span>,bum);</span><br><span class="line">        <span class="comment">//消费者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;吃货&quot;</span>,bum);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>2个线程通信主要借助wait()、notify()和flag标值完成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag判断)&#123;</span><br><span class="line">    执行wait()等待;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wait()可以让线程进入等待状体</li><li>notify()可以通知等待的某个线程，让其转入就绪状态</li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230819104832846.png" alt="image-20230819104832846"></p></blockquote><h2 id="多线程同通信"><a href="#多线程同通信" class="headerlink" title="多线程同通信"></a>多线程同通信</h2><blockquote><p>创建3个线程，第1个是生产者线程，每次蒸2只包子，第2个是消费者线 程，吃1个包子，第3个也是消费者线程，吃1个包子，要求3个线程轮流执 行（线程1生产，线程2消费，线程3消费）</p><p>案例实现： </p><ul><li>生产者线程类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bum2</span> &#123;</span><br><span class="line">    <span class="comment">// 包子数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 线程执行标识: 0表示线程1执行 1表示线程2执行 2表示线程3执行</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bum2 bum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer1</span><span class="params">(String name, Bum2 bum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.bum = bum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bum) &#123;</span><br><span class="line">                <span class="comment">// 根据flag判断包子是否存在，如果存在则 线程进</span></span><br><span class="line">                行等待</span><br><span class="line">                    <span class="comment">// 注意，此处必须改为while，用if无法实现功能</span></span><br><span class="line">                    <span class="keyword">while</span> (bum.flag != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            bum.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">// 生产包子</span></span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次，&quot;</span> +  <span class="built_in">this</span>.getName() + <span class="string">&quot;: 开始生产包子...&quot;</span>);</span><br><span class="line">                <span class="comment">// 每次生产2个包子</span></span><br><span class="line">                bum.num += <span class="number">2</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;生产完成，包子数量: &quot;</span> + bum.num + <span class="string">&quot;，快来吃!&quot;</span>);</span><br><span class="line">                <span class="comment">// 生产完成，修改flag存在标识为true</span></span><br><span class="line">                bum.flag = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 通知 其他所有线程转入运行</span></span><br><span class="line">                bum.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2个消费者线程类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Customer2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bum2 bum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer2</span><span class="params">(String name, Bum2 bum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.bum = bum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bum) &#123;</span><br><span class="line">                <span class="comment">// 根据flag判断包子是否存在，如果不存在则线程等</span></span><br><span class="line">                待</span><br><span class="line">                    <span class="comment">// 注意，此处必须改为while，用if无法实现功能</span></span><br><span class="line">                    <span class="keyword">while</span> (bum.flag != <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            bum.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot; 开始吃包子...&quot;</span>);</span><br><span class="line">                bum.num--;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费完成，包子剩余数量: &quot;</span></span><br><span class="line">                                   + bum.num);</span><br><span class="line">                <span class="comment">// 消费完成，修改flag存在标识为false</span></span><br><span class="line">                bum.flag = <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// 通知 其他所有线程转入运行</span></span><br><span class="line">                bum.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bum2 bum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer3</span><span class="params">(String name, Bum2 bum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.bum = bum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bum) &#123;</span><br><span class="line">                <span class="comment">// 根据flag判断包子是否存在，如果不存在则线程等待</span></span><br><span class="line">                <span class="comment">// 注意，此处必须改为while，用if无法实现功能</span></span><br><span class="line">                <span class="keyword">while</span> (bum.flag != <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bum.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot; 开始吃包子...&quot;</span>);</span><br><span class="line">                bum.num--;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费完成，包子剩余数量: &quot;</span> + bum.num);</span><br><span class="line">                <span class="comment">// 消费完成，修改flag存在标识为false</span></span><br><span class="line">                bum.flag = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 通知 其他所有线程转入运行</span></span><br><span class="line">                bum.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17_MoreCommunication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bum2</span> <span class="variable">bum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bum2</span>();</span><br><span class="line">        <span class="comment">// 生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer1</span>(<span class="string">&quot;打工人&quot;</span>, bum);</span><br><span class="line">        <span class="comment">// 消费者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer2</span>(<span class="string">&quot;1号吃货&quot;</span>, bum);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer3</span>(<span class="string">&quot;2号吃货&quot;</span>, bum);</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        th3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项： </p><ul><li>多个(3个及以上)线程通信主要借助wait()、notifyAll()和flag标识完成 </li><li>notifyAll()可以通知所有等待的某个线程，让其转入就绪状态 </li><li>flag的判断必须使用while，如果使用if则无法完成功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//notifyAll()会唤醒所有wait线程</span></span><br><span class="line"><span class="comment">//但第一个醒来并上锁成功的那个线程，很可能不是我们想要的</span></span><br><span class="line"><span class="comment">//所以需要使用while再做一次状态判断</span></span><br><span class="line"><span class="comment">//从而保证，只有我们期望的线程 能够成功醒来并上锁成功，往下执行</span></span><br><span class="line"><span class="keyword">while</span>(flag判断) &#123;</span><br><span class="line">    执行wait()等待;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功醒来并上锁成功，往下执行代码</span></span><br><span class="line">doNext...</span><br></pre></td></tr></table></figure></blockquote><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><blockquote><p>程序中要尽量避免出现死锁情况，一旦发生那么只能手动停止JVM的 运行，然后查找并修改产生死锁的问题代码</p><p>简单的描述死锁就是：俩个线程t1和t2，t1拿着t2需要等待的锁不释放，而 t2又拿着t1需要等待的锁不释放，俩个线程就这样一直僵持下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test18_DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;t1拿到左边筷子&quot;</span>);</span><br><span class="line">                        <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;t1拿到右边筷子&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;t1终于吃到心心念念的螺狮粉啦！&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;t2拿到右边筷子&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;t2拿到左边筷子&quot;</span>);</span><br><span class="line">                        <span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;t2拿到左边筷子&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;t2终于吃到心心念念的螺狮粉啦！&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230819111405134.png" alt="image-20230819111405134"></p></blockquote><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><blockquote><p>我们使用线程的时候就去创建一个线程，使用完成线程自 动销毁，这样操作非常简便，但会产生问题： </p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率（<strong>频繁创建线程和销毁线程需要时间</strong>）。 </p><p>那么有没有一种办法使得线程可以复用？即执行完一个任务，并不立即销毁，而是可以继续执行其他的任务。在Java中可以通过<strong>线程池</strong>来达到这样的效果</p></blockquote><h2 id="线程池概念"><a href="#线程池概念" class="headerlink" title="线程池概念"></a>线程池概念</h2><blockquote><p>线程池其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p><ul><li>线程池工作原理理解：</li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230819111754386.png" alt="image-20230819111754386"></p><ul><li><p>线程池优点</p><ul><li>降低资源消耗</li></ul><p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</p><ul><li>提高响应速度</li></ul><p>当任务到达时，任务可以不需要的等到线程创建就能立即执行</p><ul><li>提高线程的可管理性</li></ul><p>可以根据系统的承受能力，调整线程池中工作线程的数目，防止因为消耗过度的内存，而把服务器累趴下（每个线程需要大于1MB内存，线程开的越多，消耗的内存也就越大，最后死机）</p></li></ul></blockquote><h2 id="线程池使用"><a href="#线程池使用" class="headerlink" title="线程池使用"></a>线程池使用</h2><blockquote><p>java里面线程池的顶级接口是 <strong>java.util.concurrent.Executor</strong>,但是严格意义上将 Executor 并不是一个线程池，而只是一个执行线程的工具类。真正的线程池接口是 <strong>java.util.concurrent.ExecutorService</strong>.</p><p>创建线程池的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span>;</span><br></pre></td></tr></table></figure><ul><li>返回线程池对象。（创建的是有界线程池，也就是池中的线程个数可以指定最大数量）</li></ul><p>使用线程池对象方法：</p><ul><li>public Future&lt;?&gt; submit(Runnable task)</li><li>Future接口：用来记录线程任务执行完毕后产生的结果  <strong>（异步处理，不必等待结果完成，可以先去做别的事情，等到结果完成会自动过来取）</strong></li><li>获取线程池中的某一个线程对象，并执行</li></ul><p>线程池操作步骤：</p><ul><li>创建线程池对象（ExecutorService类对象）</li><li>创建Runnable接口子类对象</li><li>提交Runnable接口子类对象（借助submit方法实现）</li><li>关闭线程池（一般不做）</li></ul><p>案例实现： Runnable实现类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test19_ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过Executors来创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">SwimmingPool</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SwimmingPool</span>();</span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwimmingPool</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要一个教练 游泳池共享&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;教练来啦&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230819121434077.png" alt="image-20230819121434077"></p></blockquote><h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h1><blockquote><p><strong>实现多线程的第三种方式: 实现Callable接口</strong>，该方式使用不 多，大家了解即可。</p><ul><li>相关方法</li></ul><p><img src="/2023/08/13/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20230819122214082.png" alt="image-20230819122214082"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test20_Callable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="comment">// 3、实例化Callable的实现类对象</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">// 4、创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数</span></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">        <span class="comment">// 5.创建Thread对象，并传递ft对象作为构造器参数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        <span class="comment">// 6、开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、获取线程方法执行后返回的结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建Callable的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跟girl唱告白气球第&quot;</span> + i + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回值就表示线程运行完毕之后的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I like you&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种线程实现方式对比：</p><ul><li>实现Runnable、Callable接口<ul><li>好吃：扩展性强，实现该接口的同时还可以继承其他的类。Callable接口可以获取线程处理函数执行的结果</li><li>缺点：编程相对复杂，不能直接使用Thread类中的方法</li></ul></li><li>继承Thread类<ul><li>好处：编程比较简单，可以直接使用Thread类中的方法</li><li>缺点：可以扩展性较差，不能再继承其他的类</li></ul></li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>穷则独善其身，达则兼济天下。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-异常</title>
      <link href="/2023/08/13/09-%E5%BC%82%E5%B8%B8/"/>
      <url>/2023/08/13/09-%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>程序在运行过程中，由于意外情况导致程序发生异常事件，默认情况下发生的异常会终端程序的运行。在Java中，把常见的异常情况，都<strong>抽象成了对应的异常类型</strong>，那么每种异常类型都代表了一种特定的异常情况。</p><p>当程序中出现一种异常情况时，也会<strong>创建并抛出一个异常类型对象</strong>，这个对象就表示当前程序所出向的问题。</p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814155455701.png" alt="image-20230814155455701"></p><ul><li>java.lang.<strong>ArrayIndexOutOfBoundsException</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//这行代码执行时，出现异常情况，因为下标超过了数组的最大边界</span></span><br><span class="line">        System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArrayIndexOutOfBoundsException: <span class="number">4</span></span><br><span class="line">at com.briup.demo.Test.main(Test.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>当前程序出现异常情况时，会创建并抛出和该异常情况对应的<strong>异常类的对象</strong>，这个异常对象中<strong>保存了一些信息</strong>，用来表示当前程序到底发生了什么<strong>异常情况</strong>。</p><p>通过异常信息，我们可以定位异常发生的位置，以及异常发生的原因。</p></blockquote><h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><blockquote><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814155856394.png" alt="image-20230814155856394"></p><ul><li><strong>Throwable</strong>：表示可以被抛出的</li><li><strong>Error</strong>：表示错误情况，一般是程序中出现了比较严重的问题，并且程序自身并无法进行处理。</li><li><strong>Exception</strong>：表示异常情况，程序中出了这种异常，大多是可以通过特定的方式进行处理和纠正的，并且处理完了之后，程序还可以继续往下正常运行。</li></ul><p><font color="skyblue">注意，我们一般说的异常，都是指的Exception</font></p><p>Exception中并没有定义方法，它的方法都是从Throwable中继承过来的，其中常用的方式有：</p><ul><li><strong>printStackTrace(), 打印输出当前发送异常的详细信息</strong></li><li><strong>getMessage()，返回异常对象被抛出的时候，所携带的信息，一般是异常的发生原因</strong></li><li>printStackTrace(<strong>PrintWriter s</strong>) ，方法重载，可以指定<strong>字符输出流</strong>，对异常信息进行输出</li><li>printStackTrace(<strong>PrintStream s)</strong> ，方法重载，可以指定<strong>字节输出流</strong>，对异常信息进行输出</li></ul></blockquote><h2 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h2><blockquote><ul><li>编译时异常</li></ul><p>编译时异常，继承自<strong>Exception类</strong>，也称为<strong>checked exception</strong>，编译器在<strong>编译期间，会主动检查这种异常，发现后会报错</strong>，并提示我们要对这种异常进行处理。</p><ul><li>运行时异常</li></ul><p>运行时异常，继承自<strong>RuntimeException类</strong>，也称为 unchecked exception， 编译器在<strong>编译期间，不会检查这种异常，也不要求我们去处理</strong>，但是在运行期间，代码中可能会抛出这种类型的异常。</p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814161617015.png" alt="image-20230814161617015"></p></blockquote><blockquote><ul><li>Error<ul><li><strong>StackOverflowError</strong> - 栈溢出错误：递归调用导致栈空间耗尽。</li><li><strong>OutOfMemoryError</strong> - 内存溢出错误：内存不足以容纳应用程序所需的对象。</li><li><strong>NoClassDefFoundError</strong> (类未定义错误) - 在运行时找不到某个类的定义。</li><li><strong>UnsatisfiedLinkError</strong> (链接库未满足错误) - 本地方法无法找到对应的本地库实现。</li><li><strong>InternalError</strong> (内部错误) - Java虚拟机遇到内部错误。</li><li><strong>VirtualMachineError</strong> (虚拟机错误) - 通用的虚拟机错误类。</li><li><strong>AssertionError</strong> (断言错误) - 断言失败时抛出，通常用于调试和测试。</li><li><strong>UnknownError</strong> (未知错误) - 未知的错误类型。</li></ul></li><li>Exception<ul><li><strong>IOException</strong> (输入&#x2F;输出异常) - 在I&#x2F;O操作期间可能发生的异常。</li><li><strong>ClassNotFoundException</strong> (类未找到异常) - 尝试加载不存在的类时抛出的异常。</li><li><strong>SQLException</strong> (SQL异常) - 在执行SQL查询时可能发生的异常。</li><li><strong>FileNotFoundException</strong> (文件未找到异常) - 尝试访问不存在的文件时抛出的异常。</li><li><strong>InstantiationException</strong> (实例化异常) - 在创建类的实例时遇到问题时抛出的异常。</li><li><strong>IllegalAccessException</strong> (非法访问异常) - 在访问类的成员时权限不足时抛出的异常。</li><li><strong>InterruptedException</strong> (中断异常) - 线程在等待或休眠期间被中断时抛出的异常。</li><li><strong>NoSuchMethodException</strong> (方法未找到异常) - 尝试调用不存在的方法时抛出的异常。</li><li><strong>NoSuchFieldException</strong> (字段未找到异常) - 尝试访问不存在的字段时抛出的异常。</li><li><strong>CloneNotSupportedException</strong> (克隆不支持异常) - 尝试克隆不支持克隆的对象时抛出的异常。</li></ul></li><li>RuntimeException (<strong>记得时Exception的子类哈~</strong>)<ul><li><strong>NullPointerException</strong> (空指针异常) - 尝试在引用为空的对象上调用方法或访问属性时抛出的异常。</li><li><strong>ArrayIndexOutOfBoundsException</strong> (数组索引越界异常) - 尝试访问数组中不存在的索引时抛出的异常。</li><li><strong>IllegalArgumentException</strong> (非法参数异常) - 传递给方法的参数不合法时抛出的异常。</li><li><strong>ArithmeticException</strong> (算术异常) - 发生算术错误时抛出的异常，如除以零。</li><li><strong>ClassCastException</strong> (类型转换异常) - 尝试将对象强制转换为不兼容的类型时抛出的异常。</li><li><strong>NumberFormatException</strong> (数字格式异常) - 将字符串转换为数字时，字符串格式不正确时抛出的异常。</li><li><strong>UnsupportedOperationException</strong> (不支持操作异常) - 尝试调用不支持的方法时抛出的异常。</li><li><strong>ConcurrentModificationException</strong> (并发修改异常) - 在使用迭代器遍历集合时，另一个线程修改了集合。</li></ul></li></ul></blockquote><h2 id="异常传播"><a href="#异常传播" class="headerlink" title="异常传播"></a>异常传播</h2><blockquote><p>如果一个方法中抛出了异常，并且一直没有进行处理，那么这个异常将会抛给当前方法的调用者，并<strong>一直向上抛出</strong>，<strong>直到抛给JVM</strong>，最后JVM将这个异常信息打印输出，同时程序运行的停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        test1();</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814165732639.png" alt="image-20230814165732639"></p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814165829761.png" alt="image-20230814165829761"></p><p>可以看出，异常信息打印输出的内容，就是发生异常的时候，栈区中方法调用的情况！</p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814165932030.png" alt="image-20230814165932030"></p><p><font color="skyblue">如果，在异常传播的过程中，任何一个地方对异常进行了处理，那么JVM不会停止，程序还会正常往下运行！</font></p></blockquote><h1 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h1><h2 id="自动抛出异常"><a href="#自动抛出异常" class="headerlink" title="自动抛出异常"></a>自动抛出异常</h2><blockquote><p>当前java代码中，出现了提前指定好的异常情况的时候，<strong>代码会自动创建异常对象，并且将该异常对象抛出。</strong></p><p>例如，当代码中执行 int a &#x3D; 1&#x2F;0; 的时候，代码<strong>会自动创建并抛出</strong> ArithmeticException 类型的 异常对象，来表示当前的这种异常情况。（算术异常）</p><p>例如，当前代码中执行 String str &#x3D; null; str.toString(); 的时候，代码<strong>会自动创建并抛出</strong> NullPointerException 类型的异常对象，来表示当前这种异常情况。（空指针异常）</p></blockquote><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><blockquote><p>以上描述的异常情况，都是JVM中提前规定好的，我们不需要干预，JVM内部自己就会创建并爆出异常对象。</p><p>我们可手动创建并抛出异常对象，其效果也是一样的。</p><ul><li>RuntimeException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;lwsj&quot;</span>.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名不匹配！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">注意，因为方法中抛出的是一个运行时异常，编译器不会做出检查，所以代码可以正常的编译运 行，但是运行的时候，name的值不是tom的时候，代码会报错，这个错误信息是我们自己抛出的</font></p><ul><li>Exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;lwsj&quot;</span>.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;用户名不匹配！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">使用throws关键字，声明方法所抛出的异常类型即可 </font></p><p>这个声明的目的，就是告诉test方法的<strong>调用者</strong>，你调用我的这个test方法的时候要小心啦，方法在运行的时候<strong>可能</strong>会抛出Exception类型的异常 </p><p>这里描述为<strong>可能</strong>会抛出异常的原因是，只有name的值不是tom的时候才会抛出异常，其他情况没 有异常！</p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814171517943.png" alt="image-20230814171517943"></p><p>可以看出， <strong>forName</strong> 就声明了，方法在执行过程中可能会抛出 <strong>ClassNotFoundException</strong> 类型 的异常 </p><p>同时， <strong>ClassNotFoundException</strong> 属于编译异常，所以我们调用 <strong>forName</strong> 方法时候就要处理这 个异常，或者将异常继续抛出！</p><p><font color="#d12920">思考，为什么方法内抛出异常对象使用关键字throw，方法上声明异常使用的是throws？</font></p><ul><li>声明位置<ul><li>throw 方法内部声明</li><li>throws 方法i上声明</li></ul></li><li>抛出异常的个数<ul><li>throw 每一个只能抛出一个异常对象</li><li>throws 可以抛出多个异常类的声明</li></ul></li><li>关键字的作用<ul><li>throw 抛出方法或代码快中的异常，编译时异常和运行时异常都可以被抛出</li><li>throws 标识该方法可能抛出的异常列表，<strong>调用者需要将异常范围从小到大进行catch</strong></li></ul></li></ul></blockquote><h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><blockquote><ul><li>把这个异常在<strong>方法上进行声明抛出</strong></li><li>把这个异常在<strong>方法内进行捕获处理</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明抛出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String className)</span><span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    Class.forName(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这里我们并没有处理forName方法抛出的异常，而是将这个异常继续声明抛出，<strong>那么将来谁调用我们的test方法，谁就要处理这个异常情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String className)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(className);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了try-catch语句块，对<strong>可能</strong>抛出异常的代码进行异常捕获处理</p></blockquote><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h2><blockquote><p>try-catch语句块，就是用来对指定代码，进行异常补货处理，并且处理完成后，JVM不会停止运行，代码仍然可以正常的往下运行！</p><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 编写可能会出现异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类型 e) &#123;</span><br><span class="line">   <span class="comment">// 处理异常的代码，可以是简单的输出异常信息，也可以使用日志进行了记录，可以对数据进行修改纠正等操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try：该代码块中编写可能产生异常的代码。</p><p>catch：用来进行某种异常的捕获，并对捕获到的异常进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap09.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.test(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;parker&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;lwsj&quot;</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;用户名不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814184604195.png" alt="image-20230814184604195"></p></blockquote><h2 id="捕获多种异常"><a href="#捕获多种异常" class="headerlink" title="捕获多种异常"></a>捕获多种异常</h2><blockquote><ul><li>第一种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.briup.demo.Student&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;sayHello&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//forName声明抛出ClassNotFoundException</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">            <span class="comment">//getMethod方法声明抛出NoSuchMethodException</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(methodName);</span><br><span class="line">            <span class="comment">//invoke方法声明抛出IllegalAccessException和InvocationTargetException</span></span><br><span class="line">            m.invoke(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException |</span><br><span class="line">                 IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，使用一个catch语句，里面使用 | 来表示捕获多种不同的异常类型</p><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.briup.demo.Student&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;sayHello&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//forName声明抛出ClassNotFoundException</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">            <span class="comment">//getMethod方法声明抛出NoSuchMethodException</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(methodName);</span><br><span class="line">            <span class="comment">//invoke方法声明抛出IllegalAccessException和InvocationTargetException</span></span><br><span class="line">            m.invoke(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，使用了四个catch语句，分别对四种不同的异常类型进行捕获处理</p><p><font color="#d12920">注意：子类异常先catch，父类异常后catch</font></p><ul><li>第三种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.briup.demo.Student&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;sayHello&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//forName声明抛出ClassNotFoundException</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="comment">//getMethod方法声明抛出NoSuchMethodException</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(methodName);</span><br><span class="line">        <span class="comment">//invoke方法声明抛出IllegalAccessException和InvocationTargetException</span></span><br><span class="line">        m.invoke(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，使用了一个catch语句，但是捕获的异常类型是Exception，它是最大的异常类型，由于多态的 原因，Exception类型的引用e，可以<strong>捕获接收到任意类型的异常对象</strong></p></blockquote><h2 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h2><blockquote><ul><li>不使用finally</li></ul><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814185433020.png" alt="image-20230814185433020"></p><p><strong>其实只要使用 finally 关键，就可以保证指定代码一定会执行，无论是否发生异常！</strong></p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814185624627.png" alt="image-20230814185624627"></p></blockquote><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><h2 id="自定义异常的原因"><a href="#自定义异常的原因" class="headerlink" title="自定义异常的原因"></a>自定义异常的原因</h2><blockquote><p> <img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814185745070.png" alt="image-20230814185745070"></p></blockquote><h2 id="如何自定义异常"><a href="#如何自定义异常" class="headerlink" title="如何自定义异常"></a>如何自定义异常</h2><blockquote><ul><li>如果要自定义一个编译时异常类型，就自定义一个类，并继承 Exception</li><li>如果要自定义一个运行时异常类型，就自定义一个类，并继承 RuntimeException</li></ul><p>如，自定义编译时异常类型，通过名字可知，这是在用户登录期间发生异常时，应该创建并抛出的异 常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginExceptin</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginExceptin</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginExceptin</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，自定义运行时异常类型，通过名字可知，这是在修改用户信息期间发生异常时，应该创建并抛出 的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModifyUserInfoExceptin</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ModifyUserInfoExceptin</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ModifyUserInfoExceptin</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前我们在系统的日志信息中看到 <strong>LoginExceptin</strong> 和 <strong>ModifyUserInfoExceptin</strong> 这俩种异常类型的 信息时，就知道是用户在登录和修改信息的时候，出现了问题。</p><p>使用枚举实现：</p><ul><li>枚举代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap09.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StudentMessageCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    STUDENT_INFO_NOT_EXIST(<span class="number">10001</span>, <span class="string">&quot;学生信息不存在&quot;</span>), STUDENT_INFO_EXIST(<span class="number">10002</span>, <span class="string">&quot;学生信息已存在在&quot;</span>),</span><br><span class="line">    STUDENT_ID_NOT_UPDATE(<span class="number">10003</span>, <span class="string">&quot;学生信息中学号无法修改&quot;</span>), TEACHER_ACCESS_DENIED(<span class="number">20001</span>, <span class="string">&quot;老师权限不足&quot;</span>),</span><br><span class="line">    DATA_TYPE_MISMATCHED(<span class="number">30001</span>, <span class="string">&quot;数据类型不匹配&quot;</span>), USERNAME_PASSWORD_ERROR(<span class="number">40000</span>, <span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StudentMessageCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StudentMessageCode</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name() + <span class="string">&quot;[code=&quot;</span> + <span class="built_in">this</span>.code + <span class="string">&quot;, msg = &quot;</span> + <span class="built_in">this</span>.msg + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异常代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义学生信息关系系统的异常通用列 就不使用或者单参数String的，直接维护的是枚举</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luozongwei</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6533744059542724668L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmException</span><span class="params">(StudentMessageCode smec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(smec.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_SmTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        studentManger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">studentManger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmException</span>(StudentMessageCode.STUDENT_ID_NOT_UPDATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="断言-assert"><a href="#断言-assert" class="headerlink" title="断言 assert"></a>断言 assert</h1><blockquote><p>断言（<strong>assert</strong>），是JDK1.4的时候，增加的一个关键字。用它可以再程序中，确认一些关键性条件必须是成立的，否则会抛出<strong>AssertionError</strong>类型的错误。</p><p>注意，断言（<strong>assert</strong>）并不是用来代替<strong>if</strong>判断的，而是确认系统中的一些<strong>关键性条件是必须成立</strong>的，所以<strong>assert和if</strong>并不冲突，并且还可以通过给JVM传参数，来控制断言（<strong>assert</strong>）是否生效。</p><p>断言（assert）的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> 布尔表达式;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">assert</span> 布尔表达式 : <span class="string">&quot;错误信息&quot;</span>;</span><br></pre></td></tr></table></figure><p>当布尔表达式为true是，断言通过，否则抛出<strong>AssertionError</strong>类型错误</p><p>所以，assert后面的布尔表达式必须是true才行。（也就是条件必须成立）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> a != <span class="number">0</span> : <span class="string">&quot;参数a不能为0&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> b / a;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，JVM是没有开启断言功能的，需要通过给JVM传参打开此项功能</p><p>需要使用 <strong>-enableassertions</strong> 或者 <strong>-ea</strong> JVM参数</p><p>例如：<strong>java -ea com.xxx.demo.Test</strong></p><ul><li>ecplise开启</li></ul><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814193125268.png" alt="image-20230814193125268"></p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814193320537.png" alt="image-20230814193320537"></p><ul><li>idea开启</li></ul><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814193546038.png" alt="image-20230814193546038"></p><p><img src="/2023/08/13/09-%E5%BC%82%E5%B8%B8/image-20230814193701969.png" alt="image-20230814193701969"></p><p>此时的运行结果为：因为断言要求参数a不能为0，但实际参数传的为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.AssertionError: 参数a的值不能为<span class="number">0</span></span><br><span class="line">    at com.briup.demo.Test.test(Test.java:<span class="number">14</span>)</span><br><span class="line">    at com.briup.demo.Test.main(Test.java:<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><strong>如果去掉 -ea参数的话，那么断言（assert）语句，在JVM执行代码的时候，会被直接忽略的</strong></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>天生我材必有用，千金散去还复来。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-2-泛型-注解</title>
      <link href="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h2><blockquote><p><strong>泛型（Generics）</strong>的概念是在<strong>JDK1.5</strong>中引入的，它的主要目的是为了解决类型<strong>安全性和代码复用</strong>的问题</p><p>泛型是一种强大的特性，它允许我们在定义类、接口和方法时使用<strong>参数化类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T是数据类型，但是不是确定的数据类型</span></span><br><span class="line"><span class="comment">//程序员在使用该类的时候，传入什么具体的类型给T，T就代表什么类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123; <span class="comment">// 泛型类，使用类型参数T</span></span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">泛型能够使我们编写出来通用的代码，提高代码的可读性和重用性。通过使用泛型，我们可以再类、接口和方法中使用类型参数，使得代码可以处理不同类型的数据，同时保持类型安全。</font></p></blockquote><h2 id="泛型应用"><a href="#泛型应用" class="headerlink" title="泛型应用"></a>泛型应用</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    c.add(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">    c.add(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">    c.add(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">    <span class="comment">//编译报错，add(E e) 已经变为 add(String e)</span></span><br><span class="line">    <span class="comment">//int类型的数据1，是添加不到集合中去的</span></span><br><span class="line">    <span class="comment">//c.add(1);</span></span><br><span class="line">    <span class="keyword">for</span>(String str : c) &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，传入泛型参数后，add方法只能接收String类型的参数，其他类型的数据无法添加到集合中，同时在遍历集合的时候，也不需要我们做类型转换了，直接使用String类型变量接收就可以了，<strong>JVM会自动转换的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">// 可以简写为菱形泛型形式：砖石表达式</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>菱形泛型（Diamond Operator）是JDK7中引入的一种语法糖，用于简化泛型的 类型推断过程。</strong></p><p>Map接口使用泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map接口也是泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    V <span class="title function_">put</span><span class="params">(K key, V value)</span>;</span><br><span class="line">    Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><blockquote><ul><li>泛型类</li></ul><p>如果泛型参数定义在类上面，那么这个类就是一个泛型类</p><p>泛型类定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名&lt;泛型类型名<span class="number">1</span>,泛型类型名<span class="number">2</span>,...&gt; &#123;</span><br><span class="line">    <span class="number">0</span>个或多个数据成员;</span><br><span class="line">    <span class="number">0</span>个或多个构造方法;</span><br><span class="line">    <span class="number">0</span>个或多个成员方法;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：之前用确定数据类型的地方，现在使用自定义泛型类型名替代</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813154145407.png" alt="image-20230813154145407"></p><p>泛型类实例化对象格式： <strong>泛型类名&lt;具体类型1,具体类型2,…&gt; 对象名 &#x3D; new 泛型类名&lt;&gt;(实参列 表);</strong></p><p><strong>注意：实际开发中，我们自定义泛型类的情况并不多，大家掌握定义泛型类、实例化泛型类对象的固定格式即可。</strong></p><ul><li>泛型接口</li></ul><p>如果泛型参数定义在接口上面，那么这个接口就是一个泛型接口</p><p>定义格式： <strong>[修饰符] interface 接口名&lt;泛型类型名1,泛型类型名2,…&gt; { }</strong></p><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813154552166.png" alt="image-20230813154552166"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span>&lt;T&gt; &#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建匿名内部类</span></span><br><span class="line">    Action&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">Action</span>&lt;&gt;() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型方法</li></ul><p>如果泛型参数定义在方法上面，那么这个方法就是一个泛型方法</p><p>泛型方法定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] &lt;泛型类型名&gt; 返回值类型 方法名(形式参数列表)&#123;</span><br><span class="line">    方法具体实现;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型方法调用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类对象.泛型方法（实参列表）;</span><br><span class="line">类名.<span class="keyword">static</span> 泛型方法（实参列表）;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：泛型方法调用时不需要额外指定泛型类型，系统自动识别泛型类型。</font></p><p>案例展示： 在上述Circle泛型类中，补充 泛型方法<strong>disp()和static show()</strong> ，并调用， 验证上述格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span>&lt;T,E&gt; &#123; <span class="comment">// T,E</span></span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//泛型类中定义 泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;F&gt; <span class="keyword">void</span> <span class="title function_">disp</span><span class="params">(F f)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in 泛型方法disp, f: &quot;</span> + f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面写法虽然不会报错，不建议大家这样写</span></span><br><span class="line">    <span class="comment">// 因为泛型方法上的 T 会和 泛型类上的 T 产生歧义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123; <span class="comment">// T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;in 泛型static方法show, t: &quot;</span> + t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Circle&lt;Integer,Integer&gt; c = <span class="keyword">new</span> <span class="title class_">Circle</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//public &lt;F&gt; void disp(F f);</span></span><br><span class="line">    <span class="comment">//调用时系统自动识别泛型方法类型</span></span><br><span class="line">    c.disp(<span class="number">1</span>); <span class="comment">//Integer</span></span><br><span class="line">    c.disp(<span class="number">2.3</span>); <span class="comment">//Double</span></span><br><span class="line">    c.disp(<span class="string">&quot;hello&quot;</span>);<span class="comment">//String</span></span><br><span class="line">    c.disp(<span class="string">&#x27;h&#x27;</span>); <span class="comment">//Character</span></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">    <span class="comment">//public static &lt;T&gt; void show(T t);</span></span><br><span class="line">    <span class="comment">//通过类名可以直接调用，不需要额外指定泛型类型</span></span><br><span class="line">    Circle.show(<span class="number">2.3</span>);</span><br><span class="line">    Circle.show(<span class="number">2</span>);</span><br><span class="line">    Circle.show(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813160317417.png" alt="image-20230813160317417"></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>先看俩种错误的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译通过</span></span><br><span class="line"><span class="comment">//父类型的引用，指向子类对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//编译通过</span></span><br><span class="line"><span class="comment">//Object[]类型兼容所有的【引用】类型数组</span></span><br><span class="line"><span class="comment">//arr可以指向任意 引用类型 数组对象</span></span><br><span class="line">Object[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//编译失败</span></span><br><span class="line"><span class="comment">//注意，这个编译报错，类型不兼容</span></span><br><span class="line"><span class="comment">//int[] 是基本类型数组</span></span><br><span class="line">Object[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//编译失败</span></span><br><span class="line"><span class="comment">//错误信息：ArrayList&lt;Integer&gt;无法转为ArrayList&lt;Object&gt;</span></span><br><span class="line"><span class="comment">//在编译期间，ArrayList&lt;Integer&gt;和ArrayList&lt;Object&gt;是俩个不同的类型，并且没有子父类型的关系</span></span><br><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意, &#x3D;号两边的所指定的泛型类型，必须是要一样的</font></p><p>这里说的泛型类型，指的是&lt;&gt;中所指定的类型</p><p><strong>虽然 Integer 是 Object 的子类型</strong>，<strong>但是 ArrayList 和 ArrayList 之间没有子父类型的关系</strong>，它们就是俩个不同的类型所以，</p><p><strong>Object o &#x3D; new Integer(1);</strong> 编译通过 </p><p><strong>ArrayList list &#x3D; new ArrayList();</strong> 编译报错 </p><p>也就是说，俩个类型，如果是当做泛型的指定类型的时候，就没有多态的特点了</p></blockquote><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><blockquote><p><strong>?：可以通配任意类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：这使用test方法中的参数类型，使用了泛型，并且使用问号来表示这个泛型的类型，这个问号就是通配符，可以匹配所有的泛型类型</p><p>test方法可以接收，<strong>泛型是任意引用类型</strong>的 Collection集合对象、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    t.test(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">    t.test(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">    t.test(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;());</span><br><span class="line">    t.test(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;任意引用类型&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用通配符（?）所带来的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;?&gt; c;</span><br><span class="line">c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">// 编译报错</span></span><br><span class="line"><span class="comment">// 因为变量c所声明的类型是Collection，同时泛型类型是通配符（?）</span></span><br><span class="line"><span class="comment">// 那么编译器也不知道这个?将来会是什么类型，因为这个?只是一个通配符</span></span><br><span class="line"><span class="comment">// 所以，编译器不允许使用变量c来向集合中添加新数据。</span></span><br><span class="line">c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 编译通过</span></span><br><span class="line"><span class="comment">// 但是有一个值是可以添加到集合中的，null</span></span><br><span class="line"><span class="comment">// 集合中一定存的是引用类型，null是所有引用类型共同的一个值，所以一定可以添加进去。</span></span><br><span class="line">c.add(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>虽然使用通配符（?）的集合，不能再往其中添加数据了，但是可以遍历集合取 出数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;hello4&quot;</span>);</span><br><span class="line">    Collection&lt;?&gt; c = list;</span><br><span class="line">    <span class="comment">//编译报错</span></span><br><span class="line">    <span class="comment">//c.add(&quot;hello5&quot;);</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj : c) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="泛型边界"><a href="#泛型边界" class="headerlink" title="泛型边界"></a>泛型边界</h2><blockquote><p>在默认情况下，泛型的类型是可以任意设置的，只要是引用类型就可以。</p><p>如果在泛型中使用 <strong>extends 和 super</strong> 关键字，就可以对泛型的类型进行限制。 即：规定泛型的<strong>上限和下限。</strong></p><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813163423908.png" alt="image-20230813163423908"></p></blockquote><h3 id="泛型上限"><a href="#泛型上限" class="headerlink" title="泛型上限"></a>泛型上限</h3><blockquote><ul><li>例如： List &lt;? extends Number&gt; list</li><li>将来引用list就可以接收泛型是<strong>Number 或者 Number子类型</strong>的List集合对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list;</span><br><span class="line">    <span class="comment">//list可以指向泛型是Number或者Number【子】类型的集合对象</span></span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br><span class="line">    <span class="comment">//编译报错，因为String不是Number类型，也不是Number的子类型</span></span><br><span class="line">    <span class="comment">//list = new ArrayList&lt;String&gt;();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>能表示数字的类型都是Number类型的子类型，例如Byte Short Integer Long 等</strong></p></blockquote><h3 id="泛型下限"><a href="#泛型下限" class="headerlink" title="泛型下限"></a>泛型下限</h3><blockquote><ul><li>例如：List &lt;? super Number&gt; list</li><li>将来引用list就可以接收泛型是Number或者Number父类型的List集合对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;? <span class="built_in">super</span> Number&gt; list;</span><br><span class="line">    <span class="comment">//list可以指向泛型是Number或者Number【父】类型的集合对象</span></span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Serializable&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">    <span class="comment">//编译报错，因为String不是Number类型，也不是Number的父类型</span></span><br><span class="line">    <span class="comment">//list = new ArrayList&lt;String&gt;();</span></span><br><span class="line">    <span class="comment">//编译报错，因为Integer不是Number类型，也不是Number的父类型</span></span><br><span class="line">    <span class="comment">//list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><blockquote><p><strong>泛型类型仅存在于编译期间，编译后的字节码和运行时不包含泛型信息</strong>，所有的泛型类型映射到同一份字节码。</p><p>由于泛型是JDK1.5才加入到Java语言特性的，Java让编译器擦除掉关于泛型类型的信息，这样使得Java可以<strong>向后兼容之前没有使用泛型的类库和代码</strong>，<strong>因为在字节码（class）层面是没有泛型概念的</strong>。</p><ul><li>擦除前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T o)</span> &#123;</span><br><span class="line">        obj = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>擦除后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Generic</span> &#123; <span class="comment">// T --&gt; 消失了</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(Object o)</span> &#123; <span class="comment">// T --&gt; Object </span></span><br><span class="line">        obj = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意事项</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 编译报错</span></span><br><span class="line">    <span class="comment">// ArrayList&lt;Integer&gt;和new ArrayList&lt;Long&gt;在编译期间是不同的类型</span></span><br><span class="line">    <span class="comment">//ArrayList&lt;Integer&gt; list = new ArrayList&lt;Long&gt;();</span></span><br><span class="line">    <span class="comment">// 但是编译完成后，它们对应的是同一份class文件：ArrayList.class</span></span><br><span class="line">    ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    ArrayList&lt;Long&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Long&gt;();</span><br><span class="line">    <span class="comment">// 大家大致能看懂即可，后续反射章节会补充</span></span><br><span class="line">    System.out.println(list1.getClass() == list2.getClass());</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">注意，泛型信息被擦除后，所有的泛型类型都会统一变为原始类型：Object</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译报错</span></span><br><span class="line"><span class="comment">//因为在编译后，泛型信息会被擦除</span></span><br><span class="line"><span class="comment">//所以下面两个run方法不会构成重载，本质上都是 public void run(List list)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(List&lt;String&gt; list)</span>&#123; <span class="comment">// String -&gt; Object</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(List&lt;Integer&gt; list)</span>&#123; <span class="comment">// Integet -&gt; Object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<strong>Java的泛型只存在于编译时期</strong>，泛型使编译器可以<strong>在编译期间对类型进行检查以提高类型安全，减少运行是由于对象类型不匹配引发的异常。</strong></p><p>但是在编译成功后，<strong>所有泛型信息会被擦除，变为原始类型Object</strong>。</p></blockquote><h2 id="泛型小结"><a href="#泛型小结" class="headerlink" title="泛型小结"></a>泛型小结</h2><blockquote><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813165150565.png" alt="image-20230813165150565"></p></blockquote><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p><strong>注解（Annotation）</strong>，是J<strong>DK1.5</strong>引入的技术，用它可以对Java中的<strong>某一个段程序进行说明或标注，并且这个注解的信息可以被其他程序使用特定的方式读取到， 从而完成相应的操作。</strong></p><p>例如， @Override 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Override功能解析：</p><p>编译器在<strong>编译Person类</strong>的时候，会读取到<strong>toString方法上的注解@Override</strong>，从而帮我们检查这个方法时候是重写父类中的，如果父类中没有这个方法，则编译报错。</p><p>注解和注释的区别：</p><ul><li>注解是给其他程序看的，通过参数的设置，可以在编译后class文件中【保留】注解的信息，其他程序读取后，可以完成特定的操作</li><li>注释是给程序员看的，无论怎么设置，遍历后class文件中都是【没有】注释信息，方便程序员快速了解代码的作用或结构。</li></ul></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><blockquote><ul><li>没有属性的注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有属性，但没有默认值的注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line">    <span class="keyword">public</span> 属性类型 属性名();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有属性，有默认值的注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line">    属性类型 属性名() <span class="keyword">default</span> 默认值 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意， public 可以省去不写，默认就是 public</strong></p></blockquote><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><blockquote><p>注解的<strong>使用范围</strong>，都定义在了一个<strong>枚举类</strong>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.annotation;</span><br><span class="line"><span class="comment">/* @author  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * @since 1.5</span></span><br><span class="line"><span class="comment"> * @jls 9.6.4.1 @Target</span></span><br><span class="line"><span class="comment"> * @jls 4.1 The Kinds of Types and Values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TYPE，使用在类、接口、注解、枚举等类型上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FIELD，使用在属性上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>METHOD，使用在方法上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PARAMETER，使用在方法的参数前面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(<span class="meta">@Test</span> String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CONSTRUCTOR，使用在构造器上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LOCAL_VARIABLE，使用在局部变量上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ANNOTATION_TYPE，使用在注解类型上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Hello &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PACKAGE，使用在包上面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：包注解只能在package-info.java文件中<strong>（ecplise中有这个，idea中也找到啦）</strong></p><ul><li>ecplise</li></ul><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813170715164.png" alt="image-20230813170715164"></p><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230813175222518.png" alt="image-20230813175222518"></p><ul><li>idea</li></ul><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230815135848838.png" alt="image-20230815135848838"></p><p><img src="/2023/08/13/08-2-%E6%B3%9B%E5%9E%8B-%E6%B3%A8%E8%A7%A3/image-20230815135927578.png" alt="image-20230815135927578"></p><p>注意，package-info.java文件里面，只能包含package声明，并做出描 述，以便将来生成doc文件，可以从API源码src.zip中，看到每个包下面 都可以对应的package-info.java文件对该包做出描述</p><ul><li>TYPE_PARAMETER，使用在声明泛型参数前面，JDK8新增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;<span class="meta">@Test</span> T&gt; <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span>&lt;<span class="meta">@Test</span> T&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TYPE_USE，<strong>使用在代码中任何类型前面</strong>，JDK8新增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(<span class="meta">@Test</span> String name)</span> &#123;</span><br><span class="line">        List&lt;<span class="meta">@Test</span> String&gt; list = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="meta">@Test</span> String(<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (<span class="meta">@Test</span> String) obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="保持"><a href="#保持" class="headerlink" title="保持"></a>保持</h2><blockquote><p>类中使用的注解，根据配置，可以【保持】到三个不同的阶段：</p><ul><li>SOURCE，注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃。</li><li>CLASS，注解被保留到class文件，但jvm加载class文件时候被遗弃</li><li>RUNTIME，注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.annotation; </span><br><span class="line"><span class="comment">/* @author  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * @since 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，Retention是保留、保持的意思，Policy是政策、策略的意思</strong></p><ul><li>如果需要在运行时去动态获取注解信息，那只能用RUNTIME注解，比如@Deprecated使用RUNTIME注解</li><li>如果要在编译时进行一些预处理操作，比如生成一些辅助代码，就用CLASS注解</li><li>如果只是做一些检查性的操作，比如@Override和@SupperessWarnings，使用SOURCE注解</li></ul><p>注意：因为RUNTIME的生命周期最长，所以其他两种情况能作用到的阶段，使用RUNTIME也一定能作用到</p></blockquote><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><blockquote><p>在我们进行自定义注解的时候，一般会使用到元注解，来设置自定义注解的基本 特点。所以，<strong>元注解也就是对注解进行基本信息设置的注解。</strong></p><p>常用的元注解：</p><ul><li>@Target：用于描述注解的使用范围，例如用在类上面还是方法上面</li><li>@Retention：用于描述注解的保存策略，是保留到源代码中、Class文件中、还是加载到内存中</li><li>@Documented：用于描述该注解将会被javadoc生产到API文档中</li><li>@Inherited：<strong>用户表示某个被标注的类型是被继承的</strong>，如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class子类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value = &#123; ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.METHOD,</span></span><br><span class="line"><span class="meta">                 ElementType.PACKAGE, ElementType.PARAMETER, ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnoation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR,</span></span><br><span class="line"><span class="meta">         LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value(); <span class="comment">// 有属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> java.lang.Object.class;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">AuthenticationType</span> &#123;</span><br><span class="line">        CONTAINER,</span><br><span class="line">        APPLICATION</span><br><span class="line">    &#125;</span><br><span class="line">    AuthenticationType <span class="title function_">authenticationType</span><span class="params">()</span> <span class="keyword">default</span></span><br><span class="line">        AuthenticationType.CONTAINER;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shareable</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    String <span class="title function_">mappedName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><ul><li>元数据信息：注解本身不会直接影响程序的执行，而是提供了一种用于存储和传递元数据的方式。元数据是关于程序中元素的描述信息，可以包含<strong>名称、类型、范围、约束</strong>等信息，用于辅助程序的开发、编译和执行。</li><li>内置注解：Java提供了一些内置的注解，例如**@Overried、@Deprecated、@SuppressWarnings<strong>等。这些注解用于提供关于方</strong>法覆盖、过时方法、警告抑制**等信息，编译器和工具可以根据注解来执行相应的处理。</li><li>自定义注解：Java也允许开发者自定义注解，通过**@interface关键字**定义新的注解类型。自定义注解可以包含元素（成员变量），可以为这些元素指定默认值，并可以在程序中使用注解，并提取注解中的元素值。</li><li>应用领域：注解在Java中被广泛应用于各个领域，例如<strong>框架开发、测试工 具、持久化框架、Web开发</strong>等。通过注解，可以提供更丰富的配置和行为控 制，简化了代码的编写和配置。</li><li>本章对于注解的掌握仅限于元<strong>数据信息的认识、内置注解的认识</strong>等，在后期学习反射的时候会完善自定义注解的学习，并且使用反射机制获取注解 并进行操作。</li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>自信人生二百年，会当水击三千里。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-1-集合</title>
      <link href="/2023/08/13/08-1-%E9%9B%86%E5%90%88/"/>
      <url>/2023/08/13/08-1-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>我们之前学习过数组，数组特点如下：</p><blockquote><ul><li>长度固定：数组在创建时需要指定长度，并且长度在创建后不可改变</li><li>相同数据类型：例如int数组只能存储int类型的数据</li><li>连续内存分配：堆空间为数组开辟的<strong>内存是连续</strong>的，这也导致在插入和删除元素时需要元素<strong>整体移动</strong>，效率低下</li><li>随机访问：由于数组中的元素在内存中是连续存储的，并且可以通过索引来访问，因此可以通过索引直接访问数组中的任意元素，<strong>时间复杂度为O(1)</strong></li></ul><p>如果我们要<strong>存储的多个元素值数据类型不一致</strong>，<strong>或个数不固定时</strong>，数组就无法完美的满足我们的要求，这个时候我们会使用Java中提供的集合框架。</p></blockquote><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><blockquote><p><strong>集合（Collection）</strong>是一种用于存储和操作一组对象的数据结构。它提供了一组接口和类，用于处理和操作对象的集合。</p><p><strong>集合框架（Collection Framework）</strong>是Java中用于<strong>表示和操作集合的一组类和接口</strong>，位于<code>java.util</code>包中，并提供了一系列的接口和类，包括<strong>集合接口（Collection）、列表接口（List）、集合类（Set）、映射接口（Map）</strong>等</p><p>集合框架的主要目标是<strong>提供一种通用的方式来存储和操作对象的集合</strong>，无论集合 的集体实现方式如何，用户都可以使用同一的接口和方法操作集合。</p></blockquote><blockquote><p>集合和数组都可以存储多个元素值，对比数组，我们来理解下集合：</p><ul><li>数组的长度是固定的，<strong>集合的长度是可变的</strong></li><li>数组中存储的是同一类型的元素(<strong>也可以是不同类型Object</strong>)，<strong>集合中存储的数据可以是不同类型的</strong></li><li>数组中可以存放基本类型数据或者引用类型变量，<strong>集合中只能存放引用类型变量</strong></li><li>数组是由JVM中现有的<strong>类型+[]<strong>组合而成的，除了一个</strong>length属性</strong>，还有从<strong>Object中继承过来的方法</strong>之外，数组对象就调用不到其他属性和方法了。</li><li>集合框架由 <strong>java.util</strong>包下多个接口和实现类组成，定义并实现了很多方法，功能强大。</li></ul></blockquote><h2 id="框架体系"><a href="#框架体系" class="headerlink" title="框架体系"></a>框架体系</h2><p>集合框架主要有三个要素组成：</p><blockquote><ul><li>接口</li></ul><p>整个集合框架的上层结构，都是用接口进行组织的。接口中定义了集合中必须要有的基本方法。</p><p>通过接口还把集合划分成了几种不同的类型，每一种集合都有自己对应的接口。</p><ul><li>实现类</li></ul><p>对于上层使用接口划分好的集合种类，每种集合的接口都会有对应的实现类。</p><p>每一种接口的实现类很可能有多个，每个的实现方式也会各有不同</p><ul><li>数据结构</li></ul><p>每个实现类都实现了接口中所定义的最基本的方法，例如对数据的存储、检索、操作等方法。<strong>但是不同的实现类，它们存储数据的方式不同</strong>，也就是使用的<strong>数据结构不同</strong>。</p></blockquote><p>集合框架继承体系图：</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230809163115177.png" alt="image-20230809163115177"></p><p>集合分类：</p><blockquote><ul><li><strong>单列集合</strong>（Single Column Collection）<ul><li>根接口：<strong>java.util.Collection</strong></li><li>单列集合是<strong>指每个集合元素只包含一个单独的对象</strong>，它是集合框架中最简单的形式</li></ul></li><li><strong>多列集合</strong>（Multiple Column Collection)<ul><li><strong>java.util.Map</strong></li><li>多列集合是<strong>指每个集合元素由多个列（字段）组成，可以同时存储和操作多个相关的值。</strong></li></ul></li></ul></blockquote><p>下面只是列出了常用的实现类 噢噢~~</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230809163831334.png" alt="image-20230809163831334"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230809164021280.png" alt="image-20230809164021280"></p><p>注意事项：</p><blockquote><ul><li>图中列出了Java集合框架中的主要接口（并非全部），以及它们之间的继承关系</li><li>接口中定义了该种集合具有的主要方法</li><li>将来真正要使用的，是这些接口的实现类，每种实现类对接口的实现方式不同，地城所用的数据结构不同，其特点不同</li></ul></blockquote><p>集合章节学习基本要求：</p><blockquote><ul><li>要求会用集合存储数据</li><li>可以从集合中取出数据</li><li>掌握每种集合的特点和应用场景</li></ul></blockquote><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><blockquote><p>Collection接口是<strong>单列集合类的父接口</strong>，这种集合可以将数据一个一个的存放到集合中。它有两个重要的子接口，分别是 <strong>java.util.List 和 java.util.Set</strong></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230809175432525.png" alt="image-20230809175432525"></p><p>Collection 是父接口，其中定义了单列集合（List和Set）通用的一些方法</p><p>Collection接口的实现类，都可以使用这些方法</p></blockquote><h4 id="Collection集合基础方法"><a href="#Collection集合基础方法" class="headerlink" title="Collection集合基础方法"></a>Collection集合基础方法</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体使用看文档</span></span><br><span class="line"><span class="comment">// 下面是Collection的基础方法 E表示泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Iterable</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//向集合中添加元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span></span><br><span class="line">        <span class="comment">//清空集合中所有的元素。</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line">        <span class="comment">//判断当前集合中是否包含给定的对象。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> <span class="comment">// 底层用的是重写的equals进行比较</span></span><br><span class="line">        <span class="comment">//判断当前集合是否为空。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">        <span class="comment">//把给定的对象，在当前集合中删除。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span></span><br><span class="line">        <span class="comment">//返回集合中元素的个数。</span></span><br><span class="line">        <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">        <span class="comment">//把集合中的元素，存储到数组中。</span></span><br><span class="line">        Object[] toArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>警告问题处理</p><blockquote><ul><li>集合接口引用指向实现类对象，固定书写格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接口类型&lt;存储的数据类型&gt; 接口引用名 = <span class="keyword">new</span> 实现类&lt;&gt;(构造方法实参);</span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：上述格式定义的集合对象，只能存储String类型的元素，如果存放其他引 用类型元素，则编译报错。</font></p><ul><li>集合中父类或实现类引用，指向具体对象的写法也是如此</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>注意，此时创建的list集合，只能存储Student类对象。</p></blockquote><h4 id="Collection-泛型参数-方法补充"><a href="#Collection-泛型参数-方法补充" class="headerlink" title="Collection 泛型参数 方法补充"></a>Collection <strong>泛型参数 方法补充</strong></h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Iterable</span>&lt;E&gt; &#123;</span><br><span class="line">  <span class="comment">//把一个指定集合中的所有数据，添加到当前集合中</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span><br><span class="line">        <span class="comment">//判断当前集合中是否包含给定的集合的所有元素。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span><br><span class="line">        <span class="comment">//把给定的集合中的所有元素，在当前集合中删除。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span><br><span class="line">        <span class="comment">//判断俩个集合中是否有相同的元素，如果有当前集合只保留相同元素，如果没有当前集合元素清空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span><br><span class="line">        <span class="comment">//把集合中的元素，存储到数组中，并指定数组的类型</span></span><br><span class="line">        &lt;T&gt; T[] toArray(T[] a)</span><br><span class="line">        <span class="comment">//返回遍历这个集合的迭代器对象</span></span><br><span class="line">        Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap08.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03_Element</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     Collection&lt;Object&gt; c1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">     <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">     c1.add(s1);</span><br><span class="line">     c1.add(s2);</span><br><span class="line">     <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">     <span class="comment">// 结果显示true，说明集合contains方法借助equals方法进行比较，而非 ==</span></span><br><span class="line">     <span class="comment">// 原因：ArrayList的父类AbstractList重写了equals方法</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> c1.contains(s6);</span><br><span class="line">     System.out.println(<span class="string">&quot;contains(s6): &quot;</span> + f); <span class="comment">// true </span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>集合存放自定义类对象</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03_Student</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// 准备学生对象，注意s1和s5两个对象的属性一模一样</span></span><br><span class="line">     <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">20</span>);</span><br><span class="line">     <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ls&quot;</span>, <span class="number">19</span>);</span><br><span class="line">     <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">22</span>);</span><br><span class="line">     <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line">     <span class="type">Student</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">20</span>);</span><br><span class="line">     <span class="comment">// 1.定义只能存储Student对象的集合</span></span><br><span class="line">     Collection&lt;Student&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">// 2.往集合中添加元素</span></span><br><span class="line">     coll.add(s1);</span><br><span class="line">     coll.add(s2);</span><br><span class="line">     coll.add(s3);</span><br><span class="line">     coll.add(s4);</span><br><span class="line">     <span class="comment">// 3.输出集合元素个数，输出集合对象</span></span><br><span class="line">     System.out.println(<span class="string">&quot;coll.size: &quot;</span> + coll.size());</span><br><span class="line">     System.out.println(<span class="string">&quot;coll: &quot;</span> + coll);</span><br><span class="line">     System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">     <span class="comment">// 4.判断s5是否存在</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> coll.contains(s5);</span><br><span class="line">     System.out.println(<span class="string">&quot;contains(s5): &quot;</span> + flag); <span class="comment">// true</span></span><br><span class="line">     <span class="comment">// 5.删除s5</span></span><br><span class="line">     flag = coll.remove(s5);</span><br><span class="line">     System.out.println(<span class="string">&quot;remove(s5): &quot;</span> + flag); <span class="comment">// true</span></span><br><span class="line">     System.out.println(<span class="string">&quot;coll.size: &quot;</span> + coll.size());</span><br><span class="line">     System.out.println(<span class="string">&quot;coll: &quot;</span> + coll);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意事项：集合中contains、remove等方法，底层借助元素对象的equals方法进行值比较，所以如果要用集合存放自定义类对象，注意重写自定义类的equals方法！</font></p></blockquote><h2 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h2><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><blockquote><p>借助Collection接口中toArray()方法实现，方法原型为： <strong>Object[] toArray();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将集合转化成数组</span></span><br><span class="line">Object[] array = 集合引用.toArray();</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"> System.out.println(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><blockquote><p>迭代器是集合框架提供的一种遍历集合元素的方式。通过调用集合的 <strong>iterator() 方法</strong>可以获取一个迭代器对象，然后使用迭代器的 <strong>hasNext() 方法</strong>判断是否还有下一个元素，使用 <strong>next() 方法</strong>获取下一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取迭代器对象</span></span><br><span class="line">Iterator&lt;集合元素类型&gt; iterator = 集合对象.iterator();</span><br><span class="line"><span class="comment">//2.借助迭代器中hasNext()和next()方法完成遍历</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"> <span class="comment">//获取集合元素</span></span><br><span class="line"> 集合元素类型 变量名 = iterator.next();</span><br><span class="line"> <span class="comment">//对集合元素进行输出</span></span><br><span class="line"> System.out.println(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，这种迭代器方式获取集合中的每一个元素，是一种Collection集合及 其子类型集合通用的方式</strong></p></blockquote><p>迭代器原理分析（补充内容，了解即可）：</p><blockquote><ul><li>java.lang.Iterable 接口中，<strong>定义了获取迭代器的方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterable</span> &#123;</span><br><span class="line">    Iterator <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java.util.Collection接口继承了java.lang.Iterable接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span> <span class="keyword">extends</span> <span class="title class_">Iterable</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，<strong>Collection接口及其子接口</strong>中，都有一个获取迭代器对象的方法：<strong>Iterator iterator();</strong></p><ul><li>java.util.Iterator 接口中，主要定义两个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前迭代器中是否还有下一个对象</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取迭代器中的下一个对象</span></span><br><span class="line">    Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>迭代其实现原理：</p><blockquote><ul><li>获取迭代器对象：集合类实现了<strong>Iterable接口</strong>，该接口定义了一个<strong>iterator()方法</strong>，用于获取迭代器对象。迭代器对象是实现了<strong>Iterator接口</strong>的具体类的实例。</li><li>迭代器位置初始化：在创建迭代器对象时，迭代器的位置通常初始化集合的起始位置。不同的集合实现可能对位置初始化进行不同的处理。</li><li>遍历集合元素：通过调用迭代器对象的<strong>hasNext()方法</strong>，可判断集合中是否还有下一个元素。如果有下一个元素，可以通过next()方法获取下一个元素，并将迭代器的位置后移。</li><li>迭代器状态管理：迭代器对象会记录当前迭代的状态，包括当前位置、遍历过程中的操作等。这些状态可以帮助迭代器在遍历过程中正确地访问和操作集合的元素。</li><li>结束迭代：当集合中没有更多元素时，迭代器的**hasNext()**方法将返回false，表示遍历结束。</li></ul><p>迭代器next方法示意图：</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230809202002588.png" alt="image-20230809202002588"></p><p>注意事项：</p><ul><li>迭代器的优点是提供了一种<strong>统一的遍历方式</strong>，对单列集合（直接或间接实现Collection接口），都可以通过迭代器按顺序访问元素。</li><li>迭代器隐藏了集合的具体实现细节，提供了一种抽象的访问接口，是代码更加灵活何可复用。</li><li>迭代器是单向的，只能从前往后遍历，无法倒序遍历或者在遍历过程中修改集合</li><li>如果在迭代过程中队集合进行修改（添加、删除元素），可能会导致迭代器抛出<strong>ConcurrentModificationException</strong>异常。因此，在使用迭代器遍历时，不要修改集合结构</li></ul></blockquote><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><blockquote><p>除了使用迭代器遍历集合之外，JDK1.5及以后版本JDK，提供了<strong>增强for循环</strong>实现集合遍历，这种方式相对迭代器遍历更简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合元素类型 变量名 : 集合) &#123;</span><br><span class="line"> <span class="comment">//操作元素变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次循环，引用变量会指向集合中的一个元素对象，然后在循环体中对该元 素对象进行操作（只能遍历）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">// 1.实例化集合对象，专门存放String元素</span></span><br><span class="line"> Collection&lt;String&gt; c1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> <span class="comment">// 2.添加元素</span></span><br><span class="line"> c1.add(<span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line"> c1.add(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line"> c1.add(<span class="string">&quot;parker&quot;</span>);</span><br><span class="line"> <span class="comment">// 3.foreach遍历</span></span><br><span class="line"> <span class="keyword">for</span> (String str : c1) &#123;</span><br><span class="line">     System.out.println(str);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，使用foreach循环对集合进行遍历，会更加简单一些</p><p>同时，使用foreach循环也可以遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"> <span class="comment">//每次循环，使用变量i接收数组中的一个数据</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i : arr)&#123;</span><br><span class="line">     System.out.println(i);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：Collection及其子类型的集合，还有数组，都可以使用foreach循环进行遍历！</font></p></blockquote><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><blockquote><p>java.util.List 接口继承了Collection接口，是常用的一种集合类型。</p><p>List集合具有Collection集合的特点之外，还具有自己的一些特点</p><ul><li>List是一种<strong>有序集合</strong></li><li>List是<strong>一种带索引</strong>的集合</li><li>List集合<strong>可以存放重复的元素</strong></li></ul></blockquote><h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><blockquote><p>List接口继承了Collection接口，Collection接口继承了Iterable接口</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812100225453.png" alt="image-20230812100225453"></p><p>List接口源码：</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812095724379.png" alt="image-20230812095724379"></p><p>List接口的实现类：</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812100418742.png" alt="image-20230812100418742"></p><p><font color="skyblue">注意，这些实现类中，都已经实现了List接口、Collection接口、Iterable接口中的方法，我们只要了解并能使用这些接口中的方法，就已经能够操作这些集合对象了（面向接口）。</font></p><p>额外的，我们还需要了解这些常用的接口实现类，分别都是什么特点，使用什么数据结构，一适合在什么样的场景下使用。</p></blockquote><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回集合中指定位置的元素。</span></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"><span class="comment">//用指定元素替换集合中指定位置的元素,并返回被替代的旧元素。</span></span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span>;</span><br><span class="line"><span class="comment">//将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span>;</span><br><span class="line"><span class="comment">//从指定位置开始，把另一个集合的所有元素添加进来</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span>;</span><br><span class="line"><span class="comment">//移除列表中指定位置的元素, 并返回被移除的元素。</span></span><br><span class="line">E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"><span class="comment">//查收指定元素在集合中的所有，从前往后查到的第一个元素（List集合可以重复存放数据）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//查收指定元素在集合中的所有，从后往前查到的第一个元素（List集合可以重复存放数据）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//根据指定开始和结束位置，截取出集合中的一部分数据</span></span><br><span class="line">List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span>;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：除了这些方法之外，还有从父接口Collection中继承过来的方法。</font></p><p>List集合的方法使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test052_List</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     list.add(<span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;parker&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;parker&quot;</span>); <span class="comment">// 可重复</span></span><br><span class="line">     list.add(<span class="number">1</span>, <span class="string">&quot;world&quot;</span>); <span class="comment">// 指定位置插入，后面的整体往后移动</span></span><br><span class="line">     list.remove(<span class="number">2</span>);</span><br><span class="line">     list.set(<span class="number">3</span>, <span class="string">&quot;falao&quot;</span>);</span><br><span class="line">     System.out.println(list);</span><br><span class="line">     <span class="comment">// 遍历</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">         System.out.println(list.get(i));</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">         System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">     Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">     <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">         System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>List集合的特点：有序可重复，并且可以使用下标索引进行访问</strong></p></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><blockquote><p><strong>java.util.ArrayList</strong>是最常用的一种List类型集合，<strong>ArrayList类底层使用数组</strong>来实现数据的存储，所以它的特点是：<strong>增删慢，查找快。</strong></p><p>在日常的开发中，查询数据也是用的最多的功能，所以ArrayList是最常用的集 合。</p><p>但是，如果项目中对性能要求较高，并且在集合中大量的数据做增删操作，那 么 <strong>ArrayList</strong> 就不太适合了。</p><p>ArrayList源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Resizable-array implementation of the &lt;tt&gt;List&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">interface. Implements</span></span><br><span class="line"><span class="comment">* all optional list operations, and permits all elements,</span></span><br><span class="line"><span class="comment">including</span></span><br><span class="line"><span class="comment">* &lt;tt&gt;null&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> LinkedList</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> Vector</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable,java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial capacity.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><blockquote><p><strong>java.util.LinkedList底层采用的数据结构是双向链表，其特点是：增删快，查找慢。</strong></p><p>它的特点刚好和 <strong>ArrayList</strong> 相反，所以在代码中，<strong>需要对集合中的元素做大量 的增删操作的时候</strong>，可以选择使用 <strong>LinkedList</strong> 。</p><p><font color="skyblue">注意：这里描述的快和慢，需要在大量的数据操作下，才可以体现，如果数据量不大的话，集合每一种集合的操作集合没有任何区别</font></p><p>特点验证：</p><p>实例化ArrayList、LinkedList集合对象，放入100000个元素，测试两种集合插 入、查询效率！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap08.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test054_LinkedList</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">     <span class="comment">//List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">     List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">         list.add(<span class="number">0</span>, <span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">long</span> <span class="variable">end1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">     <span class="comment">// 3.输出时长</span></span><br><span class="line">     System.out.println(list.getClass().getSimpleName() + <span class="string">&quot;插入&quot;</span> + NUM + <span class="string">&quot;条数据耗时&quot;</span> + (end1 - start1) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 4.开启计时，从集合种取 100000 个元素</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">start2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">         list.get(i);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">long</span> <span class="variable">end2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">     <span class="comment">// 5.输出时长</span></span><br><span class="line">     System.out.println(list.getClass().getSimpleName() + <span class="string">&quot;检索&quot;</span> + NUM + <span class="string">&quot;条数据耗时&quot;</span> + (end2 - start2) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ArrayList插入100000条数据耗时532毫秒</span></span><br><span class="line"><span class="comment">// ArrayList检索100000条数据耗时1毫秒</span></span><br><span class="line"><span class="comment">// LinkedList插入100000条数据耗时33毫秒</span></span><br><span class="line"><span class="comment">// LinkedList检索100000条数据耗时19608毫秒 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>注意事项：</p><ul><li><p>list.getClass().getSimpleName; 获取list引用指向对象所属类型名（<strong>不含包名</strong>）</p></li><li><p>System.currentTimeMillis(); 获取<strong>当前时刻</strong>的时间戳</p></li></ul></li><li><p>底层实现</p></li></ul><p><strong>LinkedList</strong>底层借助<strong>双向链表</strong>实现，双向链表又由节点构成，每个节点由三部分构成：<strong>两个引用（分别指向前、后节点），一个数据域（存储集合元素）。</strong><br><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812104813337.png" alt="image-20230812104813337"></p><p>LinkedList源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable,</span><br><span class="line">java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//头节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="comment">//尾节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">    <span class="comment">//静态内部类：Node节点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item; <span class="comment">//数据域，存储数据</span></span><br><span class="line">        Node&lt;E&gt; next; <span class="comment">//指针域：指向后一个节点</span></span><br><span class="line">        Node&lt;E&gt; prev; <span class="comment">//指针域：指向前一个结点</span></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>头尾节点操作方法</li></ul><p>在LinkedList中，定义了一些操作头结点和尾结点的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定元素插入此列表的开头</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span></span><br><span class="line"><span class="comment">//将指定元素添加到此列表的结尾</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span></span><br><span class="line"><span class="comment">//返回此列表的第一个元素</span></span><br><span class="line">E <span class="title function_">getFirst</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回此列表的最后一个元素</span></span><br><span class="line">E <span class="title function_">getLast</span><span class="params">()</span></span><br><span class="line"><span class="comment">//移除并返回此列表的第一个元素</span></span><br><span class="line">E <span class="title function_">removeFirst</span><span class="params">()</span></span><br><span class="line"><span class="comment">//移除并返回此列表的最后一个元素</span></span><br><span class="line">E <span class="title function_">removeLast</span><span class="params">()</span></span><br><span class="line"><span class="comment">//从此列表所表示的堆栈处弹出一个元素</span></span><br><span class="line">E <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line"><span class="comment">//将元素推入此列表所表示的堆栈</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span></span><br></pre></td></tr></table></figure><p>案例展示： 创建一个LinkedList对象，通过节点方法往里面添加、更新、删除元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test054_Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意，要测试LinkedList中的方法，必须用LinkedList引用指向LinkedList对象</span></span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;lwsj&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;peter&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;parker&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加头尾节点</span></span><br><span class="line">        list.addFirst(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;last&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取头尾节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getFirest: &quot;</span> + list.getFirst());</span><br><span class="line">        System.out.println(<span class="string">&quot;getLast: &quot;</span> + list.getLast());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除头尾节点</span></span><br><span class="line">        list.removeFirst();</span><br><span class="line">        list.removeLast();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812110246948.png" alt="image-20230812110246948"></p></blockquote><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><blockquote><p>Vector是在JDK1.0引入的，它<strong>实现了List接口</strong>，属于Java集合框架的一部分，其<strong>基于动态数组（Dynamic Array）实现，线程安全，Vector在功能和使用方式上和ArrayList非常相似。</strong></p><p>ArrayList是在JDK1.2引入的，非线程安全，但<strong>单线程环境下性能更高效</strong>，是Vector一个非线程安全的替代品</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812110923210.png" alt="image-20230812110923210"></p><p>Vector部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The &#123;<span class="doctag">@code</span> Vector&#125; class implements a growable array of</span></span><br><span class="line"><span class="comment">* objects. Like an array, it contains components that can be</span></span><br><span class="line"><span class="comment">* accessed using an integer index.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> LinkedList</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> JDK1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable,java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 底层借助数组存储数据</span></span><br><span class="line"><span class="comment">    * The array buffer into which the components of the</span></span><br><span class="line"><span class="comment">    vector are</span></span><br><span class="line"><span class="comment">    * stored.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] elementData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Vector</strong> 内部也是采用了数组来存储数据，但是<strong>Vector</strong>中的方法大多数都是线程安全的方法，所以在多线程并发访问的环境中，可以使用<strong>Vector</strong>来保证集合中元数据操作的安全。</p><p>案例展示： 创建Vector集合，往里面添加元素，遍历输出，对比其和ArrayList的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vector线程安全但效率较低</span></span><br><span class="line"><span class="comment">//其早期提供的方法使用较为繁琐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test055_Vector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.实例化Vector对象</span></span><br><span class="line">        Vector&lt;String&gt; v = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.往集合中添加元素</span></span><br><span class="line">        v.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//早期添加元素，相对麻烦</span></span><br><span class="line">        v.addElement(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        v.addElement(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//3.遍历Vector</span></span><br><span class="line">        <span class="comment">// 早期遍历方式，相对麻烦 （有点像迭代器的雏形Iterable）</span></span><br><span class="line">        Enumeration&lt;String&gt; elements = v.elements();</span><br><span class="line">        <span class="keyword">while</span>(elements.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(elements.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：<strong>我们今后主要使用ArrayList</strong>。多线程环境需要保证线程安全的话，后期学 习工具类，可以使 ArrayList变成线程安全。</p></blockquote><h3 id="List小结"><a href="#List小结" class="headerlink" title="List小结"></a>List小结</h3><blockquote><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812112657832.png" alt="image-20230812112657832"></p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>数据结构是计算机科学中研究数据组织、存储和操作的一门学科。它涉及了<strong>如何 组织和存储数据</strong>以及如何设计和实现不同的数据操作算法和技术。常见的据结构 <strong>有线性数据结构（含数组、链表、栈和队列等）</strong>，<strong>非线性数据结构（树、图 等）。</strong></p><p><font color="#d12920">注意：不同的数据结构适用于不同的场景和问题，选择合适的数据结构可以提高算法的效率和性能。</font></p><p>Java集合框架中不同的实现类底层借助不同数据结构来存储输出，常见的数据结 构有：</p><ul><li>数组（Array）：有序集合，<strong>可以包含重复的元素</strong>，ArrayList、Vector</li><li>链表（LinkedList）：链表是一种<strong>动态</strong>数据结构，通过阶段之间的链接来组织数据。LinkedList</li><li>集合（Set）：集合是<strong>不允许包含重复元素</strong>的无序集合。HashSet、LinkedHasSet、TreeSet</li><li>映射（Map）：映射是一种<strong>键值对</strong>的集合，每个键只能对应一个值，HashMap、LinkedHashMap、TreeMap</li><li>队列（Queue）：队列是一种<strong>先进先出（FIFO）</strong>LinkedList、PriorityQueue</li><li>栈（Stack）：栈是一种<strong>后进先出（LIFO）</strong>，Stack</li><li>树（Tree）：树是一种具有<strong>分层</strong>结构的数据结构，BinaryTree、BinarySearchTree</li></ul></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>看我这篇博客即可：<a href="https://www.lzwgxust.top/post/e21539ad.html">04-数组</a></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812114110716.png" alt="image-20230812114110716"></p></blockquote><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>链表（linked list），是由一个一个node节点组成，每个node节点中包含两项数 据：<strong>指针域、数据域</strong>。数据域存储了一个数据，指针域存储指向下一个node节 点对象的引用（<strong>单向链表</strong>）。</p><p>如果是<strong>双向链表</strong>的话，指针域会存储2个引用，一个指向前一个node节点对象， 另一个指向了下一个node节点对象。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812114241876.png" alt="image-20230812114241876"></p><p>单链表插入、删除节点：</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812114319234.png" alt="image-20230812114319234"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812114356571.png" alt="image-20230812114356571"></p><p>总结：</p><ul><li><strong>插入和删除不需要像数组那样整体移动元素，所以效率高</strong></li><li><strong>查询第n个元素，必须从头结点开始逐个结点往后遍历，所以效率低</strong></li></ul><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812114919380.png" alt="image-20230812114919380"></p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>栈（stack），又称堆栈，仅允许在栈的一段进行插入和删除操作，并且不允许在其他任何位置进行操作</p><p>其特点是：<strong>先进后出，最先存进去的元素，最后才能取出来。</strong></p><p>例如，薯片存在薯片桶中，我们当前只能取出最上面的一个薯片，而最早存放到 薯片桶的薯片，反而是我们最后吃到的一片。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812115310945.png" alt="image-20230812115310945"></p><p>注意1：入栈也称为压栈，把数据存入到栈的顶端位置</p><p>注意2：出栈也称为弹栈，把栈顶位置的数据取出</p><p><font color="#d12920">思考，JVM中的栈区中，为什么把main方法标注在最低端位置？</font></p><p>在Java虚拟机（JVM）中，栈（Stack）是用来<strong>管理方法调用和局部变量的内存区域</strong>，每个线程都会有自己的栈。在JVM中，将“main”方法标注在栈的最低端位置是因为Java程序执行过程通常是从“main”方法开始的，然后逐步调用其他方法，形成方法调用的调用栈。</p><ul><li><strong>起始点</strong>：“main”方法是Java程序的起始点，JVM从这里开始会执行程序。</li><li><strong>调用栈结构</strong>：Java程序中的方法调用是一个栈结构，“main”方法位于底部，其他方法调用逐步堆叠在上面。</li><li><strong>清晰性</strong>：将“main”方法放在底部使程序执行路径更清晰，有助于调试和代码理解</li><li><strong>编程约定：</strong> Java遵循入口点的编程约定，将<code>main</code>方法放在底部是与其他编程语言的一致性选择</li></ul></blockquote><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>队列（Queue），仅允许在队列的一端进行插入，而在队列的另一端进行删除。</p><p>其特点是：<strong>先进先出，最先存进去的元素，可以最先取出来。</strong></p><p>例如，火车穿过山洞的时候，第一节车厢先进去山洞的一端，并且这节车厢优先 从山洞的另一端出来，后面的车厢依次从一端进入并另一端出来。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812120703193.png" alt="image-20230812120703193"></p></blockquote><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><blockquote><p>二叉树（Binary tree）是树形结构的一个重要类型。二叉树特点是每个结点最多只能有两棵子树，且有左右之分</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812121019944.png" alt="image-20230812121019944"></p><p>二叉树中有一种叫做红黑树（Red&#x2F;Black Tree），它最早被称为<strong>平衡二叉B树</strong>（sysmmetric binary B-trees）,后来被称为红黑树。</p><p>红黑树是一种特殊化的平衡二叉树，它可以在进程插入和删除的时候，如果左右子树的高度相差较大，那么就通过特定操作（<strong>左旋、右旋</strong>）保持二叉查找树的平衡（<strong>动态平衡</strong>），从而获得较高的查找性能。</p><p>红黑树的每一个阶段的左子树的所有数据都比自己小，而右子树的所有数据都比自己大，并且左右子树的高度近似。</p><p><strong>红黑树的约束：</strong></p><ul><li>根节点必须是黑色</li><li>其他节点可以是红色或黑色</li><li>叶子节点（特指null节点）是黑色</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li></ul><p><font color="#d12920">注意，红黑树的指定颜色的目的，是利用颜色值作为二叉树的平衡对称性的检查</font></p><p>例如，从空树开始演示一个案例： 数字插入顺序为 9、8、12、7、6，对于一个节点来说，新数据如果小于本节 点，会被放在左节点的位置，反之则放在右节点的位置</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812130020937.png" alt="image-20230812130020937"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812130056167.png" alt="image-20230812130056167"></p><p>[红黑树在线演示](<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">Red&#x2F;Black Tree Visualization (usfca.edu)</a>)</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812145040567.png" alt="image-20230812145040567"></p></blockquote><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><blockquote><p>java中的哈希表（hash），在<strong>JDK1.8之前是采用数组+链表</strong>进行实现，根据数据 的哈希值，把数据存在数组中，但是当前哈希值冲突的时候，再使用链表进行存 储，那么在数组中，同一hash值的数据都存在一个链表里。 </p><p>注意，之前学习过Object中hashCode方法的作用，hash值的特点以及和对象之间 的关系</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812145505938.png" alt="image-20230812145505938"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812150858811.png" alt="image-20230812150858811"></p><p>可以看出，当链表中元素过多，即hash值相等的元素较多时，查找的效率会变低。</p><p><strong>JDK1.8中，哈希表存储采用数组+链表+红黑树进行实现</strong>，当链表长度超过阈值（8）时，将链表转换为红黑树，大大提高查找的性能。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812153409201.png" alt="image-20230812153409201"></p></blockquote><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="Set概述"><a href="#Set概述" class="headerlink" title="Set概述"></a>Set概述</h3><blockquote><p><strong>java.util.Set</strong>接口继承了<strong>Collection</strong>接口，是常用的一种集合类型。</p><p>Set集合特点如下：除了具有<strong>Collection</strong>集合的特点，还具有自己的一些特点</p><ul><li>Set是一种<strong>无序</strong>的集合</li><li>Set是一种<strong>不带下标索引</strong>的集合</li><li>Set是一种<strong>不能存放重复数据</strong>的集合</li></ul><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812154014897.png" alt="image-20230812154014897"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812154113165.png" alt="image-20230812154113165"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812154137253.png" alt="image-20230812154137253"></p><p>重点学习的Set实现类：</p><ul><li>HashSet 底层借助哈希表实现</li><li>TreeSet 底层借助二叉树实现</li></ul><p>注意，TreeSet是Set接口的直接开SortedSet的实现类</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812154701080.png" alt="image-20230812154701080"></p><p>基础案例： 实例化一个Set集合，往里面添加元素并输出，<strong>注意观察集合特点（无序、不 重复）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test071_SetBasic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello4&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello5&quot;</span>); <span class="comment">// 添加失败 重复元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello5&quot;</span>); <span class="comment">// 添加失败 重复元素</span></span><br><span class="line">        <span class="keyword">for</span> (String str : set) &#123;</span><br><span class="line">            System.out.print(str + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.print(str + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812155252506.png" alt="image-20230812155252506"></p></blockquote><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><blockquote><p><strong>java.util.HashSet</strong>是Set接口的实现类，它使用哈希表（Hash table）作为其底层数据结构来存储数据</p><p>HashSet特点：</p><ul><li><strong>无序性：HashSet中的元素的存储顺序与插入顺序无关</strong></li></ul><p>HashSet使用哈希表来存储数据，哈希表根据元素的哈希值来确定元素的存储位置，而哈希值根据元素的内容计算得到的，与插入顺序无关。</p><ul><li><strong>唯一性：HashSet中不允许重复的元素，即每个允许都是唯一的</strong></li><li>允许null元素：HashSet允许存储null元素，但<strong>只能存储一个null元素</strong>，HashSet中不允许重复元素</li><li>高效性：<strong>HashSet的插入、删除和查找操作的时间复杂度都是o(1)</strong></li></ul><p>哈希表通过将元素的哈希值映射到数组的索引来实现快速的插入、删除和查找操作</p><p>基础案例1： 实例化HashSet对象，往里面插入多个字符串，验证HashSet特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test072_Basic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.实例化HashSet对象</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2.往集合中添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 不能重复</span></span><br><span class="line">        set.add(<span class="literal">null</span>); </span><br><span class="line">        set.add(<span class="literal">null</span>); <span class="comment">// 不能重复</span></span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span> + set.size());</span><br><span class="line">        <span class="comment">// 3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String str : set) &#123;</span><br><span class="line">            System.out.print(str + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// size: 4</span></span><br><span class="line"><span class="comment">// null world nihao hello </span></span><br><span class="line"><span class="comment">// 会发现null一直在前面</span></span><br></pre></td></tr></table></figure><p>根据结果可知，HashSet无序、唯一、null值可存在。</p><p>基础案例2： 实例化HashSet对象，往里面存入多个自定义类Student对象，观察结果。 </p><p>自定义Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test072_Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Student&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 没有重写Student的hashCode和equals</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lwsj&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lwsj&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lwsj&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span> + set.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student stu : set) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812163553068.png" alt="image-20230812163553068"></p><p>从结果可知，HashSet认为4个数据成员一模一样的Student对象是不同的对象， 成功将它们添加到了集合中。这明显是不合理的，<strong>思考为什么？</strong></p><p>元素插入过程：</p><ul><li>当向HashSet中插入元素时，先<strong>获取元素的hashCode()值</strong>，在检查HashSet中是否存在相同哈希值的元素，<strong>如果元素哈希值唯一，则直接插入元素</strong></li><li>如果存在相同哈希值的元素，会<strong>调用元素的equals()方法来进一步判断元素是否是相同</strong>。如果相同，则不会插入重复元素；如果不同，则插入。</li></ul><p><strong>hashCode()</strong> 方法复习：</p><ul><li><strong>hashCode()<strong>方法是</strong>Object</strong>类中的一个方法，它返回一个<strong>int类型</strong>的哈希码值</li><li>通常情况下，hashCode()方法会根据对象的属性值计算一个哈希码值（重写自定义类中的hashCode方法）</li></ul><p>hashCode的计算：</p><ul><li>地址值相同的对象，hashCode一定相同</li><li>hashCode相同的两个对象，不一定是同一个对象</li><li>hashCode不同的两个对象，一定是不同对象</li></ul><p><font color="#d12920">结论：如果要往HashSet集合存储自定义类对象，那么一定要重写自定义类中的hashCode方法和equals方法</font></p></blockquote><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><blockquote><p><strong>TreeSet是SortedSet(Set接口的子接口)的实现类</strong>，它基于<strong>红黑树（Red-Black Tree）</strong>数据结构实现</p><p>TreeSet特点：</p><ul><li>有序性</li></ul><p>插入的元素会自动排序，每次插入、删除或查询操作后，TreeSet会自动调整元素的顺序，以保持有序性。</p><ul><li>唯一性</li></ul><p>TreeSet中不允许重复的元素，即集合中的元素是唯一的。如果尝试插入一个已经存在的元素，该操作将被忽略</p><ul><li>动态性</li></ul><p>TreeSet是一个动态集合，可以根据需要随时添加、删除和修改元素。插入和删除操作的时间复杂度为o(logn),其中n是集合中的元素数量。</p><ul><li>高效性</li></ul><p>由于TreeSet底层采用红黑树数据结构，它具有快速的查找和插入性能。对于有序集合的操作，TreeSet通常比HashSet更高效。</p></blockquote><p>入门案例1： 准备一个TreeSet集合，放入多个Integer元素，观察是否自动进行排序。</p><blockquote><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812171103782.png" alt="image-20230812171103782"></p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812171357699.png" alt="image-20230812171357699"></p></blockquote><blockquote><p>TreeSet是一个有序集合，存储数据时，一定要指定元素的排序规则，有两种指定的方式，具体如下：</p><p>TreeSet排序规则：</p><ul><li><strong>自然排序（元素所属类型要实现 java.lang.Comparable接口）</strong></li><li><strong>比较器排序</strong></li></ul><p>上述2个案例中，<strong>Integer存如TreeSet没有报错，是因为Integer类已经实现自然排序</strong>，而Person类既没有实现自然排序，也没有额外指定比较器排序规则。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812171727865.png" alt="image-20230812171727865"></p></blockquote><p>TreeSet：自然排序</p><blockquote><p>如果一个类，实现了<strong>java.lang.Comparable</strong>接口，并重写了<strong>compareTo</strong>方法，那么这个类的对象就可以比较大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compareTo方法说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.属性.compareTo(o.属性);</span><br></pre></td></tr></table></figure><ul><li>result的值不大于0,说明this比o大 （交换）</li><li>result的值大于0，说明this比o小 （不换）</li><li>result的值等于0，说明this和o相等（<strong>remove是&#x3D;&#x3D;0的时候删除</strong>）</li></ul><p>元素插入过程：</p><p>当向TreeSet插入元素时，TreeSet会使用元素的compareTo()方法来比较元素之间的大小关系。根据比较结果，TreeSet会将元素插入到合适的位置，以保持有序性。如果两个元素相等（compareTo()方法返回0）,TreeSet会认为这是重复的元素，只会保留一个。</p><p>案例展示： 使用自然排序（先按name升序，name相同则按age降序）解决上述案例问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap08.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get、set、构造</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写方法，指定比较规则：先按name升序，name相同则按age降序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> name.compareTo(o.name);</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            r = o.age - <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812181822644.png" alt="image-20230812181822644"></p><p>可以看出，<strong>Integer的两个对象比较大小，其实就是比较Integer对象对应的int值的大小</strong>（比值）</p><p><font color="#d12920">注意：compareTo方法返回值代表的含义（三种情况：正数、负数、零）</font></p><p>补充内容2：整形、浮点型、字符串自然排序规则</p><p>对于整形、浮点型元素，它们会<strong>按照从小到大的顺序进行排序</strong>。对于字符串类型的元素，它们会按照<strong>字典顺序</strong>进行排序。</p><p><font color="#d12920">注意事项：compareTo方法的返回结果，只关心正数、负数、零，不关心具体的 值是多少</font></p></blockquote><p>TreeSet：比较器排序</p><blockquote><p>比较器排序步骤：</p><ul><li>创建一个实现了Comparator接口的比较器类，并重写其中的<strong>compare(</strong>)方法</li></ul><p>该方法定义了元素之间的比较规则。在 <strong>compare()</strong> 方法中，我们可以根据 <strong>元素的属性进行比较</strong>，并返回负整数、零或正整数，来表示元素之间的大小 关系。</p><ul><li>创建TreeSet对象时，将比较器对象作为参数传递构造函数，这样，TreeSet会根据比较器来进行排序。</li></ul><p>TreeSet构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化TreeSet类对象时，需要额外传入一个比较器类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.util.Comparator 接口源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compares its two arguments for order. Returns a</span></span><br><span class="line"><span class="comment">    negative integer,</span></span><br><span class="line"><span class="comment">    * zero, or a positive integer as the first argument is</span></span><br><span class="line"><span class="comment">    less than, equal</span></span><br><span class="line"><span class="comment">    * to, or greater than the second.&lt;p&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compare方法说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> compare(o1, o2);</span><br></pre></td></tr></table></figure><ul><li>result &gt; 0, 升序</li><li>result &lt; 0, 降序</li><li>resutl &#x3D; 0, 不能插入</li></ul><p><strong>注意，这里和自然排序的规则是一样的，只关心正数、负数、零，不关心具体的 值是多少</strong></p><p>案例说明： 使用比较器排序，对上述案例中Person进行排序，要求先按<strong>age升序，age相同 则按name降序</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.准备自定义比较器对象</span></span><br><span class="line">    <span class="comment">// 匿名内部类形式</span></span><br><span class="line">    Comparator&lt;Person&gt; comp = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line">        <span class="comment">//重写比较算法：先按按age升序，age相同则按name降序</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line">            <span class="keyword">if</span>(r == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//注意：字符串比较需要使用compareTo方法</span></span><br><span class="line">                r = o2.getName().compareTo(o1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//2.实例化TreeSet,传入自定义比较器对象</span></span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：如果同时使用自然排序和比较器排序，比较器排序将覆盖自然排序</font></p></blockquote><blockquote><p> 自然排序：</p><ul><li>使用元素类实现Comparable接口，并重写其中的**compareTo()**方法</li><li>元素会按照其自身的比较规则进行排序</li><li>自然排序是默认的排序方式，可以直接使用TreeSet或Collections.sort()方法进行排序</li><li>只能有一种自然排序方式</li></ul><p> 比较器排序：</p><ul><li>使用Comparator对象来定义元素之间的比较规则</li><li>可以自定义排序规则，不依赖于元素类的实现Comparable接口</li><li>需要创建一个实现Comparator接口的比较器类，并重写其中的**compare()**方法</li><li>可以有多个比较器，根据需要选择不同的比较器进行排序</li><li>可以通过<strong>传入Comparator对象给TreeSet或Collections.sort()方法</strong>来进行比较器排序</li></ul></blockquote><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><blockquote><p><strong>LinkedHashSet</strong>是<strong>HashSet</strong>的一个子类，具有<strong>HashSet</strong>的<strong>高效性能和唯一性特性</strong>，并且保<strong>持了元素的插入顺序</strong>，其底层<strong>基于哈希表和链实现</strong>。</p><p>案例展示：实例化一个LinkedHashSet集合对象，存入多个String字符串，观察是否唯一及顺序存储。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812185610457.png" alt="image-20230812185610457"></p></blockquote><h3 id="Set小结"><a href="#Set小结" class="headerlink" title="Set小结"></a>Set小结</h3><blockquote><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812185534516.png" alt="image-20230812185534516"></p></blockquote><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><blockquote><p>很多时候，我们会遇到成对出现的数据，例如，姓名和电话，身份证和人，IP和 域名等等，这种成对出现，并且一一对应的数据关系，叫做映射。 <strong>java.util.Map&lt;k,v&gt;</strong> 接口，就是专门处理这种映射关系数据的集合类型。 Map集合是一种用于存储键值对<strong>（key-value）</strong>映射关系的集合类。它提供了一种 快速查找和访问数据的方式，其中每个键都是唯一的，而值可以重复。</p></blockquote><h3 id="Map概述"><a href="#Map概述" class="headerlink" title="Map概述"></a>Map概述</h3><blockquote><p>Collection接口为<strong>单列集合</strong>的根接口，Map接口为<strong>双列集合</strong>的根接口。</p><p>Map集合与Collection集合，存储数据的形式不同</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812192324269.png" alt="image-20230812192324269"></p><p>Map集合特点：</p><ul><li>存储元素时，必须以key-value（键值对）的方法进行</li><li>键唯一性：Map集合中的键是唯一的，每个键只能对应一个值</li><li>可重复值：Map集合中的值可以重复，不同的键可以关联相同的值</li><li>高效的查找和访问：通过给定键key值(唯一)，可以快速获取与之对应的value值</li></ul><p>Map集合内部使用哈希表或红黑树等数据结构来实现高效的查找和访问</p><p>Map接口常用方法（注意泛型K代表Key，范型V代表Value）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把key-value存到当前Map集合中</span></span><br><span class="line">V <span class="title function_">put</span><span class="params">(K key, V value)</span></span><br><span class="line"><span class="comment">//把指定map中的所有key-value，存到当前Map集合中</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K,? extends V&gt; m)</span></span><br><span class="line"><span class="comment">//当前Map集合中是否包含指定的key值</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span></span><br><span class="line"><span class="comment">//当前Map集合中是否包含指定的value值</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span></span><br><span class="line"><span class="comment">//清空当前Map集合中的所有数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line"><span class="comment">//在当前Map集合中，通过指定的key值，获取对应的value</span></span><br><span class="line">V <span class="title function_">get</span><span class="params">(Object key)</span></span><br><span class="line"><span class="comment">//在当前Map集合中，移除指定key及其对应的value</span></span><br><span class="line">V <span class="title function_">remove</span><span class="params">(Object key)</span></span><br><span class="line"><span class="comment">//返回当前Map集合中的元素个数（一对key-value，算一个元素数据）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line"><span class="comment">//判断当前Map集合是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回Map集合中所有的key值</span></span><br><span class="line">Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回Map集合中所有的value值</span></span><br><span class="line">Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span></span><br><span class="line"><span class="comment">//把Map集合中的的key-value封装成Entry类型对象，再存放到set集合中，并返回</span></span><br><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span><br></pre></td></tr></table></figure><p>Map集合实现类： Java提供的Map集合实现类，常见的包括<strong>HashMap、TreeMap、LinkedHashMap</strong> 等。它们在内部实现和性能方面有所不同，可以根据具体需求选择适合的实现 类。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230812193340800.png" alt="image-20230812193340800"></p><ul><li>HashMap</li></ul><p>底层借助哈希表实现，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键所属的类和hashCode()方法、equals()方法 (<strong>重要+最常用</strong>)</p><ul><li>Hashtable</li></ul><p>和之前List集合中的Vector的功能类似，可以再多线程环境中，保证集合中的数据的操作安全（<strong>线程安全</strong>）</p><ul><li>LinkedHashMap</li></ul><p>该类是<strong>HashMap的子类</strong>，存储数据采用<strong>哈希表+链表</strong>。通过链表结构可以保证元素的存取顺序一致<strong>（存入顺序就是取出顺序）</strong></p><ul><li>TreeMap</li></ul><p>该类是<strong>Map接口的子接口SortedMap下面的实现类</strong>，和TreeSet类似，它<strong>可以对key值进行排序，同时构造器也可以接收一个比较器对象作为参数</strong>。支持<strong>key值的自然排序和比较器排序两种方式（支持key排序）</strong></p></blockquote><h3 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h3><blockquote><ul><li>第一种思路</li></ul><p>借助Map中的<strong>keySet方法</strong>，获取一个Set集合对象，内部包含了Map集合中所有 的key，进而遍历Set集合获取每一个key值，再根据key获取对应的value。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813093425941.png" alt="image-20230813093425941"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;rose&quot;</span>);</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;lucy&quot;</span>); <span class="comment">// lucy 会把 ls覆盖掉</span></span><br><span class="line">    Set&lt;Integer&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (Integer k : keySet) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line">        System.out.println(<span class="string">&quot;id: &quot;</span> + k + <span class="string">&quot; name: &quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种遍历</li></ul><p>借助Map中的<strong>entrySet方法</strong>，获取一个Set对象，内部包含了Map集合中所有的 键值对，然后对键值对进行拆分，得到key和value进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种遍历方式</span></span><br><span class="line">Set&lt;Entry&lt;Integer, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;Integer, String&gt; entry : entrySet) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot; &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种遍历方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda表达式进行遍历</span></span><br><span class="line">map.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot; &quot;</span> + v));</span><br></pre></td></tr></table></figure></blockquote><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote><p>HashMap底层借助哈希表实现，元素的存取顺序不能保证一致。</p><p>HashMap存储的键值对，如果键类型为自定义类，那么一般需要重写键所属类的hashCode()和equals方法() （重要，最常用）</p><p>HashMap特点：</p><ul><li>键唯一</li><li>值可重复</li><li>无序性</li><li>线程不安全</li><li><strong>键和值允许使用null</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test083_HashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.实例化HashMap对象，其中key类型为自定义Student</span></span><br><span class="line">        Map&lt;Student, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2.往集合中添加元素</span></span><br><span class="line">        <span class="comment">// map中插入键值对，调用key所属类的hashCode和equals方法进行判断是否重复</span></span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">78</span>), <span class="string">&quot;010&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;rose&quot;</span>, <span class="number">82</span>), <span class="string">&quot;005&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>), <span class="string">&quot;009&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>), <span class="string">&quot;019&quot;</span>); <span class="comment">// 相同key，只能保留一项，&quot;019&quot;会覆盖&quot;009&quot;</span></span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">67</span>), <span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="comment">// 注意：HashMap中key和value都可以为null</span></span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">86</span>), <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.基本方法测试</span></span><br><span class="line">        <span class="comment">// 获取长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span> + map.size());</span><br><span class="line">        <span class="comment">// 判断key是否存在</span></span><br><span class="line">        <span class="comment">// 借助 key所属类的hashCode和equals方法完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student(ww,67)是否存在: &quot;</span> + map.containsKey(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">67</span>)));</span><br><span class="line">        <span class="comment">// 判断value是否存在</span></span><br><span class="line">        <span class="comment">// 借助value所属类型的 equals方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在 009: &quot;</span> + map.containsValue(<span class="string">&quot;009&quot;</span>));</span><br><span class="line">        <span class="comment">// 根据key删除，返回键对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.remove(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;remove(Student(lucy, 70)): &quot;</span> + value);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.第一种遍历方法</span></span><br><span class="line">        Set&lt;Student&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keySet) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 第二种方式遍历</span></span><br><span class="line">        Set&lt;Entry&lt;Student, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;Student, String&gt; entry : entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813095357815.png" alt="image-20230813095357815"></p><p><font color="#d12920">结论：key类型如果为自定义类型，重写其hashCode和equals方法！</font></p><ul><li>HashMap中add（key，value）时，需要判读key是否存在（先hashCode再equals）</li><li>HashMap中containsKey（key），同样要借助hashCode和equals方法</li><li>HashMap中的remove（key），同样要借助hashCode和equals方法</li></ul><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813100440627.png" alt="image-20230813100440627"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashSet源码分析</span></span><br><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs a new, empty set; the backing</span></span><br><span class="line"><span class="comment">    &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">    * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加元素，value值固定为Object类对象PRESENT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><blockquote><p>Hashtable是Java中早期的哈希表实现，它实现了Map接口，并提供了键值对的存 储和访问功能。</p><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813100911921.png" alt="image-20230813100911921"></p><p>Hashtable特点：</p><ul><li>JDK1.0提供，接口方法较为复杂，后期实现了Map接口</li><li>线程安全：Hashtable是线程安全的，相对于HashMap性能稍低</li><li><strong>键和值不能为null</strong>：如果尝试使用null作为键或值，将会抛出NullPointerException</li><li>哈希表实现：和HashMap一样，内部使用哈希表数据结构来存储键值对</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test084_Hashtable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hashtable&lt;Student, String&gt; map = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">78</span>), <span class="string">&quot;010&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;rose&quot;</span>, <span class="number">82</span>), <span class="string">&quot;005&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>), <span class="string">&quot;009&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>), <span class="string">&quot;019&quot;</span>); <span class="comment">// 相同key，只能保留一项，&quot;019&quot;会覆盖&quot;009&quot;</span></span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">67</span>), <span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="comment">// 注意：Hashtable中key和value不能为null，否则抛出NullPointerException</span></span><br><span class="line">        <span class="comment">// map.put(new Student(&quot;tom&quot;, 86), null);</span></span><br><span class="line">        <span class="comment">// map.put(null, &quot;002&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Enumeration&lt;Student&gt; keys = map.keys();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; : &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashtable小结：</p><ul><li>单线程环境下建议使用HashMap，性能更好</li><li>多线程环境下，建议使用HashMap + Collections (请听后序)</li></ul></blockquote><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><blockquote><p>TreeMap是有序映射实现类，它实现了<strong>SortedMap接口</strong>，基于<strong>红黑树</strong>数据结构来存储键值对</p><p>TreeMap特点：</p><ul><li>键的排序：TreeMap中的键是按照自然顺序或自定义比较器进行排序</li><li>红黑树实现：TreeMap内部使用红黑树这种自平衡二叉搜索树数据结构来存储键值对</li><li>键唯一，值可重复</li><li>线程不安全，如果在多线程环境下使用TreeMap,应该使用Collections工具类处理</li><li>初始容量：TreeMap没有初始容量的概念，它会根据插入的键值对动态地调整红黑树的大小</li></ul><p><strong>TreeMap</strong> 自然排序案例： 实例化TreeMap对象，添加元素并遍历，观察程序运行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test085_TreeMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Integer key : keys)&#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 : lucy</span></span><br><span class="line"><span class="comment">// 2 : tom</span></span><br><span class="line"><span class="comment">// 3 : jack</span></span><br><span class="line"><span class="comment">// 4 : mary</span></span><br></pre></td></tr></table></figure><p>TreeMap 比较器排序案例： </p><p>创建TreeMap集合对象，额外指定比较器，要求按<strong>名字降序</strong>， 如果<strong>名字相同则按成绩升序</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test086_TreeMapComparatorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Comparator&lt;Student&gt; myComparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> -o1.getName().compareTo(o2.getName());</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    r = Integer.valueOf(o1.getScore()).compareTo(Integer.valueOf(o2.getScore()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Map&lt;Student, String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(myComparator);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">78</span>), <span class="string">&quot;010&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;rose&quot;</span>, <span class="number">82</span>), <span class="string">&quot;005&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">79</span>), <span class="string">&quot;009&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">79</span>), <span class="string">&quot;009&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">68</span>), <span class="string">&quot;019&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">86</span>), <span class="string">&quot;012&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">67</span>), <span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="comment">// key不能为null,否则出 NullPointerException</span></span><br><span class="line">        <span class="comment">// map.put(null, &quot;002&quot;);</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Entry&lt;Student, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;Student, String&gt; entry : entrySet) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot; : &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813104353939.png" alt="image-20230813104353939"></p><p><strong>思考，如果要求重复的元素也能够放入，如何实现？</strong> </p><p>修改比较器中返回值即可：<strong>当r&#x3D;&#x3D;0，即元素属性一样时，返回非0值即可。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Student&gt; myComparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> -o1.getName().compareTo(o2.getName());</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            r = Integer.valueOf(o1.getScore()).compareTo(Integer.valueOf(o2.getScore()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当 r==0, 即元素属性一样是，返回非0值即可</span></span><br><span class="line">        <span class="keyword">return</span> r == <span class="number">0</span> ? <span class="number">1</span> : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TreeMap小结：</p><p>TreeMap底层借助<strong>红黑树</strong>实现，它提供了搞笑的有序映射功能，可以用于范围查找、排序何遍历等操作。但红黑树的平衡操作会带来额外的开销，相比于HashMap等实现类，TreeMap在<strong>插入和除操作可能稍慢</strong>。</p></blockquote><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><blockquote><p><strong>LinkedHashMap是HashMap的一个子类</strong>，底层在<strong>哈希表</strong>的基础上，通过维护<strong>一个双向链表来保持键值对的有序性，可以保证存取次序一致。</strong></p><p>LinkedHashMap 基础案例： 创建LinkedHashMap对象，添加元素，观察是否存取次序一 致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test086_LinkedHashMap</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     Map&lt;String, Student&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">// 2.添加元素</span></span><br><span class="line">     map.put(<span class="string">&quot;010&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">78</span>));</span><br><span class="line">     map.put(<span class="string">&quot;005&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;rose&quot;</span>, <span class="number">82</span>));</span><br><span class="line">     map.put(<span class="string">&quot;009&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>));</span><br><span class="line">     map.put(<span class="string">&quot;019&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">70</span>)); <span class="comment">// value可以重复</span></span><br><span class="line">     map.put(<span class="string">&quot;002&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">     map.put(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ww&quot;</span>, <span class="number">67</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">         System.out.println(key + <span class="string">&quot; : &quot;</span> + map.get(key));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813105503563.png" alt="image-20230813105503563"></p><p>可以看出，数据存入Map中的顺序，就是存储的顺序，也是取出的顺序！</p></blockquote><h3 id="Map小结"><a href="#Map小结" class="headerlink" title="Map小结"></a>Map小结</h3><blockquote><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813105919321.png" alt="image-20230813105919321"></p></blockquote><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><blockquote><p>数组工具类是<strong>java.util.Arrays</strong>,可以专门来操作<strong>数组对象</strong>，提供静态方法，可直接调用</p><p>集合工具类是j<strong>ava.util.Collections</strong>, 专门来操作<strong>集合对象</strong>，里边<strong>都是静态方法</strong>，可以直接调用。</p><p><font color="#d12920">注意：Collection是单列集合根接口，Collections是集合工具类，两者不同！</font></p><ul><li>Collections 常用方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections</span> &#123;</span><br><span class="line">    <span class="comment">// 类外不能实例化对象，工具类主要调用static方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Collections</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//填充元素值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; list, T obj)</span> &#123;</span><br><span class="line">        <span class="comment">//省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取最大值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span> &amp; Comparable&lt;? <span class="built_in">super</span> T&gt;&gt; T <span class="title function_">max</span><span class="params">(Collection&lt;? extends T&gt; coll)</span> &#123;</span><br><span class="line">        Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; i = coll.iterator();</span><br><span class="line">        <span class="type">T</span> <span class="variable">candidate</span> <span class="operator">=</span> i.next();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">next</span> <span class="operator">=</span> i.next();</span><br><span class="line">            <span class="keyword">if</span> (next.compareTo(candidate) &gt; <span class="number">0</span>)</span><br><span class="line">                candidate = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; <span class="keyword">void</span>  <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        list.sort(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体方法讲解</p><ul><li>fill方法，使用指定元素替换指定列表中的所有元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">Collections.fill(list, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer num : list) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>max方法，根据元素的<strong>自然顺序</strong>，返回给定集合的最大元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line">list.add(<span class="number">65</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(Collections.max(list));</span><br></pre></td></tr></table></figure><p><img src="/2023/08/13/08-1-%E9%9B%86%E5%90%88/image-20230813111937019.png" alt="image-20230813111937019"></p><ul><li>min 方法，根据元素的<strong>自然顺序</strong>，返回给定集合的最小元素</li><li>reverse方法，反转集合中的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">9</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">Collections.reverse(list);</span><br><span class="line"><span class="keyword">for</span>(Integer o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sort方法，根据元素的<strong>自然顺序</strong>，队指定列表按升序进行排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">9</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//如果需要，也可以在第二个参数位置传一个比较器对象</span></span><br><span class="line"><span class="comment">//Collections.sort(list,c);</span></span><br><span class="line">Collections.sort(list);</span><br><span class="line"><span class="keyword">for</span>(Integer o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>shuffle方法，使用默认随机源对指定列表进行置换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">9</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">Collections.shuffle(list);</span><br><span class="line"><span class="keyword">for</span>(Integer o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>addAll方法，往集合中添加一些元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//注意，addAll的第二个参数，是可变参数</span></span><br><span class="line">Collections.addAll(list,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>synchronized相关方法，<strong>将非线城安全的集合转为线城安全</strong><ul><li>synchronizedCollection：把非线程安全的Collection类型集合，转为线程安全的集合</li><li>synchronizedList：List –&gt; 线程安全</li><li>synchronizedSet: Set –&gt; 线程安全</li><li>synchronizedMap：Map –&gt; 线程安全</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09_Collections</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.准备集合并添加元素</span></span><br><span class="line">        <span class="comment">//List&lt;Integer&gt; list = Arrays.asList(5,3,4,2,2,7);</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//addAll 往集合中添加多个元素</span></span><br><span class="line">        Collections.addAll(list,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//2.max 获取最大值【默认采用自然排序】</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;max: &quot;</span> + max);</span><br><span class="line">        <span class="comment">//3.min 获取集合最小值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">min</span> <span class="operator">=</span> Collections.min(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;min: &quot;</span> + min);</span><br><span class="line">        <span class="comment">//4.reverse 反转</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//4.sort 排序【按照 传入的排序算法 进行排序】</span></span><br><span class="line">        Comparator&lt;Integer&gt; comp = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="comment">// 逆序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//注意：排序不会删除集合中的元素</span></span><br><span class="line">        Collections.sort(list,comp);</span><br><span class="line">        System.out.println(<span class="string">&quot;逆序: &quot;</span> + list);</span><br><span class="line">        <span class="comment">//5.shuffle 随机打乱</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;打乱: &quot;</span> + list);</span><br><span class="line">        <span class="comment">//6.sort 排序【默认自然排序】</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序： &quot;</span> + list);</span><br><span class="line">        <span class="comment">//7.fill 填充</span></span><br><span class="line">        Collections.fill(list, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;after fill: &quot;</span> + list);</span><br><span class="line">        <span class="comment">//8.将ArrayList【线程不安全】的集合 转换成 线程安全集合</span></span><br><span class="line">        <span class="comment">//List&lt;Integer&gt; list2 =</span></span><br><span class="line">        Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：Collections.sort排序不会删除集合中的元素。</strong></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>大鹏一日同风起，扶摇直上九万里。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea闪退问题解决</title>
      <link href="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：分享自己的痛苦 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>三年了，你知到我是怎么过来的吗？idea一直闪退，一直找不到原因。</p><p>今天终于圆满的解决了这个问题！ </p><p><strong>仰天长笑出门去，我辈岂是蓬蒿人。</strong></p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>为什么idea会闪退呢？  </p><p>查看 java_err_in_idea64_xxxx.log</p><p>路径：C:\Users\用户名\java_error_in_idea64_11056.log</p><p>当然可以使用utools进行快速查找<a href="https://www.lzwgxust.top/post/c6f514bb.html?highlight=utools">utools | 楚门的世界</a></p></blockquote><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230807192746461.png" alt="image-20230807192746461"></p><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230807193045720.png" alt="image-20230807193045720"></p><blockquote><p>翻译就是：<font color="#d12920">不会写入任何核心转储。默认情况下，在客户端版本的Windows上未启用小型转储</font></p><p>网上搜啊搜啊，功夫不负有心人终于让我找到了一篇博客：<a href="https://blog.csdn.net/weixin_45691427/article/details/119108900?spm=1001.2014.3001.5501">王小新</a></p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>idea闪退很大程度是内存不足的问题，故有效的一个方法就是，提高idea运行的内存</p><p>首先找到对应的文件：idea64.exe.vmoptions</p></blockquote><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230814154033810.png" alt="image-20230814154033810"></p><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230814154146555.png" alt="image-20230814154146555"></p><blockquote><p>提高后，重启idea即可！！</p></blockquote><h3 id="方法？"><a href="#方法？" class="headerlink" title="方法？"></a>方法？</h3><blockquote><p>细细斟酌后发现，主要原因就是jdk版本问题。</p><p>我在想我都使用jdk8了为什么还有问题呢？</p><p>原来jdk8当中也是分稳定和不稳定的</p></blockquote><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230807193757581.png" alt="image-20230807193757581"></p><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230807193841404.png" alt="image-20230807193841404"></p><blockquote><p>如何切换请查看我的这篇博客：<a href="https://www.lzwgxust.top/post/97f5ff5d.html">windows-jdk版本切换</a></p></blockquote><h2 id="你好-idea"><a href="#你好-idea" class="headerlink" title="你好 idea"></a>你好 idea</h2><blockquote><p>久违了，老朋友。</p></blockquote><p><img src="/2023/08/07/idea%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230807194200503.png" alt="image-20230807194200503"></p><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉所有的问题都将尘埃落定！💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ecplise轻松上手无忧版</title>
      <link href="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/"/>
      <url>/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>早就耳闻ecplise（日食）IDE的强大了，今日一见，果然名不虚传！！</p></blockquote><h2 id="ecplise快捷键"><a href="#ecplise快捷键" class="headerlink" title="ecplise快捷键"></a>ecplise快捷键</h2><blockquote><p>快速Generate：Alt+Shift+s</p><p>查看一个类内的属性和方法：Ctrl+O</p><p>查看继承关系：Ctrl+T</p><p>快捷生成变量：Shift+Alt+L （本人改成了Ctrl+\）</p><p>生成提示：Alt+&#x2F;</p><p><strong>更多的快捷键可以根据自己的习惯进行修改</strong></p></blockquote><h2 id="安装ecplise"><a href="#安装ecplise" class="headerlink" title="安装ecplise"></a>安装ecplise</h2><blockquote><p>目前使用的STS版本：</p><p>官网：<a href="https://www.eclipse.org/downloads/">Eclipse Downloads | The Eclipse Foundation</a>（无STS需要手动配置）</p><p>配置STS：<a href="https://blog.csdn.net/zyplanke/article/details/104235750">Eclipse中安装Spring Tools Suite（STS）插件的正确过程</a></p><p>百度网盘地址：<a href="https://pan.baidu.com/s/1s_u862S3fXMpC9WXa4fWGg?pwd=nqvd">03-sts-4.6.0.RELEASE.zip</a>（已经包括了STS）</p></blockquote><h2 id="使用ecplise"><a href="#使用ecplise" class="headerlink" title="使用ecplise"></a>使用ecplise</h2><blockquote><p>启动ecplise</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805204738655.png" alt="image-20230805204738655"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805204918043.png" alt="image-20230805204918043"></p><blockquote><p>原因是切换不同的工作空间后 ecplise 之前配好的设置会被重置掉</p><p><font color="#d12920">所以不要勾选 Use this as the default and do not ask agein(不要勾选)</font></p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805205006049.png" alt="image-20230805205006049"></p><h2 id="配置ecplise"><a href="#配置ecplise" class="headerlink" title="配置ecplise"></a>配置ecplise</h2><blockquote><p>中文设置：<a href="https://blog.csdn.net/a2580ah/article/details/108511527">如何将Eclipse设置为中文版_eclipse怎么设置中文_啊哈~铜豌豆的博客-CSDN博客</a></p><p>因为本人习惯了看英文版了，所以就不设置中文版啦~~</p></blockquote><blockquote><p>设置联系，也就是自动代码补全（但是我感觉ecplise的自动补全有点傻，没有idea好用）</p><p>把下面这段复制进去即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure><p>解释一下这段的作用，其实就是<strong>设置你摁那个按键就有提示而已</strong>。哈哈哈等于没有说😁😁</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805210022214.png" alt="image-20230805210022214"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805205657607.png" alt="image-20230805205657607"></p><blockquote><p>配置自动格式化</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805210215880.png" alt="image-20230805210215880"></p><blockquote><p>设置自动保存</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805210501291.png" alt="image-20230805210501291"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><blockquote><p>本人以：Eclipse中安装反编译插件为例子</p><p>其他插件同理</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805211520428.png" alt="image-20230805211520428"></p><blockquote><p>在搜索框中输⼊关键字Decompiler（意思是反编译器），通过搜索找到Enhanced Class Decompiler 3.3.0这个 插件，点击Install安装它：</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805211714336.png" alt="image-20230805211714336"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212124144.png" alt="image-20230805212124144"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212144949.png" alt="image-20230805212144949"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212217840.png" alt="image-20230805212217840"></p><blockquote><p>稍等一会即可安装成功 </p><p>重新启动ecplise 让插件生效</p><p>当然你默认是看不到这个bin包滴~ 需要配置一下</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212416243.png" alt="image-20230805212416243"></p><blockquote><p>配置显示 bin包</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212706554.png" alt="image-20230805212706554"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212854621.png" alt="image-20230805212854621"></p><blockquote><p>出现反编译的代码表示成功</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230805212519182.png" alt="image-20230805212519182"></p><blockquote><p>到此就是Decompiler（意思是反编译器）插件完整安装过程啦~</p><p>是不是很 easy （哈哈不容易哈~）</p></blockquote><h2 id="配置jdk不同版本"><a href="#配置jdk不同版本" class="headerlink" title="配置jdk不同版本"></a>配置jdk不同版本</h2><blockquote><p>java可以是需要切换不同的jdk版本滴</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220410097.png" alt="image-20230807220410097"></p><blockquote><p>下面是添加不同版本的jdk到ecplise当中</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220509621.png" alt="image-20230807220509621"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220654697.png" alt="image-20230807220654697"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220822614.png" alt="image-20230807220822614"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220844348.png" alt="image-20230807220844348"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807220909033.png" alt="image-20230807220909033"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807221039343.png" alt="image-20230807221039343"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807221123679.png" alt="image-20230807221123679"></p><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807221220668.png" alt="image-20230807221220668"></p><blockquote><p>此外还要记得选择 compiler compliance level 为指定的版本</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807221437986.png" alt="image-20230807221437986"></p><blockquote><p>查看配置是否成功！！</p></blockquote><p><img src="/2023/08/02/ecplise%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B%E6%97%A0%E5%BF%A7%E7%89%88/image-20230807221601904.png" alt="image-20230807221601904"></p><blockquote><p>到此就配置成功啦~~</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此 <code>tool栏</code> 楚门的世界将会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ecplise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-抽象-接口-内部类-枚举</title>
      <link href="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><h2 id="抽象概述"><a href="#抽象概述" class="headerlink" title="抽象概述"></a>抽象概述</h2><blockquote><p>抽象，简单可理解为<strong>不具体、高度概括的</strong>，专业描述为：<strong>抽象是一种将复杂的概念和现实世界问题简化为更易于理解和处理的表示方法。</strong>在计算机科学和编程中，<strong>抽象是一种关注问题的本质和关键特征，而忽略具体实现细节的方法。</strong></p><p>抽象是通过定义<strong>类、接口和方法</strong>来实现的</p><p>抽象方法：将<strong>共性的行为（方法）</strong>抽取到父类之后，发现该方法的实现逻辑无法再父类中给出具体的实现，就可以将该方法定义尾抽象方法。（<strong>父类无法具体实现就抽象</strong>）</p><p>抽象类：<strong>如果一个类中存在抽象方法，那么该类就必须声明为抽象类</strong>。</p></blockquote><h2 id="抽象特点"><a href="#抽象特点" class="headerlink" title="抽象特点"></a>抽象特点</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法定义格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br><span class="line"><span class="comment">//特别注意：抽象方法只有方法声明，没有方法的实现</span></span><br><span class="line"><span class="comment">//抽象类定义格式</span></span><br><span class="line">[权限修饰符] <span class="keyword">abstract</span> class 类名 &#123;</span><br><span class="line">        <span class="comment">//0或多个数据成员</span></span><br><span class="line">        <span class="comment">//0或多个构造方法</span></span><br><span class="line">        <span class="comment">//0或多个成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类和抽象方法的关系：<strong>（重点掌握）</strong></p><ul><li>使用abstract修饰的类就是抽象类</li><li>抽象类可以包含，也可以不包含抽象方法</li><li>包含抽象方法的类，一定要声明为抽象类</li></ul><p>抽象类和普通类区别：</p><ul><li>抽象类必须使用abstract修饰符</li><li>抽象类相对普通类，多了<strong>包含抽象方法的能力</strong></li><li>抽象类相对普通类，失去了<strong>实例化创建对象的能力</strong>（抽象类不能实例化！）</li></ul><p>抽象类和普通类相同点：</p><ul><li>符合继承关系特点，能够使用多态机制</li><li>子类可以重写从抽象类继承的方法</li><li>实例化子类对象需要借助父类构造器实现父类部分的初始化</li></ul></blockquote><blockquote><p>案例：</p><p>要求：定义一个形状类Shape，包含抽象方法getArea()，再定义其子类Circle，重写抽象方法并进行功能测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String name)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;面积 = &quot;</span> + getRoundedValue(getArea(), <span class="number">4</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定位小数，四舍五入后的结果</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number 原double值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> digit  希望得到小数点后几位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal <span class="title function_">getRoundedValue</span><span class="params">(<span class="type">double</span> number, <span class="type">int</span> digit)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">decimal</span> <span class="operator">=</span> BigDecimal.valueOf(number);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">roundedValue</span> <span class="operator">=</span> decimal.setScale(digit, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">        <span class="keyword">return</span> roundedValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不确定具体是什么图形，无法计算该面积 故定义为抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String name, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123; <span class="comment">// 子类也设置为抽象类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> wight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String name, <span class="type">double</span> wight, <span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.wight = wight;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wight * length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为子类有抽象方法没有实现，所以需要设置成抽象类</span></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="comment">//public double getPerimeter() &#123;</span></span><br><span class="line">    <span class="comment">//// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="comment">//return 0;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.抽象类不能实例化对象，下面一行编译报错</span></span><br><span class="line">    <span class="comment">//Shape p = new Shape(); //error</span></span><br><span class="line">    <span class="comment">//2.抽象类引用可以指向子类（非抽象类）对象</span></span><br><span class="line">    <span class="type">Shape</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;圆&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//3.实际开发中，主要多态应用</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> p.getArea();</span><br><span class="line">    System.out.println(<span class="string">&quot;area: &quot;</span> + area); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><blockquote><p>引用数据类型：<strong>类、数组、接口</strong></p></blockquote><h2 id="接口概述"><a href="#接口概述" class="headerlink" title="接口概述"></a>接口概述</h2><blockquote><p>接口是对Java单继承的补充。<strong>Java只支持单继承</strong>（亲爹唯一），如果在开发过程中<strong>想额外增强类的功能</strong>，可以借助接口实现（可以拜师，拜多个师傅也可 以）。</p><p>接口是Java中一种重要的<strong>抽象机制</strong>，它<strong>提供了一种定义行为规范和实现多态性的方式</strong>。通过合理使用接口，可以提高代码的<strong>可扩展性、可维护性和灵活性</strong>。</p><p>接口是除了类和数组之外，另外一种引用数据类型，需要使用<strong>interface</strong>关键字来定义，<strong>接口最终也会被编译成.class文件</strong>，但一定要明确<strong>接口并不是类，而是另一种引用数据类型</strong>。</p></blockquote><blockquote><p>接口基础定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line">    <span class="comment">// 数据成员，可以定义多个</span></span><br><span class="line">    [<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>] 数据类型 数据成员 = 值;</span><br><span class="line">    <span class="comment">// 抽象方法：可以定义多个</span></span><br><span class="line">    [<span class="keyword">public</span> <span class="keyword">abstract</span>] 返回值类型 方法名(形参列表);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用interface关键字来定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IAction</span> &#123;</span><br><span class="line">    <span class="comment">//数据成员,下面2行效果一样</span></span><br><span class="line">    <span class="comment">//public static final int NUM = 10;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//成员方法,下面2行效果一样</span></span><br><span class="line">    <span class="comment">//public abstract void start();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//接口不可以实例化对象</span></span><br><span class="line">    <span class="comment">//IAction ac = new IAction(); error</span></span><br><span class="line">    System.out.println(IAction.NUM);</span><br><span class="line">    <span class="comment">//接口中数据成员默认 public static final，故而下行编译报错</span></span><br><span class="line">    <span class="comment">//IAction.NUM = 20;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充内容：</p><ul><li><p>JDK8中，还允许在接口中编写<strong>静态方法和默认方法</strong></p></li><li><p>JDK9中，还允许在接口中编写<strong>私有方法</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IAction</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123; <span class="comment">// JDK9后才不会报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;private method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><blockquote><ul><li><p>Java中类和类之间的关系是继承，且只能是<strong>单继承</strong></p></li><li><p>类和接口是实现关系，通过implements关键字表示，<strong>可以是单实现，也可以是多实现</strong></p></li><li><p>子类还可以在<strong>继承一个父类的同时实现多个接口</strong></p></li></ul><p>接口的实现类书写格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个类可以同时实现多个接口</span></span><br><span class="line">[修饰符] class 类名 implements 接口名<span class="number">1</span>,接口名<span class="number">2</span>,... &#123;</span><br><span class="line">    重写所有抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>接口属于引用数据类型的一种，它不是类，它<strong>没有构造方法</strong></li><li>接口的实现类（子类），可以是正常类（重写所有抽象方法），可以是抽象类（包含抽象方法）</li><li>接口不能创建对象，一般用<strong>接口引用指向实现类对象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接口的实现类， 重写所有的抽象方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActionImpl</span> <span class="keyword">implements</span> <span class="title class_">IAction</span> &#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start开始执行 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完成，end结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.接口不能实例化对象，下面一行编译报错</span></span><br><span class="line">    <span class="comment">//IAction ic = new IAction();</span></span><br><span class="line">    <span class="comment">//2.接口引用 指向实现类对象</span></span><br><span class="line">    <span class="type">IAction</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionImpl</span>();</span><br><span class="line">    <span class="comment">//3.接口数据成员访问测试</span></span><br><span class="line">    System.out.println(IAction.NUM);</span><br><span class="line">    System.out.println(ac.NUM);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="comment">//4.通过接口引用 调用 重写方法（多态体现）</span></span><br><span class="line">    ac.start();</span><br><span class="line">    ac.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>在类和接口的实现关系中，<strong>可以使用多态</strong>，因为类和接口的实现关系，可理解为继承的一种形式。</li><li>一个类可以同时<strong>实现多个接口</strong>，但需要把多个接口的<strong>抽象方法全部重写</strong>。</li></ul></blockquote><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><blockquote><p>Java中，<strong>类和类之间是单继承</strong>关系，<strong>接口和接口之间是多继承</strong></p><p>接口继承格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 子接口 extends 父接口<span class="number">1</span>,父接口<span class="number">2.</span>..&#123;</span><br><span class="line">    <span class="comment">// 新增成员或抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Runable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口多继承</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> <span class="keyword">extends</span> <span class="title class_">Runable</span>,Flyable &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><blockquote><p>案例描述： 定义一个抽象父类Animal，再定义两个接口IJumpAble跳火圈、ICycleAble骑自行车，最后定义一个猴子类Monkey，去继承Animal，同时实现IJumpAble、 ICycleAble，进行功能测试。</p><p>复杂实现类定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 实现类 extends 父类 implements 接口名<span class="number">1</span>, 接口名<span class="number">2</span>,... &#123;</span><br><span class="line">    重写所有方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象父类  +  接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IJumpAble</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICircleAble</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">circle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, color=&quot;</span> + color + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 省略get | set ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Monkey</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">ICircleAble</span>, IJumpAble &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monkey</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; jump fire circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">circle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; driver car&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; eat bananar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; hanging up to sleep &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TestCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.抽象类不能实例化对象，但可以定义引用指向子类对象</span></span><br><span class="line">    <span class="type">Animal2</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>(<span class="string">&quot;yellow&quot;</span>, <span class="number">2</span>, <span class="string">&quot;小悟空&quot;</span>);</span><br><span class="line">    <span class="comment">//2.借助抽象类引用，只能访问抽象类中具有的方法</span></span><br><span class="line">    a.eat();</span><br><span class="line">    a.sleep();</span><br><span class="line">    <span class="comment">//下面两行编译报错【多态：编译看左边，运行看右边】</span></span><br><span class="line">    <span class="comment">//a.jump();</span></span><br><span class="line">    <span class="comment">//a.cycle();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    <span class="comment">//3.用接口引用指向实现类对象</span></span><br><span class="line">    <span class="type">ICycleAble</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>(<span class="string">&quot;yellow&quot;</span>, <span class="number">5</span>, <span class="string">&quot;马戏团小猴&quot;</span>);</span><br><span class="line">    <span class="comment">//4.借助接口引用调用接口中重写方法</span></span><br><span class="line">    c.cycle();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意：接口引用类型 只能调用 接口中具备的方法【多态：编译看左边，运行看右边】</span></span><br><span class="line">    <span class="comment">//下面三行编译报错</span></span><br><span class="line">    <span class="comment">//c.eat(); error</span></span><br><span class="line">    <span class="comment">//c.sleep(); error</span></span><br><span class="line">    <span class="comment">//c.jump(); error</span></span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5.如果想要调用父类方法或其他接口方法，可以借助类型转换实现</span></span><br><span class="line">    <span class="comment">//注意，一定要借助instanceof额外判断引用指向对象的类型</span></span><br><span class="line">    <span class="keyword">if</span> (c <span class="keyword">instanceof</span> Monkey) &#123;</span><br><span class="line">        <span class="type">Monkey</span> <span class="variable">m</span> <span class="operator">=</span> (Monkey) c;</span><br><span class="line">        m.eat();</span><br><span class="line">        m.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c <span class="keyword">instanceof</span> IJumpAble) &#123;</span><br><span class="line">        <span class="type">IJumpAble</span> <span class="variable">j</span> <span class="operator">=</span> (IJumpAble) c;</span><br><span class="line">        j.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><strong>接口多态应用时，编译看左边，运行看右边</strong></li><li><strong>即接口引用只能调用接口中包含的方法，成功调用的是重写以后的方法</strong></li></ul></blockquote><h2 id="类接口关系"><a href="#类接口关系" class="headerlink" title="类接口关系"></a>类接口关系</h2><blockquote><ul><li>类与类的关系<ul><li>继承关系，<strong>只能单继承，但是可以多层继承</strong></li></ul></li><li>类与接口的关系<ul><li>实现关系，<strong>可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</strong></li></ul></li><li>接口与接口的关系<ul><li>继承关系，<strong>可以单继承，也可以多继承</strong></li></ul></li></ul></blockquote><h2 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h2><blockquote><ul><li>JDK8新特性：接口可以包含静态方法和默认方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">JDK8Action</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">oPS_MODEString</span> <span class="operator">=</span> <span class="string">&quot;auto&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是JDK8新特性</span></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">dFun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in default fun() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sFun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in static fun() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo01</span> <span class="keyword">implements</span> <span class="title class_">JDK8Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重写start() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重写stop() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.接口引用指向实现类对象</span></span><br><span class="line">    <span class="type">JDK8Action</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用实现类重写方法</span></span><br><span class="line">    a.start();</span><br><span class="line">    a.stop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.调用default方法</span></span><br><span class="line">    a.dFun();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.JDK8中接口可以定义static方法，但不能通过接口引用调用，只能通过接口名调用</span></span><br><span class="line">    <span class="comment">//a.sFun(); // This static method of interface JDK8Action can only be accessed as JDK8Action.sFun</span></span><br><span class="line">    JDK8Action.sFun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230802184826302.png" alt="image-20230802184826302"></p><p><font color="skyblue">注意事项：JDK8接口可以定义static方法，但不能通过接口引用调用，只能通过接口名调用</font></p></blockquote><blockquote><ul><li>JDK9新特性：接口可以包含私有方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用interface关键字来定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">JDK9Action</span> &#123;</span><br><span class="line">    <span class="comment">// 接口中的静态常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OPS_MODE</span> <span class="operator">=</span> <span class="string">&quot;auto&quot;</span>;</span><br><span class="line">    <span class="comment">// 接口中的抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//私有方法 jdk9以下报错</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private run() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo02</span> <span class="keyword">implements</span> <span class="title class_">JDK9Action</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重写start() ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test026_JDK9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.接口引用指向实现类对象</span></span><br><span class="line">        <span class="type">JDK9Action</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo02</span>();</span><br><span class="line">        <span class="comment">//2.调用实现类重写的抽象方法</span></span><br><span class="line">        a.start();</span><br><span class="line">        <span class="comment">//3.调用接口private方法</span></span><br><span class="line">        <span class="comment">//a.run();无法调用接口中私有的方法，私有方法只是供内部使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><blockquote><p>接口和抽象类有什么区别？如何选择？</p><p>语法结果区别：</p><ul><li>定义方式：抽象类通过使用abstract关键字来定义，而接口使用interface关键字来定义</li><li>实现方式：一个类可以继承（extends）<strong>一个抽象类</strong>，而一个类可以实现（implements）<strong>多个接口</strong></li><li>构造函数：<strong>抽象类可以有构造函数，而接口不能有构造函数</strong></li><li>方法实现：抽象类可以包含具体的方法实现，而接口只能包含抽象方法，即没有方法体的方法声明</li><li>多继承：Java不支持多继承，<strong>一个类只能继承一个抽象类，但可以实现多个接口</strong></li><li>数据成员：抽象类可以包含普通数据成员和static数据成员，接口只能包含static final修饰的数据成员</li></ul><p>设计理念区别：</p><ul><li><strong>不同的实现类之间体现 like a 的关系，接口更加强调行为规范的定义，适用于多个类具有相同行为规范的情况。</strong>例如：飞机具备飞翔的行为，鸟也具备飞翔的行为，此时我们就可以定义接 口包含抽象方法fly(),然后让飞机和鸟分别去实现该接口。飞机 like a 鸟， 因为它们都会fly()。</li><li>子类和抽象父类体现的是 <strong>is a</strong> 的关系，抽象类归根到底还是类，它比较特殊，<strong>不能被实例化，只能被继承。抽象类用于定义一种通用的模板或者规范</strong>，其中可包含一些具体数据成员、方法实现和抽象方法声明。例如：前面案例中的形状类Shape，它里面包含方法getArea()，但该方法功 能不确定，所以定义成抽象方法，而包含了抽象方法的类Shape也必须被声 明为抽象类。定义子类圆形类，其getArea()方法功能是明确的，则子类中重 写方法。</li></ul><p>结论：</p><ul><li>如果仅仅是要<strong>额外扩展已存在类的功能</strong>，则选择定义接口，让类去实现接口</li><li>如果需要创建<strong>一组相关的类</strong>，且这些类之间<strong>有一些共同的行为和属性</strong>，那么可以定义一个类作为这些类的父类。<strong>如果不想实例化父类对象，则可以把这个父类设置为抽象类。</strong></li></ul></blockquote><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><blockquote><p>在一个类的内部再定义另外的一个类，这就是内部类。</p><p>正常类形式，可以称为<strong>外部类或顶级类或平行类</strong>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Level</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>内部类形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><blockquote><p>在类中，除了可以定义成员方法、成员变量、还可以定义成员内部类</p><p>成员内部类定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line">[修饰符] class 外部类 &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    [权限修饰符] class 内部类 &#123;</span><br><span class="line">        <span class="number">0</span>或多个数据成员</span><br><span class="line">            <span class="number">0</span>或多个构造方法</span><br><span class="line">            <span class="number">0</span>或多个成员方法</span><br><span class="line">            <span class="comment">//注意，不可以包含static成员或方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类对象实例化格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = 外部类对象.内部类对象;</span><br><span class="line">例：Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br></pre></td></tr></table></figure><p>内部类中访问外部类中<strong>同名成员</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类名.<span class="built_in">this</span>.成员名;</span><br><span class="line">例: <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> Outer.<span class="built_in">this</span>.o_num;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>成员内部类中可以<strong>直接访问外部类中所有成员和方法（含private、static字段）</strong></li><li>在外部类中可以<strong>直接访问内部类所有的成员和方法（含private）</strong>，但必须<strong>借助内部类对象</strong></li><li><strong>成员内部类内部不能定义static成员或方法</strong>（静态字段是与类本身相关联的，而内部类的实例是依赖于外部类实例的）</li></ul><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805091314146.png" alt="image-20230805091314146"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticField</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">instanceField</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="comment">// 这里不能定义静态字段</span></span><br><span class="line">        <span class="comment">// static int innerStaticField = 30;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">accessFields</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(staticField);     <span class="comment">// 可以访问外部类的静态字段</span></span><br><span class="line">            System.out.println(instanceField);   <span class="comment">// 可以访问外部类的实例字段</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805093058054.png" alt="image-20230805093058054"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.chap07.blog.Outer.Inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test031_Member</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.disp();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner2.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">o_num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i_num</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">40</span>; <span class="comment">// 同名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static int s_num = 50; error</span></span><br><span class="line">        <span class="comment">//public static void s_test() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, o_num: &quot;</span> + o_num);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, num: &quot;</span> + num); <span class="comment">// 局部</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, num: &quot;</span> + <span class="built_in">this</span>.num); <span class="comment">// 内部类成员变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, num: &quot;</span> + Outer.<span class="built_in">this</span>.num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类方法访问内部字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disp</span><span class="params">()</span> &#123;</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="built_in">this</span>.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;in Outer, i_num: &quot;</span> + inn.i_num);</span><br><span class="line"></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;inn2.i_num: &quot;</span> + inn2.i_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805095929767.png" alt="image-20230805095929767"></p><p><font color="#d12920">注意，上述代码编译成功后，外部类和内部类都会生成对应的class文件</font></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805100419517.png" alt="image-20230805100419517"></p><p>JavaAPI中的使用成员内部类： <strong>java.util.ArrayList</strong> 类中，就定义了好几个成员内部类，并且还是private 修饰的</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805100723071.png" alt="image-20230805100723071"></p></blockquote><p><strong>思考，什么情况下会使用内部类？</strong></p><blockquote><p>在对事物进行抽象的时候，<strong>若一个事物内部还包含其他事物，</strong>就可以考虑使用内部类这种结构。</p><p>例如，汽车（Car）中包含发动机（Engine） ，这时， Engine 类就可以考虑（非 必须）使用内部类来描述，定义在Car类中的成员位置。 这样设计，既可以表示Car和Engine的紧密联系的程度，也可以在Engine类中很 方便的使用到Car里面的属性和方法</p><p>注意：这里从程序中，类与类之间的关系和意义进行考虑而设计的，其实这里即使不使用内部类的结构，使用普通的两个类也能完成功能，但是内部类的结构设计会更加符合实际意义，也能够好的完成功能，因为内部类访问外部的属性和方法会更加容易。</p></blockquote><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><blockquote><p>静态内部类属于成员内部类中的一种，其需要static关键字进行修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line">[修饰符] class 外部类 &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    [权限修饰符] <span class="keyword">static</span> class 内部类 &#123;</span><br><span class="line">        <span class="number">0</span>或多个数据成员</span><br><span class="line">            <span class="number">0</span>或多个构造方法</span><br><span class="line">            <span class="number">0</span>或多个成员方法</span><br><span class="line">            <span class="comment">//注意，不可以包含static成员或方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类名.内部类名();</span><br><span class="line">Outer2.<span class="type">Inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>.Inner();</span><br></pre></td></tr></table></figure><p>静态方法访问格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名.方法名();</span><br><span class="line"><span class="comment">// 如果在外部类中，外部类名可以省略。</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>相对于成员内部类，<strong>静态内部类中可以定义static成员和方法</strong></li><li>静态内部类成员方法内，<strong>只能访问外部类static成员或方法【静态只能访问静态】</strong></li><li>外部类方法可以访问静态内部类所有成员及方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test032_Static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.静态内部类调用static方法</span></span><br><span class="line">        <span class="comment">// 编译报错，不识别Inner，会把Inner当成外部类去查找</span></span><br><span class="line">        <span class="comment">// Inner.sFun();</span></span><br><span class="line">        <span class="comment">// 正确写发</span></span><br><span class="line">        Outer2.Inner.sFun();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.静态内部类普通方法调用</span></span><br><span class="line">        <span class="comment">// 内部类对象 固定定义格式</span></span><br><span class="line">        Outer2.<span class="type">Inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>.Inner();</span><br><span class="line">        inn.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.外部类对象访问内部类成员</span></span><br><span class="line">        <span class="type">Outer2</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>();</span><br><span class="line">        outer.disp();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">o_num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">s_num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i_num</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">is_num</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// static成员方法只能访问外部类static成员【静态只能访问静态】</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sFun</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 编译报错</span></span><br><span class="line">            <span class="comment">// System.out.println(&quot;Outer2 o_num: &quot; + o_num);</span></span><br><span class="line">            <span class="comment">// cannot make a static reference to the non-static field o_num</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Outer2 s_num: &quot;</span> + Outer2.s_num);</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer2 s_num: &quot;</span> + s_num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通成员方法</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 1.访问内部类中数据成员</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, num: &quot;</span> + <span class="built_in">this</span>.i_num); <span class="comment">// 30</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, is_num: &quot;</span> + Inner.is_num); <span class="comment">// 40</span></span><br><span class="line">            <span class="comment">// 2.静态内部类方法中只能访问外部类的static成员</span></span><br><span class="line">            <span class="comment">// 编译报错</span></span><br><span class="line">            <span class="comment">// System.out.println(&quot;in Inner,o_num: &quot; + o_num);</span></span><br><span class="line">            <span class="comment">// 3.访问外部类static成员，下面两行效果相同</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, s_num: &quot;</span> + s_num);</span><br><span class="line">            <span class="comment">// 20</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in Inner, s_num: &quot;</span> + Outer2.s_num); <span class="comment">// 20</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类方法访问内部字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//Outer2.Inner inn = new Inner(); 一样的</span></span><br><span class="line">        Outer2.<span class="type">Inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>.Inner();</span><br><span class="line">        System.out.println(<span class="string">&quot;in Outer, i_num: &quot;</span> + inn.i_num);</span><br><span class="line">        System.out.println(<span class="string">&quot;in Outer, is_num: &quot;</span> + Inner.is_num);</span><br><span class="line">        System.out.println(<span class="string">&quot;in Outer, is_num: &quot;</span> + inn.is_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805103753155.png" alt="image-20230805103753155"></p><p><font color="#d12920">注意，在静态内部类中访问不了外部类中的非静态属性和方法</font></p><p>JavaAPI中静态内部类案例： <strong>java.lang.Integer</strong> 类中，就定义了一个静态内部类，并且还是private修饰 的</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805104202798.png" alt="image-20230805104202798"></p></blockquote><h2 id="局部内部类（了解即可）"><a href="#局部内部类（了解即可）" class="headerlink" title="局部内部类（了解即可）"></a>局部内部类（了解即可）</h2><blockquote><p>在外部类的方法中定义的内部类，我们称为局部内部类，<strong>它的作用范围只是在当前方法中</strong>。</p><p> 局部内部类是最不常用的一种内部类，大家了解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 外部类 &#123;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    [修饰符] 返回值类型 方法名(形式参数列表) &#123;</span><br><span class="line">        <span class="comment">//功能实现省略...</span></span><br><span class="line">        <span class="comment">//局部内部类定义</span></span><br><span class="line">        class 成员内部类名 &#123;</span><br><span class="line">            <span class="number">0</span>或多个数据成员</span><br><span class="line">                <span class="number">0</span>或多个构造方法</span><br><span class="line">                <span class="number">0</span>或多个成员方法</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意：局部内部类的作用范围在当前方法中，只能在该方法中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：局部内部类只能在定义的方法中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test033_Local</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer3</span> <span class="variable">outer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer3</span>();</span><br><span class="line">        outer3.innerFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含局部内部类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerFun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 下面两行效果一样</span></span><br><span class="line">        <span class="comment">// int num = 20; 会默认帮你加上final</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 在方法内部，定义局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i_num</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部变量num: &quot;</span> + num);</span><br><span class="line">                System.out.println(<span class="string">&quot;内部类成员变量this.i_num: &quot;</span> + <span class="built_in">this</span>.i_num);</span><br><span class="line">                System.out.println(<span class="string">&quot;外部类成员变量Outer3.this.num: &quot;</span> + Outer3.<span class="built_in">this</span>.num);</span><br><span class="line">                <span class="comment">// 方法中声明的局部变量，只要在内部类中使用，默认会加上final修饰</span></span><br><span class="line">                <span class="comment">// 所以下面一行 编译会报错：给final变量赋值</span></span><br><span class="line">                <span class="comment">// num = 60;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建局部内部类对象</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="comment">// 访问内部类私有成员</span></span><br><span class="line">        System.out.println(inn.i_num);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用内部内方法</span></span><br><span class="line">        inn.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805105159336.png" alt="image-20230805105159336"></p></blockquote><blockquote><p><font color="#d12920">面试常考：JDK8中，方法中定义的局部变量，如果在局部内部类中对其访问操作，那么这个局部变量会默认加上final修饰，其值不能改变。</font></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805110112059.png" alt="image-20230805110112059"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClassExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">outerVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在局部内部类中访问外部方法的局部变量</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Outer variable: &quot;</span> + outerVariable);</span><br><span class="line">                <span class="comment">// outerVariable = 20;  // 这里如果解除注释会导致编译错误</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.innerMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalInnerClassExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalInnerClassExample</span>();</span><br><span class="line">        example.outerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="匿名内部类（必须掌握）"><a href="#匿名内部类（必须掌握）" class="headerlink" title="匿名内部类（必须掌握）"></a>匿名内部类（必须掌握）</h2><blockquote><p>匿名内部类，是一种没有名字的内部类，<strong>本质上是一个特殊的局部内部类</strong>（定义在方法内部）。</p><p> 在之后的代码中，匿名内部类是使用最多的内部类（必须掌握）。</p><p>常规接口、抽象类的使用匿名内部类步骤：</p><ul><li>声明一个类，去实现这个接口，或去继承抽象类</li><li>重写所有抽象方法</li><li>用接口或引用去指向子类或实现类对象</li><li>通过接口或抽象类引用去调用重写的方法</li></ul><p>在这个过程中，我们的<strong>核心任务是重写抽象方法，最后再调用这些重写的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父类或接口类型 变量名 = <span class="keyword">new</span> 父类或接口(构造方法实参列表) &#123;</span><br><span class="line">    <span class="comment">// 重写所有的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 method1(形参列表) &#123;</span><br><span class="line">        方法体实现</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 method2(形参列表) &#123;</span><br><span class="line">        方法体实现</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//匿名内部类对象调用方法</span></span><br><span class="line">变量名.重写方法(实参列表);</span><br></pre></td></tr></table></figure><p>匿名内部类的两种形式：</p><ul><li>利用父类，<strong>进行声明并创建匿名内部类对象</strong>，这个匿名内部类默认就是这个父类的子类型</li><li>利用接口，<strong>进行声明并创建匿名内部类对象</strong>，这个匿名内部类默认就是这个接口的实现类</li></ul><p>匿名内部类注意事项：</p><ul><li>匿名内部类<strong>必须依托于一个接口或一个父类（可以是抽象类，也可以是普通类）</strong></li><li>匿名内部类在声明的同时，就必须创建出对象</li><li>匿名内部类中无法定义构造器</li></ul><p>名内部类实现接口案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test034_Interface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ISleep</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ISleep</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;躺着睡&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        s1.sleep();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ISleep</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;水里睡&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISleep</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类实现抽象类案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in Mythread,test ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test034_Abstract</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.普通写法</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写 run1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        th.run();</span><br><span class="line">        th.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        <span class="comment">//2.简化写法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;in run2 ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.run();</span><br><span class="line">        <span class="comment">//注意，匿名对象只能使用一次，因为没有名字，无法再次访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805112723984.png" alt="image-20230805112723984"></p><p>匿名内部类对象使用父类构造方法案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test034_Constructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal3</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal3</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 注意：匿名内部类属于子类，在重写方法中可通过super关键字访问父类方法或成员</span></span><br><span class="line">                System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot; 喜欢吃鱼&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot; 睡觉&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 父类引用调用重写方法</span></span><br><span class="line">        a1.sleep();</span><br><span class="line">        a1.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化子类对象，调用父类构造器对父类进行初始化</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Animal3</span>(<span class="string">&quot;tom&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot; 喜欢吃鱼&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot; 睡觉&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal3</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805113504426.png" alt="image-20230805113504426"></p><p>内部类应用场景选择：</p><ul><li>考虑这个内部类，如果需要反复的进行多次使用（必须有名字）<ul><li>需要定义静态的属性和方法，选择使用<strong>静态内部类</strong></li><li>需要方位外部类的非静态属性和方法，选择使用<strong>成员内部类</strong></li></ul></li><li>考虑这个内部类，如果只需要使用一次（可以没有名字）<ul><li>选择<strong>匿名内部类</strong></li><li><strong>局部内部类</strong>，几乎不会用</li></ul></li></ul></blockquote><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><blockquote><p>Java中有<strong>八种基本数据类型</strong>，它们只能表示一些最简单的数字，这些数字最 小的在内存中占1个字节8位，最大占8个字节64位。这些<strong>都是简单的数字， 不是对象</strong>，所以<strong>不能用来调用方法或者属性</strong>，功能不够强大。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>针对这八种基本类型，JavaAPI又专门提供了对应的类类型，<strong>目的就是为了分别把这八种基本类型的数据，包装成对应的类类型，这时候就变成对象了，就可以 调用方法了或者访问属性了。</strong></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805114804192.png" alt="image-20230805114804192"></p><p><strong>具体使用查看jdk.8文档</strong></p><p><font color="#d12920">注意：一定要掌握 public static int parseInt(String s) 方法</font></p></blockquote><h2 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h2><blockquote><p><strong>JDK1.5或以上</strong>，可以支持<strong>基本类型和包装类型之间的自动装箱、自动拆箱</strong>。这简化了基本类型和包装类型之间的转换。</p><ul><li>自动装箱：<strong>基本数据类型值</strong> 自动转化为 <strong>包装类对象</strong></li><li>自动拆箱：<strong>包装类对象</strong> 自动转化为 <strong>基本数据类型值</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test043_Integer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// JDK1.5之前</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK1.5之后</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 自动装箱，这里会自动把数字1包装成Integer类型的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK1.5之前</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> i4.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK1.5之后</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i7</span> <span class="operator">=</span> o; <span class="comment">// 自动拆箱，这里会自动把对象o拆箱为一个int类型的数字，并把数字赋值给int类型的变量i7;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的基本类型和包装类型之间的转换，与此类似</p><p>注意事项：</p><ul><li>使用基本类型和包装类时，要考虑<strong>隐式类型转换</strong></li><li><strong>不同类型的基本数据类型和包装类，是不可以自动装箱拆箱的</strong>，例如int和Long</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(<span class="type">long</span> i)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">(Long i)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Test043_Test t=<span class="keyword">new</span> <span class="title class_">Test043_Test</span>();</span><br><span class="line">    t.test1(<span class="number">1</span>);<span class="comment">// 编译通过 int i = 1; 正常赋值</span></span><br><span class="line">    t.test2(<span class="number">1</span>);<span class="comment">// 编译通过 Integer i = 1; 自动装箱</span></span><br><span class="line">    t.test3(<span class="number">1</span>);<span class="comment">// 编译通过 long i = 1; 隐式类型转换</span></span><br><span class="line">    <span class="comment">// 编译报错</span></span><br><span class="line">    <span class="comment">// 错误的代码：Long i = 1;</span></span><br><span class="line">    <span class="comment">// int和Long 之间没有任何关系</span></span><br><span class="line">    <span class="comment">//t.test4(1);</span></span><br><span class="line">    t.test4(<span class="number">1L</span>);<span class="comment">// 编译通过 Long i = 1L; 自动装箱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Integer缓冲区"><a href="#Integer缓冲区" class="headerlink" title="Integer缓冲区"></a>Integer缓冲区</h2><blockquote><p>在Java中<strong>方法区</strong>有一个叫做<strong>运行时常量池(Runtime Constant Pool)<strong>的区域，用于存储编译期间生成的各种字面量和符号引用，</strong>Integer缓冲区&#x3D;&#x3D;Integer常量池</strong>就存在运行时常量池里面。</p><p>Integer常量池是一个特殊的<strong>缓存机制</strong>，用于存储在范围**[-128, 127]<strong>之间的Integer常量对象。这个范围是Java中一个</strong>固定（JDK默认）范围**，超出这个范围的整形常量不会被缓存。(可以通过配置JVM参数进行修改默认值)</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805130207624.png" alt="image-20230805130207624"></p><p>当使用<strong>自动装箱（Autoboxing）</strong>将一个整数赋值为一个Integer对象时，如果该整数在**[-128, 127]<strong>范围内，那么会从Integer常量池中</strong>获取一个已经存在的对象，而不是创建一个新的对象<strong>。这是因为在这个范围内的整数常见且频繁使用，</strong>通过复用对象可以节省内存空间和提高性能。**</p></blockquote><p>基础知识补充：</p><blockquote><p>java.lang.System类中一个方法：</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805131227412.png" alt="image-20230805131227412"></p><p>该方法会返回对象的哈希码，即<strong>Java 根据对象在内存中的地址计算出来一个整数值</strong>，不同的地址算出来的结果不一样的</p><p><font color="#d12920">注意，哈希码并不是对象的内存地址</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">128</span>; <span class="comment">// 超出的[-128, 127]的范围相当于new了一个新的对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;i5: &quot;</span> +System.identityHashCode(i5));</span><br><span class="line">System.out.println(<span class="string">&quot;i6: &quot;</span> +System.identityHashCode(i6));</span><br><span class="line">System.out.println(<span class="string">&quot;i5 == i6: &quot;</span>+ (i5 == i6));</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Integer对象内存构成：</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805131956328.png" alt="image-20230805131956328"></p></blockquote><h1 id="Object类常量池"><a href="#Object类常量池" class="headerlink" title="Object类常量池"></a>Object类常量池</h1><blockquote><p>Object类是所有类的父类型，类中定义的方法，java中所有对象都可以调用</p></blockquote><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><blockquote><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805151311184.png" alt="image-20230805151311184"></p><p>我们可以根据自己的需要重写这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="comment">// 这个是ecplise生成的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="comment">// 这个是idea生成的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，输出对象时，自动调用对象.toString()方法</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//下面两行效果相同</span></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s1.toString());</span><br></pre></td></tr></table></figure></blockquote><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><blockquote><p>它返回<strong>引用变量</strong>在<strong>运行时</strong>所指向的<strong>字节码对象</strong></p><p>该方法是native修饰的本地方法，不是Java语言实现的</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805152735397.png" alt="image-20230805152735397"></p><p><font color="#d12920">注意：子类中不能重写getClass，调用的一定是Object中的getClass方法。故获取的是运行时引用变量所指向的字节码对象</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test052_GetClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test052_GetClass</span> <span class="variable">tg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test052_GetClass</span>();</span><br><span class="line">        System.out.println(tg.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果 class + 全类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.briup.chap07.test.Test052_GetClass</span><br></pre></td></tr></table></figure><p>getClass针对多态时可以获取具体指向的类对象，判断是否符合要求</p></blockquote><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><blockquote><p>该方法可以比较俩个对象是否相等</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805153347533.png" alt="image-20230805153347533"></p><p>注意：一般情况下，程序员不需要手动重写equals方法，<strong>STS</strong>中提供了自动 生成（建议）的快捷键：</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805153644547.png" alt="image-20230805153644547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认没有使用jdk1.7的模板生成的equals</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">other</span> <span class="operator">=</span> (Stu) obj;</span><br><span class="line">    <span class="keyword">if</span> (age != other.age)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805154033416.png" alt="image-20230805154033416"></p></blockquote><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><blockquote><p>该方法返回一个int值，该int值是JVM根据<strong>对象在内存中的特征（地址值</strong>），通过<strong>哈希算法</strong>计算出的一个结果。</p><ul><li>Hash，一般翻译做“<strong>散列</strong>”，也可以音译为“<strong>哈希</strong>”，就是把任意长度的数据输入， 通过散列算法，变换成固定长度的输出，该输出就是散列值。 （ x –&gt; f –&gt; &#x3D; f(x) ）</li><li>一个<strong>任意长度的输入</strong>转为一个<strong>固定长度的输出</strong>，是一种<strong>压缩映射</strong>，也就是说，<strong>散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。</strong></li></ul><p><font color="#d12920">注意：通常情况下我们认为Object中hashCode方法返回的是对象的内存地址值，但实际上并不是。</font></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805154256995.png" alt="image-20230805154256995"></p><p>引用变量的hashCode值：</p><ul><li>两个引用变量指向同一个对象，则他们的hashCode值一定相等</li><li>两个引用变量的hashCode值相同，则它们有可能指向同一个对象，也可能指向不同对象（散列空间有限）</li><li>两个引用变量的hashCode值不同，则他们肯定不可能指向同一个对象</li></ul><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805155417875.png" alt="image-20230805155417875"></p></blockquote><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><blockquote><p>字符串String，<strong>是程序中使用最多的一种数据</strong>，JVM在内存中专门设置了一 块区域（<strong>字符串常量池</strong>），来提高字字符串对象的使用效率。</p></blockquote><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><blockquote><p>创建字符串对象，和其他普通对象一样，会占用计算机的资源（时间和空间），作为最常用的数据类型，大量频繁的创建字符串对象，会极大地影响程序的性能。</p><p>JVM为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化</p><ul><li><strong>为字符串开辟一个字符串常量池，类似于缓存区</strong></li><li>创建字符串常量时，<strong>首先会检查字符串常量池中是否存在该字符串</strong>，<strong>如果存在该字符串，则返回该实例的引用</strong>，<strong>如果不存在，则实例化创建该字符串，并放入池中。</strong></li></ul></blockquote><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><blockquote><p>在Java中，String常量池是一块特殊的内存区域，用于存储字符串常量。String常量池的设计<strong>目的是为了节省内存和提高性能。</strong> </p><p><strong>JDK8及之后的版本中，字符串常量池的位置与其他对象的存储位置，都位于堆内存中。</strong>这样做的好处是，字符串常量池的大小可以根据需要进行调整，并且可以享受到<strong>垃圾回收器对堆内存的优化</strong>。</p></blockquote><blockquote><p>Java将字符串放入String常量池的方式：</p><ul><li>直接赋值：通过<strong>直接赋值方式</strong>创建字符串常量会被放入常量池中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>调用String类提供intern()方法</strong>：可以将字符串对象放入常量池中，并<strong>返回常量池中的引用</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;World&quot;</span>).intern();</span><br></pre></td></tr></table></figure><p><font color="#d12920">注意：通过new关键字创建的字符串对象不会放入常量池中，而是在堆内存中创建一个新的对象</font></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805161659252.png" alt="image-20230805161659252"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="comment">// 常量优化机制：&quot;a&quot; 和 &quot;b&quot;都是字面值常量，借助 + 连接，其结果 &quot;ab&quot; 也被当作常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    System.out.println(s3.equals(s4)); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line">    System.out.println(s4.equals(s5)); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s4 == s5); <span class="comment">// false</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> (s1 + s2).intern(); <span class="comment">// 因为s4已经把&quot;ab&quot;放入到常量池了所以s6直接拿即可</span></span><br><span class="line">    System.out.println(s4.equals(s6)); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s4 == s6); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>下面解释一下String str &#x3D; “abc”底层的实现查看JDK8官方文档得</p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805163345145.png" alt="image-20230805163345145"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805170837077.png" alt="image-20230805170837077"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805163429195.png" alt="image-20230805163429195"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805172047881.png" alt="image-20230805172047881"></p><p>注意事项：</p><ul><li><strong>使用 + 拼接多个字符串常量，拼接的结果仍旧是字符串常量</strong></li><li><strong>如果结果字符串常量在常量池中不存在，则Java会将其放入到字符串常量池中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final常量测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    <span class="comment">//final修饰的String常量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>; <span class="comment">// final修饰 str1的引用值无法被修改了，指向了常量池，str1相当于常量了</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str1 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    System.out.println(str == str2); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p>这里着重讲解一下String.intern()这个方法</p><ul><li>第一个等式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;中&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;国&quot;</span>);</span><br><span class="line">System.out.println(s1.intern() == s1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807171315635.png" alt="image-20230807171315635"></p><ul><li>第二个等式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ja&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;va&quot;</span>);</span><br><span class="line">System.out.println(s2.intern() == s2);</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807172020360.png" alt="image-20230807172020360"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807172120912.png" alt="image-20230807172120912"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807172300038.png" alt="image-20230807172300038"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807172348979.png" alt="image-20230807172348979"></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230807172551718.png" alt="image-20230807172551718"></p><p><font color="skybule">综上所述，java这个字符串早就已经在字符串常量池当中了，故s2.intern() &#x3D;&#x3D; s2结果为false，原因是一个地址在堆区，一个地址字符串常量池当中。</font></p></blockquote><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="枚举类概述"><a href="#枚举类概述" class="headerlink" title="枚举类概述"></a>枚举类概述</h2><blockquote><p>枚举，是<strong>JDK1.5引入的新特性</strong>，可以通过关键字 <strong>enum</strong> 来定义<strong>枚举类,本质上也是一个类</strong>。</p><ul><li>Java中的类，从语法上来说，可以创建无数个对象</li><li>Java特殊类，其所能创建的对象个数是固定的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test071_EnumBasic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Gender</span> <span class="variable">g1</span> <span class="operator">=</span> Gender.MALE;</span><br><span class="line">        <span class="type">Gender</span> <span class="variable">g2</span> <span class="operator">=</span> Gender.FEMALE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">    MALE, FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译命令：<code>javap -p Gender.class</code></p><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805175720149.png" alt="image-20230805175720149"></p><p>结合上图我们可知：</p><ul><li>枚举类Gender本质上是一个<strong>final修饰的类</strong>，不可以被继承</li><li>枚举类默认继承<strong>java.lang.Enum</strong>这个抽象泛型类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Enum</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;E&gt;, Serializable &#123;</span><br><span class="line">    <span class="comment">//枚举元素名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//枚举元素编号，从0开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ordinal;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordinal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举元素，本质上是枚举类对象，且由<strong>static和final</strong>修饰</li><li>枚举类提供私有构造器，我们在类外不能主动创建枚举类对象</li><li>枚举类中可以包含public static 静态方法</li></ul></blockquote><h2 id="枚举基本定义"><a href="#枚举基本定义" class="headerlink" title="枚举基本定义"></a>枚举基本定义</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 枚举类名 &#123;</span><br><span class="line">    枚举元素<span class="number">1</span>,枚举元素<span class="number">2</span>,...枚举元素n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>案例展示： 定义枚举类Week，要求包含多个枚举元素</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举类基本定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    <span class="comment">//枚举元素必须写在第一行，如果有多个的话，用逗号&#x27;,&#x27;隔开，</span></span><br><span class="line">    <span class="comment">//最后用分号&#x27;;&#x27;结束</span></span><br><span class="line">    <span class="comment">//如果&#x27;;&#x27;后面没有其他内容的话，&#x27;;&#x27;可以省略，但不建议省略</span></span><br><span class="line">    MON, TUE, WED; <span class="comment">//WED()</span></span><br><span class="line">    <span class="comment">//WED和WED()效果一样，含义为：执行枚举类默认构造器去实例化枚举元素对象</span></span><br><span class="line">    <span class="comment">//源代码类似：public static final Week WED = new Week();</span></span><br><span class="line">    <span class="comment">//注意：用户没有提供构造器，系统会提供默认的构造器 private Week()&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1.枚举元素引用格式：枚举类名.枚举元素名;</span></span><br><span class="line">    <span class="comment">//注意枚举类名不能省略</span></span><br><span class="line">    <span class="type">Week</span> <span class="variable">w1</span> <span class="operator">=</span> Week.MON;</span><br><span class="line">    <span class="type">Week</span> <span class="variable">w2</span> <span class="operator">=</span> Week.TUE;</span><br><span class="line">    <span class="type">Week</span> <span class="variable">w3</span> <span class="operator">=</span> Week.WED;</span><br><span class="line">    <span class="comment">//2.输出枚举对象，默认输出枚举元素名</span></span><br><span class="line">    System.out.println(w1);</span><br><span class="line">    System.out.println(w2.toString());</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    <span class="comment">//3.获取枚举元素名：跟元素名一样的同名字符串</span></span><br><span class="line">    System.out.println(w3.name());</span><br><span class="line">    <span class="comment">//4.获取枚举元素编号：从0开始，逐个加1</span></span><br><span class="line">    System.out.println(w1.ordinal()); <span class="comment">//0</span></span><br><span class="line">    System.out.println(w2.ordinal()); <span class="comment">//1</span></span><br><span class="line">    System.out.println(w3.ordinal()); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="构造方法定义"><a href="#构造方法定义" class="headerlink" title="构造方法定义"></a>构造方法定义</h2><blockquote><p>包含<strong>数据成员、构造方法</strong>的枚举类. </p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 枚举类名 &#123;</span><br><span class="line">    枚举元素<span class="number">1</span>(实际参数列表), ...枚举元素n(实际参数列表);</span><br><span class="line">    <span class="comment">//枚举类数据成员和成员方法，可以包含多个</span></span><br><span class="line">    [修饰符] 数据类型 数据成员名;</span><br><span class="line">    [修饰符] 返回值类型 成员方法名(形参列表) &#123;</span><br><span class="line">        方法体实现;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//枚举类构造方法，可以包含多个</span></span><br><span class="line">    <span class="comment">//注意，必须使用private进行修饰</span></span><br><span class="line">    <span class="keyword">private</span> 构造方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>案例展示： 定义枚举类Week2，要求包含私有数据成员desc和构造方法。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    MON, TUE(), WED(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Week(String string) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Week() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="抽象方法定义"><a href="#抽象方法定义" class="headerlink" title="抽象方法定义"></a>抽象方法定义</h2><blockquote><p>包含<strong>抽象方法</strong>的枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 枚举类名 &#123;</span><br><span class="line">    枚举元素<span class="number">1</span>(实参列表) &#123;</span><br><span class="line">        重写所有抽象方法;</span><br><span class="line">    &#125;, ...枚举元素n(实参列表) &#123;</span><br><span class="line">        重写所有抽象方法;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//可以包含多个抽象方法</span></span><br><span class="line">    抽象方法声明;</span><br><span class="line">    <span class="comment">//数据成员、成员方法及构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>案例展示： 定义枚举类Week3，要求包含抽象方法show()。</p><blockquote><ul><li>每一个枚举元素都要实现抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test072_Define01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Week</span> <span class="variable">mon</span> <span class="operator">=</span> Week.MON;</span><br><span class="line">        System.out.println(mon);</span><br><span class="line">        mon.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        <span class="type">Week</span> <span class="variable">tue</span> <span class="operator">=</span> Week.TUE;</span><br><span class="line">        System.out.println(tue);</span><br><span class="line">        tue.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ShowAble</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> <span class="keyword">implements</span> <span class="title class_">ShowAble</span>&#123;</span><br><span class="line">    <span class="comment">// 注意：包含抽象方法的枚举类是抽象类，不能直接实例化对象</span></span><br><span class="line">    <span class="comment">// 所以定义枚举类元素(所有)时候，一定要重写抽象方法</span></span><br><span class="line">    <span class="comment">// 注意：必须在所有的枚举元素定义中，重写所有抽象方法</span></span><br><span class="line">    <span class="comment">// MON &#123;</span></span><br><span class="line">    MON() &#123;</span><br><span class="line">        <span class="comment">// 在枚举元素中重写抽象方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in show, MON: 周一&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TUE(<span class="string">&quot;星期二&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意，每个枚举元素中都要重写重写方法，且要重写所有的抽象方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in show, TUE: &quot;</span> + <span class="built_in">this</span>.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类数据成员及get方法</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类自定义构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Week</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Week</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类 包含的 抽象方法（可以0或多个）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805195407260.png" alt="image-20230805195407260"></p><ul><li>通过接口来实现抽象方法，不需要每个元素来实现抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap07.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test072_Define01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Week</span> <span class="variable">mon</span> <span class="operator">=</span> Week.MON;</span><br><span class="line">        System.out.println(mon);</span><br><span class="line">        mon.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        <span class="type">Week</span> <span class="variable">tue</span> <span class="operator">=</span> Week.TUE;</span><br><span class="line">        System.out.println(tue);</span><br><span class="line">        tue.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ShowAble</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> <span class="keyword">implements</span> <span class="title class_">ShowAble</span> &#123;</span><br><span class="line">    MON(), TUE(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类数据成员及get方法</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类自定义构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Week</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Week</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举类 包含的 抽象方法（可以0或多个）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am interface abstract method show()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/07-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB-%E6%9E%9A%E4%B8%BE/image-20230805195335001.png" alt="image-20230805195335001"></p></blockquote><h2 id="枚举总结"><a href="#枚举总结" class="headerlink" title="枚举总结"></a>枚举总结</h2><blockquote><p>在实际项目开发中，我们定义枚举类型，大多数情况下使用最基本的定义方式， 偶尔会添加属性、方法和构造方法，并不会写的那么复杂。</p><p>枚举类注意事项：</p><ul><li>定义枚举类要使用关键字 enum</li><li>所有枚举类都是java.lang.Enum的子类</li><li><strong>枚举类的第一行上必须是枚举元素（枚举项）</strong></li><li>最后一个枚举项后分号是可以省略的，但是 ；后面还有其他有效代码，这个分号就不能省略，建议不要省略</li><li>用户如果不提供构造方法，系统会提供默认的构造方法：<code>private 枚举类() &#123;&#125;</code></li><li>用户可以通过构造方法，<strong>但必须用private修饰</strong>，同时系统不再提供默认构造方法</li><li>枚举类也可以由抽象方法，但是枚举元素必须重写所有抽象方法</li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>路漫漫其修远昔，吾将上下而求索。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-static-继承-重写-多态</title>
      <link href="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/"/>
      <url>/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">School</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> String name; <span class="comment">//名称</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> num; <span class="comment">//师生数量</span></span><br><span class="line"> <span class="keyword">private</span> String library; <span class="comment">//图书馆</span></span><br><span class="line"> <span class="comment">// 省略了get、set、构造器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">School</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>(<span class="string">&quot;第一中学&quot;</span>,<span class="number">3000</span>,<span class="string">&quot;栋梁图书馆&quot;</span>);</span><br><span class="line"> <span class="type">School</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>(<span class="string">&quot;秀峰中学&quot;</span>,<span class="number">2500</span>,<span class="string">&quot;栋梁图书馆&quot;</span>);</span><br><span class="line"> <span class="type">School</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>(<span class="string">&quot;娄江中学&quot;</span>,<span class="number">1800</span>,<span class="string">&quot;栋梁图书馆&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>private String library</code>: 表示每个学校对象，都有自己独立的图书馆，与实际业务不符。</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731155156738.png" alt="image-20230731155156738"></p><p>实际我们想要的效果为<strong>图书馆有且只有一个，只占用一块内存区域。</strong></p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731155333033.png" alt="image-20230731155333033"></p><p>static是一个修饰符，表示<strong>静态</strong>的意思，可以修饰<strong>属性、方法、代码块</strong></p></blockquote><h2 id="静态成员（静态变量）"><a href="#静态成员（静态变量）" class="headerlink" title="静态成员（静态变量）"></a>静态成员（静态变量）</h2><blockquote><p>static修饰类中的数据成员，该成员就成了静态数据成员，也称为<strong>类成员</strong>；</p><p>类成员，是属于类的，为这个类<strong>所有对象共享</strong>，只占用一块内存空间。</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731155821449.png" alt="image-20230731155821449"></p><p>static成员特点：</p><ul><li>被类的<strong>所有对象共享</strong></li><li><strong>随着类的加载而加载，先于对象存在</strong>，<strong>对象需要类被加载后，才能被创建出来</strong></li><li>可以通过类名调用，也可以通过对象名调用。但<strong>推荐使用类名</strong>：<code>类名.静态数据成员;</code></li><li>方法区中有一块专门的区域：<strong>静态区</strong>，专门用来存储类的static成员</li></ul><p>静态属性的存储位置：</p><p>在方法区中有一块<strong>静态区</strong>，专门用来<strong>存储各个类静态数据成员</strong>。当操作静态数据成员时，不论是通过类名，还是通过对象名操作，都是<strong>操作静态区中对应的内存区域</strong>。</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731162335350.png" alt="image-20230731162335350"></p><p>静态数据成员<strong>初始化</strong>：</p><ul><li>静态数据成员<strong>随着类加载而加载</strong>（开辟<strong>相应内存</strong>），并会进行默认的初始化其值为<strong>null(类类型)或0（整形）或0.0（浮点型）或false（布尔类型）</strong></li><li>对静态数据成员的初始化，一般采用两种方式：<strong>显示初始化、静态代码块初始化</strong></li><li>显示初始化格式：<code>[修饰符] static 数据类型 静态成员名 = 初始值; 例子：public static String library = &quot;栋梁图书馆&quot;</code></li></ul><p><font color="skyblue">注意事项：尽量不要在构造方法中对static成员进行初始化，因为只要创建对象，构造方法就会自动被执行，导致static成员值不经意间被修改！</font></p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="comment">//定义静态方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我是static静态方法...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="comment">//借助类名调用static方法，推荐方式</span></span><br><span class="line">  Demo.test();</span><br><span class="line">  <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">  <span class="comment">//借助对象调用static方法，可以调用，但不推荐</span></span><br><span class="line">  demo.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> static方法和普通成员方法区别：</p><ul><li>静态方法<strong>只能</strong>访问静态的成员</li><li>非静态方法可以访问静态的成员，也可以访问非静态的成员</li><li><strong>静态方法中是没有this关键字</strong>（本质区别）</li></ul></blockquote><blockquote><p>思考：为什么静态方法中不能访问普通数据成员？</p><p>静态方法也称为类方法，该类方法的调用不依赖对象，可以直接通过类名调用。 </p><p><strong>假设</strong>静态成员方法中能够访问普通数据成员，静态方法中有this引用，我 们来看下面场景：我们通过<strong>类名调用</strong>static方法，此时<strong>根本不会传递对象的 地址值给this引用</strong>，static方法内部也无法找到普通数据成员对应的<strong>内存空间</strong> 进行取值，这与我们要实现的功能是矛盾的。 </p><p>故而，大家记住以下结论即可：<strong>静态只能访问静态</strong>。</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>在java中，使用 <code>&#123; &#125;</code>括起来的代码被称为<strong>代码块</strong>，分为三类：</p><ul><li>局部代码块<ul><li>位置：<strong>类的方法中定义</strong></li><li>格式：<code>&#123; 语句体; &#125;</code></li><li>作用：<strong>用户限定变量的生命周期，使其尽早释放，从而提高栈空间内存利用率</strong></li><li>重要程度：<strong>了解即可，使用不多</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//局部代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面局部代码块中的a是局部变量，遇到 &#125; 其占用的内存空间就销毁了</span></span><br><span class="line">    <span class="comment">//故而，下面输出语句编译报错</span></span><br><span class="line">    <span class="comment">//System.out.println(a);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造代码块 （<strong>匿名代码块</strong>）<ul><li>位置：类中方法外</li><li>格式：<code>&#123; 语句体; &#125;</code></li><li>特点：每次<strong>构造方法执行前</strong>，都会<strong>先执行该代码块中代码</strong></li><li>作用：<strong>如果多个构造方法中出现相同代码，可抽取到该快中，从而提高代码复用性。</strong></li><li>重要程度：掌握</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块: 构造方法执行前执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Module</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Module...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Module</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Module(int) ...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//实例化2个对象，观察程序输出效果：</span></span><br><span class="line">    <span class="comment">//每次构造方法执行前，都会自动执行构造代码块</span></span><br><span class="line">    <span class="type">Module</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Module</span>();</span><br><span class="line">    <span class="type">Module</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Module</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// 构造代码块: 构造方法执行前执行...</span></span><br><span class="line"><span class="comment">// Module...</span></span><br><span class="line"><span class="comment">// 构造代码块: 构造方法执行前执行...</span></span><br><span class="line"><span class="comment">// Module(int) ...</span></span><br></pre></td></tr></table></figure><ul><li>静态代码块<ul><li>位置：类中方法外</li><li>格式：<code>static &#123; 语句体; &#125;</code></li><li>特点：需要通过static关键字修饰，<strong>随着类的加载而加载，只执行一次</strong></li><li>作用：<strong>类加载时做一些数据的初始化操作（一般给static成员赋值）</strong></li><li>重要程度：掌握</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static成员第一种初始化方式：显式初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">library</span> <span class="operator">=</span> <span class="string">&quot;栋梁图书馆&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static成员第二种初始化方式</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//library = &quot;凌云图书馆&quot;;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;static代码块执行...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>补充内容：static成员显示初始化和静态代码块，执行顺序问题</strong></p><ul><li>情形一：把显式初始化放在静态代码块前面</li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731190051098.png" alt="image-20230731190051098"></p><ul><li>情形二：把静态代码块放在显式初始化前面</li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731190155337.png" alt="image-20230731190155337"></p><p><font color="skyblue">结论：显式初始化和静态代码块，谁在上面，谁先执行！</font></p></blockquote><h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><blockquote><p>加载类的含义：JVM虚拟机将该类的class文件加载到内存的方法区中。</p><p>当Java代码中<strong>用到某个类的时候，就会加载该类。</strong></p><p>加载时机（一共有七种）：</p><ul><li>程序启动，找到<strong>main方法运行</strong>，此时用到<strong>main方法所属的类</strong>，应该加载该类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行程序，先加载Test.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次使用类去实例化对象时<ul><li><code>如： School s1 = new School();</code></li></ul></li><li>通过类名访问其静态数据成员<ul><li><code>School.library = &quot;凌志楼&quot;;</code></li></ul></li><li>通过类名调用其静态成员方法<ul><li><code> School.setLibrary(&quot;逸夫楼&quot;);</code></li></ul></li></ul></blockquote><h2 id="对象创建过程"><a href="#对象创建过程" class="headerlink" title="对象创建过程"></a>对象创建过程</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">School</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>(<span class="string">&quot;一中&quot;</span>,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请描述 School类对象s 的创建和初始化过程：</p><ul><li>对School类<strong>进行类加载</strong></li><li>去<strong>方法区中的静态区</strong>为School.libary<strong>分配内存空间</strong>，并做<strong>默认初始化（null）</strong></li><li>对School.library（静态成员）进行<strong>显示初始化</strong>，执行School类中的<strong>静态代码块</strong> (<strong>谁在上面，谁先执行！</strong>)</li><li>在<strong>栈空间（main方法函数帧）开辟一块内存</strong>，用 <strong>s（引用变量）标识</strong></li><li><strong>堆区中分配对象的内存空间，同时进行默认初始化</strong></li><li>对School中的属性进行显式初始化 <code>public int num = 2000;</code></li><li>执行School类的构造代码块（&#x3D;匿名代码块）</li><li>执行School类的构造方法</li><li>把对象堆空间的内存地址赋给变量s（写入s那块内存区域中）</li></ul><p>至此：对象成功创建，并初始化成功啦~~</p></blockquote><h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><blockquote><p>JDK1.5中增加了静态导入的功能，具体描述如下：</p><ul><li>在自定义类中，要使用另一个类中的静态属性和静态方法，可以使用静态导 入。 </li><li>导入完成后，可以直接使用这个类中的静态属性和静态方法，而不用在前面 加上类名。</li></ul><p>静态导入格式：</p><ul><li>导入静态成员： import static 类的全包名.static数据成员名; </li><li>导入静态方法： import static 类的全包名.static成员方法名;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI; <span class="comment">// 导入后就不再需要使用类名.PI, 直接使用PI即可</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0107_StaticImport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//访问Math类中的静态属性PI，表示圆周率π</span></span><br><span class="line">        System.out.println(PI);</span><br><span class="line">        <span class="comment">//访问Math类中的静态方法random(),生成随机数</span></span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote><p>类和类之间的关系有很多中，继承就是其中一种关系，除此之外还有<strong>依赖、 组合、聚合</strong>等</p></blockquote><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><blockquote><p>继承是面向对象三大特征之一，可以有效的提高代码的复用性。</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731192908315.png" alt="image-20230731192908315"></p><p><strong>继承关系体现的是一种 “is a” 的关系！</strong></p><p>蛇 is a 爬行动物，爬行动物是动物中的一种。</p></blockquote><h2 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h2><blockquote><p>固定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] class 子类名 extends 父类名 &#123;</span><br><span class="line"> 子类新增内容;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Dog <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在继承关系中，<strong>父类，也称基类、超类</strong>；<strong>子类，也称派生类。</strong></p></blockquote><h2 id="继承特点"><a href="#继承特点" class="headerlink" title="继承特点"></a>继承特点</h2><blockquote><ul><li>Java只支持单继承，不支持多继承</li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731193627426.png" alt="image-20230731193627426"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译报错，一个类只能有且只有一个父类，不能同时继承俩个父类</span></span><br><span class="line"><span class="keyword">public</span> class 儿子 extends 父<span class="number">1</span>,父<span class="number">2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java支持多层继承</li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731193806868.png" alt="image-20230731193806868"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grandpa</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drinking</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷喜欢喝茶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">Grandpa</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fishing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸喜欢钓鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">programing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢敲代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    son.drinking();</span><br><span class="line">    son.fishing();</span><br><span class="line">    son.programing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731194440075.png" alt="image-20230731194440075"></p></blockquote><h2 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h2><blockquote><p><font color="skyblue">子类只能继承父类所有非私有的成员（含成员方法和成员变量）</font></p><p>Java官方文档描述：<strong>从继承的概念来说，private修饰的成员不被继承</strong></p><p>官网描述：</p><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html">Inheritance (The Java™ Tutorials &gt; Learning the Java Language &gt; Interfaces and Inheritance) (oracle.com)</a></p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731195332572.png" alt="image-20230731195332572"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类 Animal</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> String color;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> color;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.color = color;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Animal [color=&quot;</span> + color + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类 Dog</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 父类中的private成员，子类中不可以直接操作（无直接访问权限）</span></span><br><span class="line"> <span class="comment">// Animal: private String color;</span></span><br><span class="line"> <span class="comment">// 父类中的非private成员，子类中可以直接操作</span></span><br><span class="line"> <span class="comment">// Animal: public int age;</span></span><br><span class="line"> <span class="comment">// 子类新增属性</span></span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 子类新增方法：输出子类对象所有属性(含新增属性、从父类继承)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disp</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 子类方法中 不能直接操作 父类private成员</span></span><br><span class="line">     <span class="comment">// System.out.println(&quot;继承 color: &quot; + color); error</span></span><br><span class="line">     <span class="comment">// 子类方法中 可以间接操作(借助public的get|set) 父类private成员</span></span><br><span class="line">     System.out.println(<span class="string">&quot;继承 color: &quot;</span> + getColor());</span><br><span class="line">     <span class="comment">// 子类方法中 可以直接操作 父类非private成员</span></span><br><span class="line">     System.out.println(<span class="string">&quot;继承 age: &quot;</span> + age);</span><br><span class="line">     System.out.print(<span class="string">&quot;新增：&quot;</span> + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0204_AccessMember</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">     a.setColor(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">     a.setAge(<span class="number">3</span>);</span><br><span class="line">     a.show();</span><br><span class="line">     System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">     <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">     <span class="comment">// 子类对象调用从父类继承的public方法</span></span><br><span class="line">     d.setColor(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">     d.setAge(<span class="number">2</span>);</span><br><span class="line">     <span class="comment">// 子类对象调用新增的方法</span></span><br><span class="line">     d.setName(<span class="string">&quot;虎子&quot;</span>);</span><br><span class="line">     d.disp();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731201842212.png" alt="image-20230731201842212"></p><p>注意事项：</p><ul><li>从内存角度来分析，父类中的private成员，子类实际上也完全继承下来了（非专业描述）</li><li>父类private成员为父类私有，在父类成员方法中可以直接访问，在其他类中（含子类），不能直接操作。</li><li>子类中不能直接操作父类private成员，但是可以通过间接方式（比如借助父类public的get or set方法）操作</li></ul><p><font color="skyblue">总结：子类继承了父类的所有成员，包括私有成员。但子类无法直接访问父类的私有成员，只能通过调用父类的公有方法或受保护方法来间接访问这些私有成员</font></p></blockquote><blockquote><p>额外补充：</p><p>Java中的类，如果类定义时没有指定父类，那么这个类会默认继承Object类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认继承了Object，编译后会自动生成 extends Object 的代码语句</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230731203009277.png" alt="image-20230731203009277"></p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801083927833.png" alt="image-20230801083927833"></p><p>上图注意事项：</p><ul><li>Object类中没有属性</li><li><strong>绿色圆点</strong>表示public修饰方法</li><li><strong>黄色菱形</strong>表示protected修饰方法</li><li><strong>红色方块</strong>表示private修饰方法</li></ul><p><strong>Java中的每个类都直接或间接继承Object类，Object类是Java继承体系中的最顶层父类。</strong></p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801084506136.png" alt="image-20230801084506136"></p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：</p><ul><li>提高代码的<strong>复用性</strong></li><li>提高了代码的<strong>可维护性</strong>（父类修改后，子类全部生效）</li><li>让类与类之间产生了 is a 的关系，是多态的前提</li></ul><p>弊端：</p><ul><li>继承是<strong>侵入性</strong>的</li><li>继承让类与类之间产生了关系，类的<strong>耦合性增强</strong>了（代码与代码之间存在关联都可以将其称之为“耦合”）</li><li>降低了代码的<strong>灵活性</strong>（当父类发生变化时子类实现也不得不跟着变化，削弱了子类的<strong>独立性</strong>）</li></ul></blockquote><h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><blockquote><p>问题引入：</p><p>从父类继承的非private成员，和子类新增的成员重名，如何在子类成员方法中区分两个成员？（使用super）</p><p>super表示子类对象中从父类继承的那部分<strong>（可以看成一个父类对象）引用</strong>！</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801103723306.png" alt="image-20230801103723306"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">memberAccess</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;age: &quot;</span> + age); <span class="comment">// 局部变量</span></span><br><span class="line"> System.out.println(<span class="string">&quot;this.age: &quot;</span> + <span class="built_in">this</span>.age); <span class="comment">// 当前对象的成员变量</span></span><br><span class="line"> System.out.println(<span class="string">&quot;super.age: &quot;</span> + <span class="built_in">super</span>.age); <span class="comment">// 父类的成员变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801193638834.png" alt="image-20230801193638834"></p><p>在子类方法中访问一个变量，会根据<strong>就近原则</strong>：</p><ul><li>先在子类局部范围中找<strong>局部变量</strong></li><li>再在子类新增的范围中查找 <strong>（类内，方法外：子类成员变量）</strong></li><li>最后从<strong>父类继承的成员范围</strong>中查找</li></ul><p><font color="skyblue">如果一定要使用从父类继承的成员，可以通过super关键字，进行区分。</font></p><p>super总结：</p><ul><li>super关键字的用户和this关键字的用法相似</li><li>this：代表<strong>本类对象的引用</strong></li><li>super：<strong>代表父类存储空间的标识（可以理解为父类对象引用）</strong></li></ul></blockquote><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><blockquote><p>思考：如何给子类对象进行初始化？ </p><p>子类对象的数据成员包含两部分：<strong>继承部分，新增部分</strong></p><ul><li>新增部分：子类构造方法中 <code>this.新增数据成员 = 值</code></li><li>对继承部分数据成员初始化<ul><li><strong>super(实际参数列表)</strong></li><li>子类构造方法前，<strong>会优先</strong>找到父类构造方法调用，对父类继承部分成员进行初始化</li><li>父类部分初始化完成后，再执行子类构造方法代码</li><li>如果子类构造方法中没有显示调用<strong>super(实参列表)<strong>，则系统默认调用</strong>super()</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//如果不显式调用super,则默认调用父类无参构造器</span></span><br><span class="line">    <span class="comment">//super();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;in Zi() ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">(<span class="type">int</span> f, <span class="type">int</span> z)</span> &#123; <span class="comment">// 构</span></span><br><span class="line">    <span class="comment">//下面这行注释的代码，放开则编译报错</span></span><br><span class="line">    <span class="comment">//System.out.println(&quot;in Zi(int,int) ...&quot;);</span></span><br><span class="line">    <span class="comment">//super调用，必须为子类构造方法的第一行有效代码</span></span><br><span class="line">    <span class="built_in">super</span>(f);</span><br><span class="line">    System.out.println(<span class="string">&quot;in Zi(int,int) ...&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.z = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disp</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="comment">//借助super可以直接访问父类继承部分的成员</span></span><br><span class="line">    System.out.println(<span class="string">&quot;super.f: &quot;</span> + <span class="built_in">super</span>.getF());</span><br><span class="line">    <span class="comment">//借助this，会先去找子类新增getF(),如果找不到，再去父类继承部分查找</span></span><br><span class="line">    System.out.println(<span class="string">&quot;this.f: &quot;</span> + <span class="built_in">this</span>.getF());</span><br><span class="line">    System.out.println(<span class="string">&quot;Zi.z: &quot;</span> + z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801200249153.png" alt="image-20230801200249153"></p><p><font color="skyblue">attention1：子类构造方法中如果显式调用super(实参列表), 则该代码必须为<strong>第一行有效代码</strong>!</font></p><p><font color="skyblue">attention2：子类构造方法中显式调用的super(实参列表),<strong>父类中必须提供</strong>，否则编译报错！</font></p></blockquote><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><blockquote><p>概述：类中的属性和方法，可以使用以下<strong>四种权限修饰符</strong>进行访问控制：</p><p><strong>public &gt; protected &gt; default(不写) &gt; private</strong></p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801201033645.png" alt="image-20230801201033645"></p></blockquote><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><blockquote><ul><li>重写应用场景</li></ul><p>父子类继承关系中，当子类需要父类的功能，而<strong>继承的方法不能完全满足子类的需求</strong>，子类里面有特殊的功能，此时可以重写父类中的方法，这样，即沿袭了 父类的功能，又定义了子类特有的内容。</p><ul><li>方法重写细节 (<strong>两同两小一大</strong>)<ul><li>两同：<strong>方法名相同，形参列表相同</strong></li><li>两小<ul><li>子类方法<strong>返回值类型</strong>应该比父类返回值类型<strong>更小或相等</strong>（<strong>这个是对引用类型来锁的，基本数据类型返回值必须是相等的</strong>）</li><li>子类方法声明抛出的<strong>异常类型</strong>应比父方法声明抛出的异常类型<strong>更小或相等</strong></li></ul></li><li>一大：子类方法的<strong>访问权限</strong>应比父类方法的访问权限更大或相等</li></ul></li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801201906588.png" alt="image-20230801201906588"></p><p>结论：子类继承父类，在调用方法的时候，<strong>如果子类中没用重写，那么调用从父类继承的方法，如果子类重写了这个方法，那么调用到子类重写的方法</strong>。（ 非常重要 ）</p><p>特殊情况：</p><ul><li>父类中的<strong>静态方法（属于类方法）不能被子类重写</strong>（static也是父类私有的）</li><li>父类中的<strong>私有方法（未被继承）不能被子类重写</strong></li></ul></blockquote><blockquote><p>重写Object类中toString()</p><ul><li>Java中的类，如果类定义时没有指定父类，那么这个<strong>类默认继承Object类</strong></li><li>Java中的每个类都<strong>直接或间接继承Object类</strong>，Object类是Java继承体系中的<strong>最顶层父类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回 &quot;类的全包名@该对象堆空间地址(十六进制形式)&quot;</span></span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// com.briup.chap06.test.Game@659e0bfd</span></span><br></pre></td></tr></table></figure><p>当输出对象时，会先执行 <strong>对象.toString()</strong> 获得对象的字符串形式，然后输出 该字符串！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写toString方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Teacher [name=&quot;</span> + name + <span class="string">&quot;, balance=&quot;</span> + balance + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Teacher [name=jack,balance=12345.6]</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h2><blockquote><p><strong>用final修饰的类不能被继承，也就是说这个类是没有子类的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;&#125; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801210930969.png" alt="image-20230801210930969"></p><p>JDK内置的类和大量框架类都有final修饰，不能进行重写。保护源码！</p></blockquote><h2 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h2><blockquote><p>用final修饰的方法<strong>可以被子类继承</strong>，但是<strong>不能</strong>被子类的重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> <span class="comment">//从父类继承的final方法，不可以被重写</span></span><br><span class="line"> <span class="comment">//public void print() &#123;</span></span><br><span class="line"> <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801211444023.png" alt="image-20230801211444023"></p></blockquote><h2 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h2><blockquote><p>用final修饰的变量就变成了常量，并且它只能被赋一次值，第二次赋值就会 报错</p><ul><li>final修饰<strong>局部变量</strong><ul><li>则局部变量赋初值后，不能再次赋值，否则编译报错！</li></ul></li></ul><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801211708288.png" alt="image-20230801211708288"></p><ul><li><p>final修饰<strong>非静态成员变量</strong></p><ul><li><p>显式初始化</p></li><li><p>匿名代码块中初始化</p></li><li><p>构造器中初始化</p><p><strong>注意：类中出现的所有构造器都要对final成员进行初始化，否则编译报错</strong></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="comment">//第一种初始化方式：显式初始化</span></span><br><span class="line">    <span class="comment">//private final int num = 10;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种初始化方式：构造代码块初始化</span></span><br><span class="line">    <span class="comment">// private final int num;</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// num = 20;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种初始化方式：所有构造器中都对final成员进行初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">F</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//必须给num初始化</span></span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">F</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">//必须给num初始化</span></span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>final修饰<strong>静态成员变量</strong><ul><li>显式初始化：声明的同时赋值</li><li>静态代码块中赋值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种初始化方式：显式初始化</span></span><br><span class="line"><span class="comment">//private final static int num = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种初始化方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="修饰引用"><a href="#修饰引用" class="headerlink" title="修饰引用"></a>修饰引用</h2><blockquote><p>final修饰引用类型变量时，则<strong>变量引用值不能改变</strong>，但是<strong>引用地址里面的内容是可以发生改变</strong>的</p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801213243311.png" alt="image-20230801213243311"></p><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801213422820.png" alt="image-20230801213422820"></p></blockquote><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote><p>**多态(Polymorphism)**的字面意思为”<strong>一种事物，多种形态</strong>“。</p><p>Java多态理解： 引用变量.方法(实参列表) 完全<strong>相同的这行代码</strong>，出现在<strong>不同的位置</strong>，其执行的<strong>结果是不同的</strong>。</p><p>即：<strong>同一父类的 不同子类 调用相同的方法 去做不同的事情</strong>。</p><p>多态前提：</p><ul><li>子类继承父类</li><li>子类重写父类中的方法</li><li>父类的引用指向子类对象</li></ul><p><font color="skyblue">注意，一个父类型的引用，可以指向它的任何一个子类对象</font></p><p>多态优缺点：</p><ul><li>优点<ul><li>提高程序的扩展性、灵活性</li><li>定义方法时候，使用父类型作为参数，在使用的时候，使用具体的子类型参与操作（自动匹配）</li></ul></li><li>弊端<ul><li>不能使用子类的特有成员</li></ul></li></ul></blockquote><blockquote><ul><li>不使用多态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//篮球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasketBall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始篮球游戏...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//足球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Football</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始足球游戏...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步：新增乒乓球类</span></span><br><span class="line"><span class="comment">//class PingPong &#123;</span></span><br><span class="line"><span class="comment">// public void play() &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;开始乒乓球游戏...&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义游戏类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="comment">//启动篮球游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(BasketBall basketBall)</span> &#123;</span><br><span class="line">        basketBall.play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动足球游戏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Football football)</span> &#123;</span><br><span class="line">        football.play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步：Game类新增重载start方法</span></span><br><span class="line">    <span class="comment">// public void start(PingPong pingpong) &#123;</span></span><br><span class="line">    <span class="comment">// pingpong.play();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方式实现（非多态）：代码的扩展性很差</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08_Game</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建游戏对象</span></span><br><span class="line">        <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">        <span class="comment">//2.创建篮球对象，然后开始游戏</span></span><br><span class="line">        <span class="type">BasketBall</span> <span class="variable">basketBall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasketBall</span>();</span><br><span class="line">        game.start(basketBall);</span><br><span class="line">        <span class="comment">//3.创建足球对象，然后开始游戏</span></span><br><span class="line">        <span class="type">Football</span> <span class="variable">football</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Football</span>();</span><br><span class="line">        game.start(football);</span><br><span class="line">        <span class="comment">//第三步：测试类创建乒乓球对象，然后开始游戏</span></span><br><span class="line">        <span class="comment">// PingPong pingpong = new PingPong();</span></span><br><span class="line">        <span class="comment">// game.start(pingpong);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题分析：如果后续要不断扩展游戏种类，则每次都要额外修改Game类中的代 码，这很不方便，且不安全（每次要改动之前的代码，容易出Bug），<strong>违反了开 闭原则</strong>！</p><blockquote><p>开闭原则（<strong>Open-Closed Principle，OCP</strong>）是面向对象设计中的一条基本原 则。指的是”软件实体（类、模块、函数等）应该对扩展开放、对修改关 闭”。 换句话说，当需求发生变化时，应该<strong>通过增加新的代码来扩展现有功能，而不是直接修改现有代码</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽取父类：球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义子类：篮球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasketBall2</span> <span class="keyword">extends</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始篮球游戏...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义子类：足球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Football2</span> <span class="keyword">extends</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始足球游戏...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一步：新增乒乓球子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PingPong2</span> <span class="keyword">extends</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始乒乓球游戏...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义游戏类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game2</span> &#123;</span><br><span class="line">    <span class="comment">//这里只需要定义一个方法即可，要求参数类型是父类Ball</span></span><br><span class="line">    <span class="comment">//调用该方法时，需要传递一个该父类引用值，可以指向任何一个子类对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Ball ball)</span>&#123;</span><br><span class="line">        ball.play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Game类中代码不需要任何改动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多态实现：代码的扩展性很强</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08_Game2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建游戏对象</span></span><br><span class="line">        <span class="type">Game2</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game2</span>();</span><br><span class="line">        <span class="comment">// 2.创建篮球对象，然后开始游戏</span></span><br><span class="line">        <span class="type">BasketBall2</span> <span class="variable">basketBall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasketBall2</span>();</span><br><span class="line">        game.start(basketBall);</span><br><span class="line">        <span class="comment">// 3.创建足球对象，然后开始游戏</span></span><br><span class="line">        <span class="type">Football2</span> <span class="variable">football</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Football2</span>();</span><br><span class="line">        game.start(football);</span><br><span class="line">        <span class="comment">// 第三步：测试类创建乒乓球对象，然后开始游戏</span></span><br><span class="line">        <span class="type">PingPong2</span> <span class="variable">pingpong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPong2</span>();</span><br><span class="line">        game.start(pingpong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用多态实现功能时，如果后续要不断扩展游戏种类，<strong>根本不需要修改Game类中的代码，符合开闭原则</strong>，大大提高了程序的扩展性和灵活性！</p></blockquote><h1 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h1><blockquote><ul><li>向上转型（隐式转换）<ul><li><strong>父类引用指向子类对象</strong>，多态部分我们已经大量使用 <code>Person p = new Student();</code></li></ul></li><li>向下转型（显式转换）<ul><li><strong>子类引用指向父类对象</strong></li><li>格式：<code>子类型 对象名 = (子类型)父类引用；</code></li><li>前提：父类对象本身就是子类类型<ul><li><code>Person p = new Student();</code></li><li><code>Student s = (Student)p; //向下转型</code></li></ul></li></ul></li></ul><p><font color="skyblue">注意事项：先有向上转型，然后才能有向下转型</font></p></blockquote><blockquote><p>向上转型访问特点：（重点）</p><p>前提：使用父类引用指向子类对象，然后通过父类引用访问成员变量或成员方法</p><ul><li>操作<strong>成员变量</strong>：编译看左边<strong>（父类）</strong>，运行看左边<strong>（父类）</strong></li></ul><blockquote><p>在编译时，Java编译器只看左边（父类）的类型。<strong>这意味着如果你通过父类引用访问成员变量，编译器会检查这个成员变量在父类中是否存在</strong>，如果存在，则通过编译，否则报错。</p><p>在运行时，也是看左边（父类）的类型。<strong>这意味着无论实际对象是父类还是子类，都会访问父类中的成员变量。这是因为编译时已经确定了访问的是父类成员变量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Parent</span> <span class="variable">parentRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">System.out.println(parentRef.x); <span class="comment">// 编译通过，输出 10</span></span><br><span class="line">System.out.println(parentRef.y); <span class="comment">// 编译错误，父类没有 y 成员变量</span></span><br></pre></td></tr></table></figure></blockquote><ul><li>操作<strong>成员方法</strong>：编译看左边<strong>（父类）</strong>，运行看右边<strong>（子类）</strong></li></ul><blockquote><p>在编译时，Java编译器只看左边（父类）的类型。<strong>这意味着如果你通过父类引用调用成员方法，编译器会检查这个方法在父类中是否存在</strong>，如果存在，则通过编译，否则报错。</p><p>在运行时，却是看右边（子类）的类型。<strong>这意味着无论实际对象是父类还是子类，都会调用子类中的成员方法。这是因为编译时只确定了调用的是父类中的方法，但实际运行时，实际对象是子类对象，所以会调用子类中的方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Parent&#x27;s display&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Child&#x27;s display&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Parent</span> <span class="variable">parentRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">parentRef.display(); <span class="comment">// 运行时输出 &quot;Child&#x27;s display&quot;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>向下转型功能测试:</p><p><strong>注意：先有向上转型，然后才能有向下转型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09_Trans</span> &#123;</span><br><span class="line"> <span class="comment">// 注意事项：先有向上转型，然后才能有向下转型</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">//1.向上转型：用子对象 给 父类引用赋值</span></span><br><span class="line">     <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">     <span class="comment">//父类中没有v这个成员，编译失败</span></span><br><span class="line">     <span class="comment">//System.out.println(b.v); //error</span></span><br><span class="line">     <span class="comment">//父类中没有disp()方法，编译失败</span></span><br><span class="line">     <span class="comment">//b.disp();                //error</span></span><br><span class="line">     <span class="comment">//2.借助向下转型可以解决上述问题</span></span><br><span class="line">     <span class="type">Derived</span> <span class="variable">d</span> <span class="operator">=</span> (Derived)b;</span><br><span class="line">     <span class="comment">//操作子类独有成员</span></span><br><span class="line">     System.out.println(d.v);</span><br><span class="line">     <span class="comment">//操作子类独有方法</span></span><br><span class="line">     d.disp();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>引用类型强换异常</p><p>在类型强制转换的过程中，可能会遇到类型转换异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fork</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"> <span class="comment">//新增独有方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;in Fork, n：&quot;</span> + n);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09_Trans</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">//1.向上转型</span></span><br><span class="line">     <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">     <span class="comment">//2.向下转型，思考：编译能否成功，运行能否成功？</span></span><br><span class="line">     <span class="type">Fork</span> <span class="variable">f</span> <span class="operator">=</span> (Fork)b; <span class="comment">// java.lang.ClassCastException</span></span><br><span class="line">     <span class="comment">//3.调用独有方法</span></span><br><span class="line">     f.out();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/31/06-static-%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-%E5%A4%9A%E6%80%81/image-20230801225634271.png" alt="image-20230801225634271"></p><p>报错分析：</p><p>如果被转的引用类型变量，对应的实<strong>际类型和目标类型不是同一种类型</strong>，那么在转换的时候就会出现ClassCastException异常</p><p>Fork f &#x3D; (Fork)b; 强制转换时，b实际指向Derived对象，Derived和Fork类 型不是子父类关系，所以它是不能转为Fork对象的！</p></blockquote><blockquote><p>instanceof关键字</p><p>instanceof关键字能告诉我们，<strong>当前父类的引用，到底是执行的哪一个子类 对象</strong></p><p>格式：</p><ul><li><code>引用名 instanceof 类型名</code></li></ul><p>作用：</p><ul><li><strong>判断左边引用名实际指向的对象，其所属类型是否为右边的类型名</strong>，返回boolean类型结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(animal1 <span class="keyword">instanceof</span> Dog); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(animal1 <span class="keyword">instanceof</span> Animal); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Dog); <span class="comment">// 输出 false</span></span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Cat); <span class="comment">// 输出 true</span></span><br><span class="line">        System.out.println(animal2 <span class="keyword">instanceof</span> Animal); <span class="comment">// 输出 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>宝剑锋从磨砺出，梅花香自苦寒来。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>①Linux-操作系统-3</title>
      <link href="/2023/07/30/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3/"/>
      <url>/2023/07/30/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Linux 服务的基本操作-3 </p><p>属于扩展知识</p><p>这个太难写了，暂时停住了，主要感觉还未到时候，需要的时候看gitee里面的pdf文档啦~~</p></blockquote><h1 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h1><blockquote><ul><li>head ：通过head命令查看文档的<strong>前几行</strong>内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># head -n 数字 文件</span></span><br><span class="line"><span class="built_in">head</span> -5 /etc/passwd</span><br><span class="line"><span class="comment"># -n表示显式几行内容</span></span><br></pre></td></tr></table></figure><ul><li>tail：通过tail命令查看文档（日志）的<strong>后几行</strong>内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail -n 数字 文件</span></span><br><span class="line"><span class="built_in">tail</span> -5 /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail动态显示文档的最后内容，一般用来查看日志</span></span><br><span class="line"><span class="comment"># tail -f 文件</span></span><br><span class="line"><span class="built_in">tail</span> -f web.log <span class="comment"># 实时监控文件web.log</span></span><br></pre></td></tr></table></figure><ul><li>grep</li><li>cut</li><li>sort</li><li>wc</li><li>uniq</li><li>tee</li><li>tr</li><li>Split</li><li>文件所属</li></ul></blockquote><h1 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h1><h1 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h1><h2 id="磁盘和目录空间"><a href="#磁盘和目录空间" class="headerlink" title="磁盘和目录空间"></a>磁盘和目录空间</h2><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="默认分段"><a href="#默认分段" class="headerlink" title="默认分段"></a>默认分段</h2><h2 id="连接符OFS"><a href="#连接符OFS" class="headerlink" title="连接符OFS"></a>连接符OFS</h2><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><h2 id="内容匹配"><a href="#内容匹配" class="headerlink" title="内容匹配"></a>内容匹配</h2><h2 id="段内容判断"><a href="#段内容判断" class="headerlink" title="段内容判断"></a>段内容判断</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><h2 id="和"><a href="#和" class="headerlink" title="&amp;&amp;和||"></a>&amp;&amp;和||</h2><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><h2 id="定时服务"><a href="#定时服务" class="headerlink" title="定时服务"></a>定时服务</h2><h2 id="ssh服务"><a href="#ssh服务" class="headerlink" title="ssh服务"></a>ssh服务</h2><h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><h3 id="文件分发"><a href="#文件分发" class="headerlink" title="文件分发"></a>文件分发</h3><h3 id="远程命令"><a href="#远程命令" class="headerlink" title="远程命令"></a>远程命令</h3><h1 id="NFS服务管理"><a href="#NFS服务管理" class="headerlink" title="NFS服务管理"></a>NFS服务管理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><h2 id="NFS客户端"><a href="#NFS客户端" class="headerlink" title="NFS客户端"></a>NFS客户端</h2><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><h2 id="基础脚本"><a href="#基础脚本" class="headerlink" title="基础脚本"></a>基础脚本</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>[条件1]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令1</span><br><span class="line">e1if[条件2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">命令3</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>案例1：脚本执行第一个参数如果为1输入ok,如果为2输出n0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi six.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq <span class="string">&quot;1&quot;</span> ] <span class="comment"># 使用的时候记得带参数</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> -eq <span class="string">&quot;2&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 six.sh</span><br><span class="line">./six.sh 1</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>if 后 elif 后需要有空格</li><li>条件前后需要空格</li></ul></blockquote><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><blockquote><p>案例1：脚本执行第一个参数如果为1输入ok,如果为2输出n0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi seven.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 seven.sh</span><br><span class="line">./seven.sh 1</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>case行尾必须为单词 “in”</li><li>模式匹配必须以右括号）结束</li><li>双分号；；表示命令序列结束，相当于java中的break</li><li>最后*）表示默认模式，相当于java中的default</li></ul></blockquote><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 列表</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">命令</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> (( 初始值;循环控制条件;变量变化 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>案例1：从1加到100</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi eight.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">sum</span>=$[ <span class="variable">$sum</span> + <span class="variable">$i</span> ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 eight.sh</span><br><span class="line">./eight.sh</span><br></pre></td></tr></table></figure><ul><li>案例2：打印所有输出参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nine.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 nine.sh</span><br><span class="line">./nine.sh 1 2 3 4 5 9 10</span><br></pre></td></tr></table></figure></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件 ]</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">命令</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ten.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=0</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">sum</span>=$[ <span class="variable">$sum</span> + <span class="variable">$i</span> ]</span><br><span class="line">i=$[ <span class="variable">$i</span> + 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 ten.sh</span><br><span class="line">./ten.sh</span><br></pre></td></tr></table></figure></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-面向对象基础</title>
      <link href="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p><p>本节理论较多，注意不要睡着了哈💦💦💦</p></blockquote><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><ul><li>OOP（object oriented programming), 面向对象编程<ul><li>是一种以<strong>对象为中心</strong>的编程思想，通过借助对象实现<strong>具体的功能</strong></li><li>将<strong>大问题拆分为小问题</strong>，然后借助<strong>不同对象分别解决</strong>，最终实现功能</li></ul></li><li>POP（procedure oriented Programming），面向过程编程<ul><li>是一种以过程为中心的编程思想，靠自己一步一步去实现功能，需要对每个步骤精确控制</li><li>强调按步骤实现功能，先分析解决问题锁需步骤，再定义方法实现每个步骤功能，然后依次调用方法，最终实现功能</li></ul></li></ul></blockquote><h2 id="面向对象语言特征"><a href="#面向对象语言特征" class="headerlink" title="面向对象语言特征"></a>面向对象语言特征</h2><blockquote><ul><li>封装（encapsulation）信息隐蔽</li><li>继承（inheritance）代码重用</li><li>多态（polymorphism）灵活、接口统一</li></ul><p>Java语言、C++、Python等都是面向对象程序设计语言中的一种，所以都具有这三种特征</p><p><strong>专业的人去做专业的事情 –&gt; 合适的对象去调用合适的方法</strong></p></blockquote><h2 id="面向对象的特点："><a href="#面向对象的特点：" class="headerlink" title="面向对象的特点："></a>面向对象的特点：</h2><blockquote><ul><li>更符合人类思想习惯的思想</li><li>利用对象去实现功能</li><li>可以将复杂事情简单化（针对要解决问题的用户而言）</li><li>我们的角色由执行者变成了指挥者</li></ul></blockquote><h1 id="对象理解"><a href="#对象理解" class="headerlink" title="对象理解"></a>对象理解</h1><blockquote><p>自然界中客观存在的事物皆为对象 ，<strong>万物皆对象</strong></p><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230727202424066.png" alt="image-20230727202424066"></p><p>理解对象</p><ul><li>任何事物都是一个对象（object）</li><li>对象由对象组成</li><li>每个对象都有<strong>属性（静态的描述信息）</strong>、<strong>行为（动态的功能描述）</strong></li><li><strong>具有相似和行为</strong>的对象可以归为一类</li></ul></blockquote><h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><blockquote><p>具有相同属性和行为的对象可以抽象为类（数据类型的一种）</p><p>类的组成：</p><ul><li>属性：指事物的特征，静态描述，例如：手机品牌，价格，尺寸</li><li>行为：指事物所具有的功能，动态描述；例如：手机可以打电话，也可以发短信</li></ul><p>类的理解：</p><ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li><li>类是引用数据类型中的一种</li></ul><p><font color="skyblue">结论：类是对象的抽象，对象是类的实例</font></p><p>类定义的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] class 类名 &#123;</span><br><span class="line">    <span class="comment">//属性，可以包含多个</span></span><br><span class="line">    [权限修饰符] 数据类型 成员变量名;</span><br><span class="line">    <span class="comment">//行为，可以包含多个</span></span><br><span class="line">    [权限修饰符] 返回值类型 成员方法名(形参列表) &#123;</span><br><span class="line">        具体功能实现</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    [权限修饰符] 类名(形参列表) &#123;</span><br><span class="line">        初始化语句</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类定义步骤：</p><ul><li>定义类</li><li>编写类的成员变量</li><li>编写类的成员方法</li></ul></blockquote><h1 id="对象使用"><a href="#对象使用" class="headerlink" title="对象使用"></a>对象使用</h1><blockquote><p>创建对象格式：</p><ul><li><code>类名 对象名 = new 类名();</code></li></ul><p>调用成员格式：</p><ul><li><code>对象名.成员变量</code></li><li><code>对象名.成员方法()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04_Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(stu.name); <span class="comment">// null</span></span><br><span class="line">        System.out.println(stu.sid); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        stu.name = <span class="string">&quot;lwsj&quot;</span>;</span><br><span class="line">        stu.sid = <span class="number">1001</span>;</span><br><span class="line">        System.out.println(stu.name); <span class="comment">// lwsj</span></span><br><span class="line">        System.out.println(stu.sid); <span class="comment">// 1001</span></span><br><span class="line"></span><br><span class="line">        stu.sleep(<span class="number">100</span>, <span class="string">&quot;躺着&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全类名：包名.类名</span></span><br><span class="line">        <span class="comment">// com.briup.chap05.pojo.Student@659e0bfd</span></span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类使用总结：</p><ul><li>一般Java程序会写两个类：<strong>基础类，测试类</strong></li><li>基础类就是我们要实现封装出来的那个类</li><li>测试类就是包含main方法的类</li><li>注意：只能在一个类中定义main方法，其是程序的入口，<strong>必须唯一</strong></li></ul></blockquote><h3 id="数据类型理解："><a href="#数据类型理解：" class="headerlink" title="数据类型理解："></a>数据类型理解：</h3><blockquote><p>Java中对数据类型的描述和定义，都是抽象的，每一种数据类型，都是对<strong>一类数据</strong>的<strong>抽象描述</strong>，描述这种数据的基本特点。</p><p>int、String和Student都是对数据的抽象描述，不能当做具体的数据使用，如果想使用的这些数据的话，如果想使用的这些数据的话，必须使用int或String类型定义变量，使用Student实例化对象，然后<strong>使用变量或对象来参与运算</strong>。</p></blockquote><h3 id="类和对象的关系："><a href="#类和对象的关系：" class="headerlink" title="类和对象的关系："></a>类和对象的关系：</h3><blockquote><p>类是一组相关属性和行为的集合，它是对某一种具体事物的抽象描述。</p><p>也可以吧类看做一个模板，我们使用的对象，就是按照这个模板中的定义，来进行创建的。</p><ul><li><strong>类是对一类事物的描述，是抽象的</strong></li><li><strong>对象是一类事物的实例，是具体的</strong></li><li><strong>类是对象的模板，对象是类的实体</strong></li></ul><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730093610186.png" alt="image-20230730093610186"></p><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730093702082.png" alt="image-20230730093702082"></p><p><font color="skyblue">结论：类是一种抽象的数据描述，对象是类的一个具体的实例。</font></p></blockquote><h1 id="对象内存"><a href="#对象内存" class="headerlink" title="对象内存"></a>对象内存</h1><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 实例化对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    stu.name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">    stu.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    stu.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单个对象内存图</li></ul><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730095335408.png" alt="image-20230730095335408"></p><ul><li>程序运行过程：<ul><li>加载Student类：把<strong>Student.class文件内容加载到方法区</strong>中</li><li>加载main方法并运行：整个<strong>main方法的代码都被加载到栈区</strong>中</li><li>创建引用类型变量：在栈空间中开辟一块内存空间，用stu标识</li><li>在堆中开辟内存创建对象，并给属性赋上<strong>默认初始值</strong></li><li>将堆空间对象内存地址值放入stu标识的内存区域中</li><li>对象属性赋值：将“tom”和20放入堆空间对象内存区域内</li><li>对象方法调用：找到方法区sayHello方法对应的代码，执行</li><li>main方法继续执行，遇到 } ，程序执行结束</li></ul></li></ul><p>引用类型理解：上述案例中，stu是一个<strong>引用类型变量</strong>，其对应<strong>栈区的一块内存区域</strong>，其中放的是一个<strong>引用值（地址值）</strong>，通过这个引用值，系统可以找到对<strong>象实际开辟的内存空间（堆区）</strong>，进而进行对象属性操作或方法调用。</p></blockquote><blockquote><ul><li>多个对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">   s1.name = <span class="string">&quot;lucy&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">   s2.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">   s2.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">   s1.sayHello();</span><br><span class="line">   s2.study(<span class="number">100</span>, <span class="string">&quot;flay&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730101539516.png" alt="image-20230730101539516"></p><p>对象内存结论：</p><ul><li>系统会为每个<strong>对象</strong>开辟单独的<strong>内存空间（堆空间）</strong>，用来<strong>存储对象的属性</strong>。</li><li>类的<strong>成员方法存储在方法区</strong>，只保留一份，只要是该类的对象，都可以调用。</li></ul></blockquote><h1 id="变量对比"><a href="#变量对比" class="headerlink" title="变量对比"></a>变量对比</h1><blockquote><p>到目前为止，我们学习了两种变量：<strong>成员变量、局部变量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06_Variate</span> &#123;</span><br><span class="line">    <span class="type">int</span> num; <span class="comment">// 成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> newNum)</span> &#123;</span><br><span class="line">        num = newNum; <span class="comment">// newNum 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// args 局部变量</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  <span class="comment">// sc 局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;input a num: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Test06_Variate</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test06_Variate</span>(); <span class="comment">// 局部变量</span></span><br><span class="line">        t.setNum(number);</span><br><span class="line"></span><br><span class="line">        System.out.println(t.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员、局部变量区别：</p><ul><li>定义位置不同<ul><li>成员变量：在类中，方法外</li><li>局部变量：方法内部或方法声明上（形参列表）</li></ul></li><li>内存中位置不同<ul><li>成员变量：<strong>堆内存</strong></li><li>局部变量：<strong>栈内存</strong>（方法内）</li></ul></li><li>生命周期不同<ul><li>成员变量：随着对象的存在而存在，随着对象的消失而消失</li><li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li><li>初始化值不同<ul><li>成员变量：<strong>有默认初始值</strong></li><li>局部变量：<strong>没有默认初始值，必须先定义，赋值才能使用</strong></li></ul></li></ul></blockquote><h1 id="封装特性"><a href="#封装特性" class="headerlink" title="封装特性"></a>封装特性</h1><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><blockquote><p>封装是面向对象三大特征之一，另外两个是<strong>继承，多态</strong></p><p>封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。</p><p>其优点如下：</p><ul><li>通过<strong>方法来控制成员变量的操作</strong>，<strong>提高了代码的安全性</strong></li><li>把<strong>代码用方法进行封装</strong>，<strong>提高了代码的复用性</strong></li><li><strong>隐藏代码实现细节</strong>，提供<strong>公共访问方式</strong>，<strong>简化操作</strong></li></ul></blockquote><blockquote><p>例子：</p><p>我觉得最能体先 封装 的例子就是 <strong>适配器模式</strong></p><p>比如我们有两种充电器，一个<strong>三角三口的</strong>，一个是<strong>两个直口的</strong>。</p><p>我们现在只有一个泰国牌子的 插座 ，就是<strong>两个孔的</strong>。</p><p>这个时候我们就可以通过一个<strong>转换器</strong>  <strong>两孔口 —&gt; (一个三口+两个直口的)</strong></p><p>这个时候对于<strong>两边（用户和提供方）</strong>来说都不需要知道转换器具体的内部细节，<strong>只需要</strong>知道<strong>适配器</strong>提供了怎么样的接口</p><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730103830911.png" alt="image-20230730103830911"></p><p>封装原则：</p><ul><li>把不需要对发提供的内容隐藏起来</li><li>把属性隐藏，提供公共方法对其访问</li></ul></blockquote><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><blockquote><p>private、public都是权限修饰符，可以用来修饰成员变量、成员方法和构造方法；</p><ul><li>private(私有)，用它修饰类的成员（含成员变量、成员方法），则这些成员只能在<strong>类内（类的成员函数内部）</strong>去使用，其他地方不可以操作；</li><li>public表示公有，用它修饰类的成员（含成员变量、成员方法），则这些成员在类内、类外都可以操作</li></ul></blockquote><h2 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h2><blockquote><ul><li>使用private修饰成员变量</li><li>提供对应setXxx()、getXxx()方法，用public修饰</li><li>具体使用时，借助对象的setXxx方法给属性赋值，getXxx方法获取属性值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap05.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户类 封装版</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public 所有位置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * protected</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * （不写）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * private （最小，只能在类中使用）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luozongwei</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2_AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        System.out.println(account.getId());</span><br><span class="line">        System.out.println(account.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><blockquote><p>在类中的<strong>普通成员方法</strong>中，可以使用this关键字，<strong>其表示调用当前方法的对象引用，即哪个对象调用该方法，this就代表哪一个对象。</strong></p><p>this关键字用法：</p><ul><li>对成员变量和局部变量进行区分：<code>this.数据成员</code></li><li>调用类中的成员方法：<code>this.成员方法(实际参数列表)</code></li><li>调用类中的其他构造器：this.构造函数(实参)</li></ul><p>成员变量与局部变量的区分：</p><ul><li>方法的形参如果与成员变量同名<ul><li>不带this修饰的变量指的是形参</li><li>如果要表示成员变量，则必须加this修饰</li></ul></li><li>方法的形参与成员变量不同名<ul><li>则不带this修饰的变量指的就是成员变量</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String id, <span class="type">double</span> balance)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用this关键字在构造器里调用其他的重载构造器</span></span><br><span class="line">    <span class="comment">// 一般是少的调用多的</span></span><br><span class="line">    <span class="built_in">this</span>(id, <span class="number">100.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="this内存构成理解"><a href="#this内存构成理解" class="headerlink" title="this内存构成理解"></a>this内存构成理解</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    stu1.sayHello();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    stu2.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单个对象内存图</li></ul><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730111719952.png" alt="image-20230730111719952"></p><ul><li>多个对象内存图</li></ul><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730111911521.png" alt="image-20230730111911521"></p><p>观察上图可知：<strong>每一个对象中，都有自己的this，和其他对象中的互不影响。</strong> </p><ul><li><p>当前执行stu1.sayHello()代码的时候，this代表的就是stu1 </p></li><li><p>当前执行stu2.sayHello()代码的时候，this代表的就是stu2</p></li></ul><p><font color="skyblue">结论：成员方法被哪个对象调用，方法中的this就代表那个对象。即谁调用，this就代表谁。</font></p></blockquote><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><blockquote><p>构造方法可以对对象进行初始化操作，即为<strong>对象开辟内存空间的时候，给对象的成员成员赋初值</strong>。</p><p>构造方法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 类名(参数列表) &#123;</span><br><span class="line">初始化语句s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>构造方法一般使用public修饰</li><li>构造方法没有返回值类型，连void都没有</li><li>构造方法名和类名相同（区分大小写）</li><li>构造方法可以重载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.chap05.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teacher()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teacher(String, double)...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;salary：&quot;</span> + salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时机：</p><ul><li>创建对象的时候调用，每创建一次对象，就会执行一次构造方法</li><li>不能手动调用构造方法</li></ul></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"> t1.show();</span><br><span class="line"> System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"> <span class="type">Teacher</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;kevin&quot;</span>, <span class="number">13099.5</span>);</span><br><span class="line"> t2.show();</span><br><span class="line"> <span class="comment">// 手动调用构造方法，错误用法，无法通过编译</span></span><br><span class="line"> <span class="comment">// t2.Teacher();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/27/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20230730115815946.png" alt="image-20230730115815946"></p><p>创建对象时构造器会被<strong>自动调用</strong>（<strong>实例化对象时指定的那 个构造方法</strong>），其完成了对象属性的初始化。</p><p>注意事项补充：</p><ul><li>用户不定义构造方法，系统会提供一个无参构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 类名()&#123;</span><br><span class="line">    <span class="comment">// nothing to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户定义构造方法，系统则不再提供无参构造方法</li><li>用户不需要也不可以主动调用构造方法，系统会自动调用</li></ul><p>对象创建步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhang&quot;</span>, <span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将Student.class文件加载到内存方法区</li><li>在main栈帧开辟一块内存，用stu标识</li><li>在堆中开辟内存创建对象</li><li>给属性以默认初始值（null,0）</li><li>属性进行显式初始化（如果存在的话，比如private int age &#x3D; 10;）</li><li>调用构造方法，用（“zhang”, 23）给属性赋值</li><li>将堆中对象的内存地址赋值给stu，对象创建完成</li></ul></blockquote><h1 id="this补充"><a href="#this补充" class="headerlink" title="this补充"></a>this补充</h1><blockquote><p>this特殊用法： </p><p>在构造方法中，可以借助this关键字调用其他构造方法 </p><p>具体格式为： this(实际参数列表);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">    <span class="comment">//该类已经成功定义2参构造器，定义过程省略</span></span><br><span class="line">    <span class="comment">//public Teacher(String name, double salary);</span></span><br><span class="line">    <span class="comment">//this特殊用法：在构造方法中，调用其他构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//必须是构造方法的第一行有效代码</span></span><br><span class="line">        <span class="built_in">this</span>(name,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10_This</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//调用Teacher(String)构造方法实例化对象</span></span><br><span class="line">        <span class="comment">//底层借助Teacher(String, double)实现</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;larry&quot;</span>); </span><br><span class="line">        t.show(); <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Teacher(String, double)...</span></span><br><span class="line"><span class="comment">// name: lucy</span></span><br><span class="line"><span class="comment">// salary：0.0</span></span><br></pre></td></tr></table></figure><p>构造方法Teacher(String)底层借助Teacher(String, double)实现了 功能。</p><p><font color="skyblue">注意： this(实际参数列表) 必须是构造方法中的第一行有效代码。</font></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>盛年不再来，一日难再晨，及时当勉励，岁月不待人。—- 陶渊明💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>utools</title>
      <link href="/2023/07/26/utools/"/>
      <url>/2023/07/26/utools/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>再续前缘：<a href="https://www.lzwgxust.top/post/9506ea9e.html">超级好用的工具集合</a></p></blockquote><h1 id="🏌🏌🏌utools"><a href="#🏌🏌🏌utools" class="headerlink" title="🏌🏌🏌utools"></a>🏌🏌🏌utools</h1><blockquote><p>utools主要是用于本地搜索+各种各样的桌面脚本。</p><p>官网地址如下：<a href="https://u.tools/">uTools官网 - 新一代效率工具平台</a></p><p>主要使用的两个快捷键：</p><ul><li>alt + 空格 （快速打开utools面板）</li><li>ctrl + d （将面板定在桌面）</li></ul></blockquote><blockquote><p><font color="skyblue">既是插件也是应用</font></p><p><font color="skyblue"> uTools 插件应用: 轻量、安全、简洁、无广告</font></p></blockquote><iframe width="800" height="450" src="https://res.u-tools.cn/home_page-2.mp4" frameborder="0" allowfullscreen></iframe><blockquote><p><font color="skyblue">按下鼠标中键，弹出 uTools 超级面板</font></p><p><font color="skyblue">随心所欲，信手拈来</font></p></blockquote><p><img src="/2023/07/26/utools/image-20230527101934154.png" alt="image-20230527101934154"></p><blockquote><p><font color="skyblue">快捷键「Alt + 空格」，呼出 uTools 搜索框</font></p><p><font color="skyblue">呼之即来，用完即走</font></p></blockquote><p><img src="/2023/07/26/utools/image-20230527102501575.png" alt="image-20230527102501575"></p><h2 id="🐙各大功能"><a href="#🐙各大功能" class="headerlink" title="🐙各大功能"></a>🐙各大功能</h2><h3 id="🌞搜索"><a href="#🌞搜索" class="headerlink" title="🌞搜索"></a>🌞搜索</h3><p><img src="/2023/07/26/utools/image-20230527102632306.png" alt="image-20230527102632306"></p><blockquote><p>搜索有强大的本地搜索功能，同时能够对不同的文件类型进行分类</p></blockquote><p><img src="/2023/07/26/utools/image-20230527102822467.png" alt="image-20230527102822467"></p><h3 id="🥡超级面板"><a href="#🥡超级面板" class="headerlink" title="🥡超级面板"></a>🥡超级面板</h3><blockquote><p>对文件夹、图片、文件 点击鼠标中键后有惊喜🌟</p></blockquote><p><img src="/2023/07/26/utools/image-20230527103143268.png" alt="image-20230527103143268"></p><blockquote><p>如果是使用触摸板的话，可以设置四指点击为鼠标中键</p></blockquote><p><img src="/2023/07/26/utools/image-20230920091822449.png" alt="image-20230920091822449"></p><h3 id="🌵添加本地文件启动"><a href="#🌵添加本地文件启动" class="headerlink" title="🌵添加本地文件启动"></a>🌵添加本地文件启动</h3><blockquote><p>对于经常使用的文件夹、应用程序可添加到本地文件启动。</p></blockquote><p><img src="/2023/07/26/utools/image-20230527103643949.png" alt="image-20230527103643949"></p><p><img src="/2023/07/26/utools/image-20230919091028273.png" alt="image-20230919091028273"></p><p> <img src="/2023/07/26/utools/image-20230527103750652.png" alt="image-20230527103750652"></p><h3 id="🦸‍♂图床"><a href="#🦸‍♂图床" class="headerlink" title="🦸‍♂图床"></a>🦸‍♂图床</h3><blockquote><p>可以将本地图片上传到图床（链接访问）</p><p>前提是在插件应用市场已经安装</p><p>如果想要有专属于自己的图床的话：<a href="https://www.lzwgxust.top/post/a4a8d6a4.html">github搭建个人图床</a></p></blockquote><p><img src="/2023/07/26/utools/image-20230527104057928.png" alt="image-20230527104057928"></p><p><img src="/2023/07/26/utools/image-20230527104119676.png" alt="20230527104119676"></p><p><img src="/2023/07/26/utools/image-20230527104307977.png" alt="image-20230527104307977"></p><blockquote><p>这样就可以使用外链进行访问啦</p></blockquote><p><img src="/2023/07/26/utools/image-20230527104358763.png" alt="image-20230527104358763"></p><h3 id="🔥ChatGPT"><a href="#🔥ChatGPT" class="headerlink" title="🔥ChatGPT"></a>🔥ChatGPT</h3><blockquote><p>可以到插件应用市场下载chatGPT</p></blockquote><p><img src="/2023/07/26/utools/image-20230527202123099.png" alt="image-20230527202123099"></p><blockquote><p>但是需要<font color="skyblue">科学上网+ChatGpt账号</font>（这个大家自己到网上找哈，我相信你们可以的）</p><p>可以通过utools面板快速打开ChatGPT了，不用老是登录浏览器哈哈。</p></blockquote><p><img src="/2023/07/26/utools/image-20230527202552136.png" alt="image-20230527202552136"></p><h3 id="🐋curl"><a href="#🐋curl" class="headerlink" title="🐋curl"></a>🐋curl</h3><blockquote><p>有了curl，妈妈再也不用担心我不会发送请求了哈哈！！</p><p>使用步骤如下：</p><ul><li>F12打开浏览器调试工具 &gt; Network &gt; 选中某条请求右键 &gt; copy &gt; copy as curl (bash) &gt;这样就得到了一条curl命令</li><li>alt+space &gt; 呼出utools</li><li>回车进入插件即可</li></ul></blockquote><p><img src="/2023/07/26/utools/image-20230614171313201.png" alt="image-20230614171313201"></p><p><img src="/2023/07/26/utools/image-20230614171411175.png" alt="image-20230614171411175"></p><blockquote><p>谁便选择一个请求 Don’t care</p></blockquote><p><img src="/2023/07/26/utools/image-20230614171522427.png" alt="image-20230614171522427"></p><blockquote><p>alt + 空格 呼唤出utool 选择curl（前提是你已经下载该插件了）</p></blockquote><p><img src="/2023/07/26/utools/image-20230614171713221.png" alt="image-20230614171713221"></p><blockquote><p>点进去，即可看待刚才复制的 curl（bash）已经进去了</p></blockquote><p><img src="/2023/07/26/utools/image-20230614171842059.png" alt="image-20230614171842059"></p><p><img src="/2023/07/26/utools/image-20230614171811663.png" alt="image-20230614171811663"></p><blockquote><p>将ip：port换成自己的</p></blockquote><p><img src="/2023/07/26/utools/image-20230614172013761.png" alt="image-20230614172013761"></p><p><img src="/2023/07/26/utools/image-20230614172131835.png" alt="image-20230614172131835"></p><blockquote><p>当然也可以换成自己的域名~</p></blockquote><h3 id="🍭书签与历史记录"><a href="#🍭书签与历史记录" class="headerlink" title="🍭书签与历史记录"></a>🍭书签与历史记录</h3><blockquote><p>今天继续介绍utools用超级好用的插件——书签与历史记录(聪<strong>明的小狐狸)</strong></p><p>主要功能就是：更加<strong>精准查找</strong>一个<strong>软件内部</strong>的<strong>文件或项目</strong>。</p><p><img src="/2023/07/26/utools/image-20230726151143596.png" alt="image-20230726151143596"></p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="/2023/07/26/utools/image-20230726151917586.png" alt="image-20230726151917586"></p><p><img src="/2023/07/26/utools/image-20230726152106203.png" alt="image-20230726152106203"></p><blockquote><p>下面是我常用的软件：主要是开发软件和Typora</p></blockquote><p><img src="/2023/07/26/utools/image-20230726152454375.png" alt="image-20230726152454375"></p><blockquote><p>下面我以 Clion为例子进行演示如何配置+如何搜索：</p></blockquote><p><img src="/2023/07/26/utools/image-20230726152711360.png" alt="image-20230726152711360"></p><blockquote><p>通过utools强大的搜索功能进行全区查找。</p></blockquote><p><img src="/2023/07/26/utools/image-20230726152635929.png" alt="image-20230726152635929"></p><p><img src="/2023/07/26/utools/image-20230726152839677.png" alt="image-20230726152839677"></p><p><img src="/2023/07/26/utools/image-20230726152916510.png" alt="image-20230726152916510"></p><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><blockquote><p>首先要了解其中涉及到的关键字。</p><p>我只把我常用的列了出来哈~，具体看自己需求。</p></blockquote><p><img src="/2023/07/26/utools/image-20230726155913390.png" alt="image-20230726155913390"></p><p><img src="/2023/07/26/utools/image-20230726160122471.png" alt="image-20230726160122471"></p><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><blockquote><p>IDE 项目集合</p></blockquote><p><img src="/2023/07/26/utools/image-20230726160335424.png" alt="image-20230726160335424"></p><blockquote><p>Typora</p></blockquote><p><img src="/2023/07/26/utools/image-20230726160940161.png" alt="image-20230726160940161"></p><blockquote><p>Brower Bookmark：浏览器书签</p></blockquote><p><img src="/2023/07/26/utools/image-20230726160916034.png" alt="image-20230726160916034"></p><blockquote><p>Browser History：浏览器历史</p></blockquote><p><img src="/2023/07/26/utools/image-20230726160825032.png" alt="image-20230726160825032"></p><h3 id="jdk1-8文档使用"><a href="#jdk1-8文档使用" class="headerlink" title="jdk1.8文档使用"></a>jdk1.8文档使用</h3><blockquote><p>首先下载插件</p></blockquote><p><img src="/2023/07/26/utools/image-20230809181542027.png" alt="image-20230809181542027"></p><blockquote><p><strong>关键字jdk1.8</strong></p></blockquote><p><img src="/2023/07/26/utools/image-20230809181636288.png" alt="image-20230809181636288"></p><p><img src="/2023/07/26/utools/image-20230809181817252.png" alt="image-20230809181817252"></p><p><img src="/2023/07/26/utools/image-20230809181937161.png" alt="image-20230809181937161"></p><p><img src="/2023/07/26/utools/image-20230809182106171.png" alt="image-20230809182106171"></p><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><blockquote><p>hosts切换插件可以轻松创建多套 hosts 方案，并快速进行合并切换。</p></blockquote><blockquote><p>以上是我对utools最常使用的功能，utools是真的很好用的，特别是搜索功能，在很大程度上减轻了我们对文件的查找过程，极大提高了工作效率。👻</p></blockquote><blockquote><p>未完结敬请期待哦！💕💕💕</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-数组</title>
      <link href="/2023/07/25/04-%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/25/04-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h1><blockquote><p>​数组，表示一块<strong>连续的内存空间</strong>，可用来存储<strong>多个数据(元素)<strong>，要求</strong>元素类型要一致</strong>。</p></blockquote><h1 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h1><blockquote><ul><li><p>数据类型[] 数组名（推荐）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1;</span><br></pre></td></tr></table></figure></li><li><p>数据类型 数组名[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1[];</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="数组内存理解"><a href="#数组内存理解" class="headerlink" title="数组内存理解"></a>数组内存理解</h2><blockquote><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727084436861.png" alt="image-20230727084436861"></p><p>attention:</p><ul><li>数组是<strong>引用数据类型</strong>，用来存储一个<strong>引用值</strong>（可理解为<strong>地址值</strong>）</li><li>数组&#x2F;变量 没有进行初始化，不可直接使用</li></ul></blockquote><h1 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h1><blockquote><p>定义数组(<strong>开辟栈空间内存</strong>)的同时，给其赋上初值，就叫做数组的初始化！</p></blockquote><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><blockquote><ul><li><p>格式：<code>数据类型[] 数组名 = new 数据类型[数组长度]</code></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>new是一个关键字，表示数组在<strong>堆内存区域</strong>开辟内存空间</li><li>等号两边的数据类型要一致（继承、实现不一定）</li><li>数组长度必须要有，可以&gt;&#x3D;0(一般大于0)，但<strong>不能为负数</strong></li></ul></li></ul></blockquote><h2 id="内存构成"><a href="#内存构成" class="headerlink" title="内存构成"></a>内存构成</h2><blockquote><p>数组名标识的那块内存（<strong>栈空间</strong>），存放了一个<strong>引用值（地址值）</strong>，通过该地址值可以找到<strong>堆空间</strong>相应内存（用来存放数组中所有元素）</p><p>堆空间内存存在默认初始化：<font color="skyblue">整数型&#x3D;0，浮点数&#x3D;0.0，引用类型&#x3D;null，字符类型&#x3D;\u0000</font></p><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727090320003.png" alt="image-20230727090320003"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 输出结果为：[I@15db9742</span></span><br><span class="line"><span class="comment">* [ : 当前的空间是一个数组类型</span></span><br><span class="line"><span class="comment">* I : 当前数组容器中所存储的数据类型</span></span><br><span class="line"><span class="comment">* @ : 分隔符</span></span><br><span class="line"><span class="comment">* 15db9742 : 堆空间十六进制内存地址</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="数组下标"><a href="#数组下标" class="headerlink" title="数组下标"></a>数组下标</h2><blockquote><p>数组的下标的区间为[0, 数组长度-1]</p><p>minIndex &#x3D; 0, maxIndex &#x3D; length - 1</p><ul><li><p>通过下标可以访问数组中元素</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></li><li><p>通过数组下标给数组元素赋值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>结合循环来赋值或者取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123; <span class="comment">// 循环赋值</span></span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123; <span class="comment">// 循环取值</span></span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i: arr) &#123;  <span class="comment">// foreach主要用来遍历，赋值不会对原来的数据产生影响</span></span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><blockquote><p>数组长度：是指在一个数组中，可以存放<strong>同一类型元素</strong>的<strong>最大数量</strong>。</p><p>获取数组长度固定格式：<code>数组名.length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intp[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">System.out.println(arr.length);</span><br></pre></td></tr></table></figure><p>数组长度注意事项：</p><ul><li>数组长度，必须在创建数组对象的时候就明确指定</li><li>数组长度，一旦确定，就无法再改变</li><li>数组长度，可以&gt;&#x3D;0 (一般大于0)，但<strong>不能为负数</strong></li></ul></blockquote><h2 id="数组默认值"><a href="#数组默认值" class="headerlink" title="数组默认值"></a>数组默认值</h2><blockquote><p>数组在创建时，会开辟2块内存，数组名对应栈空间那块内存，数组元素会 存放在堆空间。 </p><p>堆空间数组每一个元素位置上，存在相应的默认值，要么为0，要么为0.0， 要么为null。</p><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727155812190.png" alt="image-20230727155812190"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// byte、short、int、long类型数组中的默认值为0</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>]; <span class="comment">// 默认4个数据全是0</span></span><br><span class="line"><span class="comment">// float、double类型数组中的默认值为 0.0</span></span><br><span class="line"><span class="type">double</span>[] d = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">4</span>]; <span class="comment">// 默认4个数据全是0.0</span></span><br><span class="line"><span class="comment">// boolean类型数组中的默认值为false</span></span><br><span class="line"><span class="type">boolean</span>[] d = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">4</span>]; <span class="comment">// 默认4个数据全是false</span></span><br><span class="line"><span class="comment">// char类型数组中的默认值为 &#x27;\u0000&#x27;</span></span><br><span class="line"><span class="type">char</span>[] d = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>]; <span class="comment">// 默认4个数据全是 &#x27;\u0000&#x27;</span></span><br><span class="line"><span class="comment">// 引用类型数组中的默认值为null</span></span><br><span class="line">String[] d = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>]; <span class="comment">// 默认4个数据全是null</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><blockquote><p>在创建数组的同时，直接初始化数组元素的值，就称为数组的静态初始。</p><p>静态初始化格式：</p><ul><li><p>完整版格式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,...&#125;;</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型[] 数组名 = &#123;元素1,元素2,...&#125;;</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><font color="skyblue">注意：数组静态初始化书写方式要严格按照上述两种方式！</font></p><p>错误展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误方式1：不能明确数组长度</span></span><br><span class="line"><span class="type">int</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//错误方式2：简化版格式必须严格按照上述格式书写，不能分两行书写</span></span><br><span class="line"><span class="type">int</span>[] arr5;</span><br><span class="line">arr5 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="内存补充"><a href="#内存补充" class="headerlink" title="内存补充"></a>内存补充</h2><blockquote><ul><li>两个数组内存结构图</li></ul><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727162110852.png" alt="image-20230727162110852"></p><ul><li>使用数组赋值</li></ul><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727162213670.png" alt="image-20230727162213670"></p></blockquote><h1 id="数组异常"><a href="#数组异常" class="headerlink" title="数组异常"></a>数组异常</h1><h2 id="索引越界异常"><a href="#索引越界异常" class="headerlink" title="索引越界异常"></a>索引越界异常</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">System.out.println(arr[<span class="number">4</span>]); <span class="comment">// java.lang.ArrayIndexOutOfBoundsException: 4</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><p><strong>arr &#x3D; null</strong> 这行代码，意味着变量arr将不会在保存数组的内存地址，我 们通过arr这个标识符再也找不到堆空间数组元素，因此运行的时候会抛出 NullPointerException 空指针异常。</p></blockquote><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><blockquote><p><strong>java.util.Arrays 类</strong>，是JavaSE API中提供给我们使用的一个工具类，这个类 中包含了<strong>操作数组</strong>的常用方法，比如<strong>排序、查询、复制、填充数据</strong>等，借助它我 们在代码中操作数组会更方便。</p><p>Arrays中的常用方法： </p><ul><li>toString方法 <ul><li>可以把一个数组变为对应的String形式</li></ul></li><li>copyOf方法 <ul><li>可以把一个数组进行复制 该方法中也是采用了arraycopy方法来实现的功能</li></ul></li><li>sort方法 <ul><li>可以对数组进行排序</li></ul></li><li>binarySearch方法 <ul><li>在数组中，查找指定的值，返回这个指定的值在数组中的下标，但是查找之 前需要在数组中先进行排序，可以使用sort方法先进行排序</li></ul></li><li>copyOfRange方法（了解） <ul><li>也是复制数组的方法，但是可以指定从哪一个下标位置开始复制 该方法中也是采用了arraycopy方法来实现的功能</li></ul></li><li>fill（了解） <ul><li>可以使用一个特定的值，把数组中的空间全都赋成这个值</li></ul></li></ul></blockquote><h1 id="扩展案例"><a href="#扩展案例" class="headerlink" title="扩展案例"></a>扩展案例</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote><p>看我的这篇博客即可：<a href="https://www.lzwgxust.top/post/30d7e4ab.html">基础篇-interview-heima</a></p></blockquote><h1 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h1><blockquote><p>数组的长度确定后便不能修改，如果需要数组存放更多元素，可以通过<strong>创建长度更长的新数组</strong>，然后<strong>先复制老数组内容到新数组</strong>中，再往新数组中放入额外的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.System arraycopy() 复制数组功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                 Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// src: 需要 被 复制的目标数组</span></span><br><span class="line"><span class="comment">// srcPos: 从目标数组的哪一个位置开始复制</span></span><br><span class="line"><span class="comment">// dest: 需要把数据复制到另外一个新的数组中</span></span><br><span class="line"><span class="comment">// destPos: 把数据复制到新数组的时候，需要把数据从什么位置开始复制进去</span></span><br><span class="line"><span class="comment">// length: 复制的目标数组的长度</span></span><br></pre></td></tr></table></figure><p>案例：定义一个方法，传递一个数组对象给它，其将数组长度<strong>扩大到原来的2倍</strong>返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="type">int</span>[] newArr = dilatation(arr);</span><br><span class="line">    System.out.println(Arrays.toString(newArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] dilatation(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length * <span class="number">2</span>];</span><br><span class="line">    System.arraycopy(arr, <span class="number">0</span>, b, <span class="number">0</span>, arr.length);</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h2><blockquote><p>格式1：</p><ul><li><strong><code>数据类型[][] 数组名 = new 数据类型[一维长度m][二维长度n];</code></strong></li><li>表示二维数组的元素数量，即可以存放多少个一维数组</li><li>表示每一个一维数组，可以存放多少个元素</li></ul><p>格式2：</p><ul><li><strong><code>数据类型[][] 数组名 = new 数据类型[一维长度m][];</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种格式</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr); <span class="comment">// [[I@b684286</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* [[I@b684286</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* [[: 2个中括号就代表的是2维数组 </span></span><br><span class="line"><span class="comment">* I: 数组中存储的数据类型为</span></span><br><span class="line"><span class="comment">* int 15db9742: 十六进制内存地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组的每一个 元素都对应着（一维数组）地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">// [I@2a139a55</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">// [I@15db9742</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义格式</span></span><br><span class="line"><span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br><span class="line"><span class="comment">//输出arr2中2个元素值，默认为null、null</span></span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br><span class="line"><span class="comment">//给二维数组的每个元素赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></blockquote><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><blockquote><ul><li>一维数组内存结构：</li></ul><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727184008037.png" alt="image-20230727184008037"></p><ul><li>二维数组内存结构：</li></ul><p>可以把二维数组看成一个一维数组，数组的每个元素对应的内存区域中，<strong>存放的是一维数组引用值</strong></p><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727184440900.png" alt="image-20230727184440900"></p><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727184620416.png" alt="image-20230727184620416"></p></blockquote><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int arr[m][n];</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 存数</span></span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line"><span class="comment">// 取数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：m、n的取值都是 [0，length-1] ，注意不要越界，否则会出现异常 ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种：完整格式</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种：简化格式</span></span><br><span class="line"><span class="type">int</span>[][] arr2 = &#123;&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;, &#123;<span class="number">44</span>, <span class="number">55</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">10</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">20</span>,<span class="number">20</span>&#125;;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727190043114.png" alt="image-20230727190043114"></p><p><img src="/2023/07/25/04-%E6%95%B0%E7%BB%84/image-20230727190216546.png" alt="image-20230727190216546"></p></blockquote><h1 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h1><blockquote><p><strong>JDK1.5或者以上</strong>版本中，可以使用可变参数列表</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型... 参数名) &#123;</span><br><span class="line">    方法体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通方法定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变参数列表 方法定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>... a)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">//普通方法的调用，只有下面一种形式</span></span><br><span class="line">    fun(arr);</span><br><span class="line">    <span class="comment">//可变参数列表方法的调用，下面形式都可以</span></span><br><span class="line">    test(); <span class="comment">//不传参</span></span><br><span class="line">    test(<span class="number">1</span>); <span class="comment">//传递1个元素</span></span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//传递多个元素</span></span><br><span class="line">    test(arr); <span class="comment">//传递数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：可变参数列表本质上是一个数组，方法中使用可变参数列表，比用数组作参数功能更强大</p><p>补充：方法中有一个可变参数同时，还可以存在其他参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>... b)</span> &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(Arrays.toString(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">注意事项：可变参数和普通参数共存的时候，可变参数必须放到最后一个参数的位置。</font></p><p>总结：</p><ul><li>可变参数列表可以接受 <strong>0-n个参数</strong></li><li>可变参数列表还可以接受数组</li><li>可变参数列表必须放在函数参数列表的<strong>最右端，且只能出现1次</strong></li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>业精于勤，荒于嬉；行成于思，毁于随。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-操作符-流程控制-方法</title>
      <link href="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/"/>
      <url>/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><blockquote><p><strong>操作符</strong>：对字面值常量或变量进行操作的符号，也称 运算符 。<br><strong>表达式</strong>：用操作符把字面值常量或变量连接起来的式子（符合Java语法），就<br>称之为表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> b + c; <span class="comment">// + 运算符  (b+c)表达式</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="运算符分类"><a href="#运算符分类" class="headerlink" title="运算符分类"></a>运算符分类</h2><blockquote><ul><li>算术运算符</li><li>赋值运算符</li><li>比较|关系|条件 运算符</li><li>逻辑运算符</li><li>位运算符</li></ul></blockquote><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105409028.png" alt="image-20230724105409028"></p></blockquote><h3 id="求余运算符"><a href="#求余运算符" class="headerlink" title="% 求余运算符"></a>% 求余运算符</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">13</span> % <span class="number">5</span>;</span><br><span class="line">System.out.println(n); <span class="comment">// 3</span></span><br><span class="line">n = <span class="number">13</span> % -<span class="number">5</span>;</span><br><span class="line">System.out.println(n); <span class="comment">// 3</span></span><br><span class="line">n = -<span class="number">13</span> % <span class="number">5</span>;</span><br><span class="line">System.out.println(n); <span class="comment">// -3</span></span><br><span class="line">n = -<span class="number">13</span> % -<span class="number">5</span>;</span><br><span class="line">System.out.println(n); <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><p>结论：<strong>求余运算，结果符号只跟左操作数的符号有关</strong></p></blockquote><h3 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h3><blockquote><p>+除了可以作为加法运算符，也可以作为字符串连接符。 </p><p><strong>字符串 + 其他任意类型数据，得到的结果都是字符串。</strong></p></blockquote><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><blockquote><ul><li>变量名++，变量名–</li><li>++变量名，–变量名</li></ul><p>如果单独使用，目的是对变量进行自增或自减，效果相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++; <span class="comment">// 效果一样</span></span><br><span class="line">++a;</span><br></pre></td></tr></table></figure><p>如果作为表达式使用，则两者有明显区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++; <span class="comment">// 10</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a; <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p><strong>–自减 的使用方式与自增类似。</strong></p></blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (x--) + (--x) + (x * <span class="number">10</span>); <span class="comment">// 4 + 2 + 2*10 = 26</span></span><br><span class="line">    System.out.println(<span class="string">&quot;x: &quot;</span> + x); <span class="comment">// x: 2</span></span><br><span class="line">    System.out.println(<span class="string">&quot;y: &quot;</span> + y); <span class="comment">// y: 26</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    b++;  <span class="comment">// b++系统自动实现了（强制转换）即 b = (byte) (b+1)</span></span><br><span class="line">    b = b + <span class="number">1</span>; <span class="comment">// x b = (byte)(b+1) 需要手动实现</span></span><br><span class="line">    <span class="comment">//问哪句会报错,为什么？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105429428.png" alt="image-20230724105429428"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//面试题</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//s = s + 5; //error</span></span><br><span class="line">s += <span class="number">5</span>; <span class="comment">// 等价于 s = (short)(s+5);</span></span><br><span class="line">s++; <span class="comment">// 等价于 s = (short)(s+5); 系统内部自动强转了</span></span><br><span class="line">System.out.println(<span class="string">&quot;s: &quot;</span> + s);</span><br></pre></td></tr></table></figure><p><em><em>注意：+&#x3D;、-&#x3D;、</em>&#x3D;、&#x2F;&#x3D;、++、– 等扩展的赋值运算符，隐含了强制类型转换！</em>*</p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105444486.png" alt="image-20230724105444486"></p></blockquote><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105610175.png" alt="image-20230724105610175"></p><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725153310444.png" alt="image-20230725153310444"></p></blockquote><h2 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105512039.png" alt="image-20230724105512039"></p><p>如果要进行移位操作， 则需要先获取操作数的二进制形式（<strong>补码</strong>） ，然后按 位进行操作。</p><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725155418566.png" alt="image-20230725155418566"></p></blockquote><h3 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h3><blockquote><ul><li>&gt;&gt; 低位抛弃，高位补【符号位的值】</li><li>&gt;&gt;&gt; 低位抛弃，高位补0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正数 [值]表示被抛弃的值</span></span><br><span class="line"><span class="comment">// 0 0(23) 0000 1010 原=反=补</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a: &quot;</span> + a);</span><br><span class="line"><span class="comment">// 0 0(23) 0000 1010</span></span><br><span class="line"><span class="comment">// 00 0(23) 000 0101 [0] ==&gt; 5</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt;&gt; <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a &gt;&gt; 1: &quot;</span> + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 000 0(23) 0000 10 ==&gt; 2</span></span><br><span class="line">b = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a &gt;&gt; 2: &quot;</span> + b);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负数</span></span><br><span class="line">a = -<span class="number">10</span>;</span><br><span class="line"><span class="comment">// 获取-10的二进制补码：</span></span><br><span class="line"><span class="comment">// 原 1 0(23) 0000 1010</span></span><br><span class="line"><span class="comment">// 反 1 1(23) 1111 0101</span></span><br><span class="line"><span class="comment">// 补 1 1(23) 1111 0110</span></span><br><span class="line"><span class="comment">// 运算: 111 1(23) 1111 01 [10] </span></span><br><span class="line">b = a &gt;&gt; <span class="number">2</span>; <span class="comment">// 高位补1 负</span></span><br><span class="line"><span class="comment">// 结果推导：补 1 1(23) 1111 1101</span></span><br><span class="line"><span class="comment">// - 1</span></span><br><span class="line"><span class="comment">// 反 1 1(23) 1111 1100</span></span><br><span class="line"><span class="comment">// 保留符号位，其他位取反</span></span><br><span class="line"><span class="comment">// 原 1 0(23) 0000 0011</span></span><br><span class="line"><span class="comment">// 结果：-3</span></span><br><span class="line">System.out.println(<span class="string">&quot;-10 &gt;&gt; 2: &quot;</span> + b);</span><br><span class="line"></span><br><span class="line">b = a &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="comment">// -10补： 1 1(23) 1111 0110</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt; 2位，高位补0</span></span><br><span class="line"><span class="comment">// 00 1 1(23) 1111 01</span></span><br><span class="line"><span class="comment">// 结果: 很大的一个正整数 1073741821</span></span><br><span class="line">System.out.println(<span class="string">&quot;-10 &gt;&gt;&gt; 2: &quot;</span> + b);</span><br></pre></td></tr></table></figure></blockquote><h3 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h3><blockquote><ul><li>&lt;&lt; 高位抛弃，低位补0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = -<span class="number">10</span>;</span><br><span class="line">b = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="comment">// -10补码：1 1(23) 1111 0110</span></span><br><span class="line"><span class="comment">// 左移2位，结果：</span></span><br><span class="line"><span class="comment">// 1(22) 1111 011000</span></span><br><span class="line"><span class="comment">// 即： 1 1(23) 1101 1000 补码</span></span><br><span class="line"><span class="comment">// -1 得反码： 1 1(23) 1101 0111</span></span><br><span class="line"><span class="comment">// 保留符号位，其他为取反，得原码：</span></span><br><span class="line"><span class="comment">// 原: 1 0(23) 0010 1000 ==&gt; -40</span></span><br><span class="line">System.out.println(<span class="string">&quot;a &lt;&lt; 2: &quot;</span> + b); <span class="comment">// -40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果左移位数太多，超出了数值表示范围，如何处理？</span></span><br><span class="line"><span class="comment">// 数值 &lt;&lt; n 等同 数值 &lt;&lt; (n%当前数值类型所占比特位数) 比如int为32位</span></span><br><span class="line">b = a &lt;&lt; <span class="number">33</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a &lt;&lt; 33: &quot;</span> + b); <span class="comment">// -20</span></span><br><span class="line">System.out.println(<span class="string">&quot;a &lt;&lt; (33%32): &quot;</span> + b); <span class="comment">// -20</span></span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>每左移1位，等同于 <code>值*2</code></li><li>数值左移n位（&gt;&#x3D;最高位），等同于<code>数值&lt;&lt;(n%当前值所属类型所占比特位)</code></li></ul></blockquote><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105713689.png" alt="image-20230724105713689"></p><ul><li>~ 连通<strong>符号位都进行取反</strong></li></ul></blockquote><h3 id="特殊用法"><a href="#特殊用法" class="headerlink" title="^特殊用法"></a>^特殊用法</h3><blockquote><p>不使用<strong>中间变量</strong>得前提下，交换2个变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    System.out.println(x + <span class="string">&quot; &quot;</span> + y); <span class="comment">// 10 11</span></span><br><span class="line">    <span class="comment">// 10 11</span></span><br><span class="line">    x = x ^ y; <span class="comment">// 1010 1011 = 0001</span></span><br><span class="line">    y = x ^ y; <span class="comment">// 0001 1011 = 1010</span></span><br><span class="line">    x = x ^ y; <span class="comment">// 0001 1010 = 1011</span></span><br><span class="line">    System.out.println(x + <span class="string">&quot; &quot;</span> + y); <span class="comment">// 11 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    swap(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h3><blockquote><p>使用位操作符，对变量a（10）进行某一位<strong>置0或置1</strong>操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定位置为 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3_SetOne</span> &#123;</span><br><span class="line">    <span class="comment">// ⽅法声明如下：</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBit</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">// 提示：使⽤ | 及 &lt;&lt;</span></span><br><span class="line">        <span class="comment">// 补全代码</span></span><br><span class="line">        v = v | (<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> setBit(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;r: &quot;</span> + r); <span class="comment">// 14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定位置为 0 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_SetZero</span> &#123;</span><br><span class="line">    <span class="comment">// ⽅法声明如下：</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setZero</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">// 提示：使⽤ ~ 及 &lt;&lt;</span></span><br><span class="line">        <span class="comment">// 补全代码</span></span><br><span class="line">        v = v &amp; ~(<span class="number">1</span> &lt;&lt; (n-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> setZero(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;r: &quot;</span> + r); <span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230724105648128.png" alt="image-20230724105648128"></p><p>三目运算符也称<strong>条件运算符</strong></p><p>格式：</p><ul><li>（关系表达式）？表达式1 ：表达式2；</li><li>关系表达式成立，返回表达式1，否则返回表达式2。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> (a &lt; b) ? a : b;</span><br></pre></td></tr></table></figure></blockquote><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><blockquote><ul><li>顺序结构</li><li>分支结构<ul><li>if语句</li><li>switch分支语句</li></ul></li><li>循环结构<ul><li>for</li><li>while</li><li>do while</li></ul></li></ul></blockquote><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><blockquote><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725163505288.png" alt="image-20230725163505288"></p></blockquote><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><h2 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; <span class="comment">//表达式可以为byte、short、int、char，JDK5加</span></span><br><span class="line">        入枚举，JDK7加入String</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//分支入口</span></span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//分支入口</span></span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725164031143.png" alt="image-20230725164031143"></p><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725164131609.png" alt="image-20230725164131609"></p></blockquote><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h2 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h2><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><blockquote><ul><li>for和while循环<strong>先判断条件是否成立</strong>，然后决定是否执行循环体（先判断后 执行）</li><li>do…while<strong>先执行一次循环体</strong>，然后判断条件是否成立，是否继续执行循环体 （先执行后判断）</li></ul></blockquote><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><h1 id="label"><a href="#label" class="headerlink" title="label"></a>label</h1><blockquote><p>代码中出现多层循环嵌套，label标签配合break关键字，可以使程序从内部循 环中跳出。</p><p><strong>注意：label不是关键字</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    lable1:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;<span class="comment">//外层循环</span></span><br><span class="line">        lable2:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;<span class="comment">//内层循环</span></span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span> lable1; <span class="comment">// 此时可以跳出最外层for循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，默认情况下，在嵌套循环中，break和continue只能对<strong>当前循环</strong>起作用。</p></blockquote><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步，导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05_Random</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//第二步，创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123; </span><br><span class="line">            <span class="comment">// nextInt() 默认[0,1)</span></span><br><span class="line">            <span class="comment">// nextInt(n) [0,n)</span></span><br><span class="line">            <span class="comment">//第三步，调用nextInt(max-min+1) + min; 产生随机数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">20</span>-<span class="number">10</span>+<span class="number">1</span>) + <span class="number">10</span>; <span class="comment">// 10-20 =  [10,21)</span></span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：获取[min,max]范围随机数的公式如下 </li><li><code>int number = r.nextInt(max-min+1) + min;</code></li></ul></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><blockquote><p>方法（method）: 就是完成特定功能的代码块！ 提高了代码的复用性与可读性</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(形式参数列表) &#123;</span><br><span class="line">    方法体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰符：public、static、private、protect、final</li><li>返回值类型：根据该方法的具体功能而定<ul><li>如果方法的作用仅作输出，不需要返回数据，则为void</li><li>如果方法需要计算一个结果并返回，则为结果类型（int、double、String等）</li></ul></li><li>方法名<ul><li><strong>见名知意</strong>，方法名的描述性要好</li><li><strong>驼峰命名法</strong>，如果只有一个单词全小写（小驼峰）<ul><li>例：display() sum()</li></ul></li><li>如果多个单词构成，则第一个单词全小写，后续单词首字母大写<ul><li>例：sayHello() getMax() findStudentById()</li></ul></li></ul></li><li>形式参数列表<ul><li>根据该方法的具体功能而定</li><li>具体案例如下：<ul><li>计算2个int数的和，则 <code>int getSum(int a, int b)</code></li><li>计算3个数的平均数，则 <code>double getAvg(int x, int y, int z)</code></li><li>遍历一个数组，则 <code>void outArray(int[] array)</code></li></ul></li></ul></li><li>方法体语句：方法的具体实现，要根据方法功能书写代码</li></ul></blockquote><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><blockquote><p>方法调用格式： 方法名(实际参数列表);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>方法必须<strong>先定义，再调用</strong></li><li>实际参数列表可以是常量，也可以是变量，也可以是表达式</li><li>实际参数类型要匹配形式参数类型（<strong>要么完全相同，要么能自动隐式类型转换</strong>）</li><li>main方法是入口方法，一个程序中唯一，其可以调用其他普通方法</li><li>其他方法不能调用main方法，普通方法可以相互调用</li></ul></blockquote><h3 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;交换前，x: &quot;</span> + x + <span class="string">&quot; y: &quot;</span> + y); <span class="comment">// 10 20</span></span><br><span class="line">    x = x ^ y;</span><br><span class="line">    y = x ^ y;</span><br><span class="line">    x = x ^ y;</span><br><span class="line">    System.out.println(<span class="string">&quot;交换后，x: &quot;</span> + x + <span class="string">&quot; y: &quot;</span> + y); <span class="comment">// 20 10s</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    swap(a,b);</span><br><span class="line">    System.out.println(<span class="string">&quot;交换后，a: &quot;</span> + a + <span class="string">&quot; b: &quot;</span> + b); <span class="comment">// 10 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">思考：为什么a、b两个元素的值没有交换？</font></p><p><img src="/2023/07/24/03-%E6%93%8D%E4%BD%9C%E7%AC%A6-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-%E6%96%B9%E6%B3%95/image-20230725185034968.png" alt="image-20230725185034968"></p></blockquote><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><blockquote><p>方法重载：指同一个类中定义的多个方法之间的关系，如果多个方法要构成重载，则需要同时满足下面条件~</p><ul><li>多个方法在<strong>同一个类</strong>中</li><li>多个方法具有<strong>相同的方法名</strong></li><li>多个方法的<strong>参数列表不相同</strong>（<strong>类型不同</strong>或者<strong>数量不同</strong>）</li><li>重载跟函数的<strong>返回值类型</strong>无关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//重载1：求两个int类型数据和的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重载2：求两个double类型数据和的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重载3：求三个int类型数据和的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用方法时，Java虚拟机会通过实际参数的不同来区分同名的方法，从而实现精准调用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="type">double</span> <span class="variable">result2</span> <span class="operator">=</span> sum(<span class="number">10.0</span>, <span class="number">20.0</span>);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result3</span> <span class="operator">=</span> sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(result3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>千淘万浪虽辛苦，吹尽黄沙始到金💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-标示符-关键字-变量</title>
      <link href="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/"/>
      <url>/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote><p>Java中的注释，分为三种：</p><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>思考：Java源代码中如果添加了注释，会不会导致字节码文件会臃肿变 大？</p><p>回答：<strong>不会的</strong>。因为源代码文件：Xxxx.Java 通过<strong>编译</strong>生成<strong>字节码文件</strong>： Xxxx.class的过程中，编译器会<strong>忽略掉</strong>源码中的<strong>注释部分</strong>。</p></blockquote><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><blockquote><p>关键字概述：</p><ul><li>被Java语言赋予<strong>特定含义</strong>的单词</li></ul><p>关键字特点：</p><ul><li>组成关键字的<strong>字母全部小写</strong>，常用的代码编辑器对关键字都有<strong>高亮显示</strong></li></ul></blockquote><blockquote><p>Keywords in Java:</p><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723094304824.png" alt="image-20230723094304824"></p><ul><li><p>instanceof</p><ul><li>它的作用是检查一个<strong>对象</strong>是否是指定<strong>类或接口</strong>类型的<strong>实例</strong>，或者是否是该<strong>类的子类实例</strong></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> MyClass) &#123;</span><br><span class="line">    <span class="comment">// obj是MyClass或其子类的实例</span></span><br><span class="line">    <span class="type">MyClass</span> <span class="variable">myObj</span> <span class="operator">=</span> (MyClass) obj; <span class="comment">// 可以安全地进行类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>native</p><ul><li>是一个修饰符关键字，用于声明一个方法是由<strong>非Java代码</strong>实现的，通常是由<strong>本地代码</strong>（如C或C++）实现的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeMethod</span><span class="params">()</span>; <span class="comment">// 本地方法声明</span></span><br></pre></td></tr></table></figure></li><li><p>synchronized</p><ul><li>是一个修饰符关键字，用于控制对<strong>共享资源</strong>的访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 这里代码在同一时刻只能被一个线程 执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">staticSynchronizedMethod</span><span class="params">()</span> &#123; <span class="comment">// 类对象锁</span></span><br><span class="line">    <span class="comment">// 静态方法的锁是类对象，在同一时刻只能有一个线程执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock) &#123; <span class="comment">// 指定对象锁</span></span><br><span class="line">        <span class="comment">// 使用指定的对象作为锁，同一时刻只能有一个线程执行这个代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>transientt</p><ul><li>是一个修饰符关键字，用于标记类的成员变量，表示这些变量在<strong>序列化过程</strong>中将会被忽略，<strong>不会</strong>被写入<strong>对象的持久化存储</strong>中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> normalField; <span class="comment">// 这个字段会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> tempField; <span class="comment">// 这个字段在序列化时会被忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>volatile</p><ul><li>它的作用是告诉编译器和虚拟机，被 <code>volatile</code> 修饰的变量在<strong>多线程环境</strong>下可能会被<strong>并发修改</strong>，因此需要<strong>特殊对待</strong>，确保对该变量的<strong>读写操作</strong>是具有<strong>可见性</strong>的和<strong>按照顺序执行</strong>的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SharedData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> count; <span class="comment">// 什么声明一个volatile变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++; <span class="comment">// 对volatile变量进行写入操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> get <span class="title function_">Count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count; <span class="comment">// 对volatile变量进行读取操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><blockquote><p>在Java中，给类、方法、变量起的名字，就是标识符，其可以用来<strong>标识</strong> 这个类、方法、变量</p></blockquote><h2 id="命名规则："><a href="#命名规则：" class="headerlink" title="命名规则："></a>命名规则：</h2><blockquote><ul><li>字母、数字、下划线_、美元符号$组成</li><li>开头不能是数字</li><li>字符大小写敏感</li><li>长度没有限制</li><li>不能使用Java中的关键字或保留字</li></ul><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723101741054.png" alt="image-20230723101741054"></p></blockquote><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><blockquote><p>采用驼峰命名法：</p><ul><li><p>项目名</p><ul><li>全部小写。如：workdesk、jobserver。</li></ul></li><li><p>包名</p><ul><li>全部小写，名词。如：java.awt.event。</li></ul></li><li><p>类和接口</p><ul><li>不管是1个还是多个单词，每个单词首字母都大写（大驼峰）</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountBase</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法和变量</p><ul><li>首字母小写，第二个单词开始每个单词的首字母大写（小驼峰）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStudentName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">personNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>常量</p><ul><li>全部字符大写，如果是多个单词，单词与单词间使用下划线分隔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_NUM</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>尽量使用有意义的名字，尽量做到<strong>见名知意</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">int</span> <span class="variable">numOfStudent</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;tom&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><blockquote><p>概念：在程序运行过车中，其值不可以发生改变的量，称为常量。</p><p>分类：<strong>字面值常量</strong> 和 <strong>自定义常量</strong></p></blockquote><blockquote><p>字面值常量</p><ul><li><strong>字符串常量</strong>：用双引号括起来的多个字符（可以包含0个、一个或多个）。<code> &quot;&quot;、&quot;a&quot;、&quot;abc&quot;、&quot;中国&quot;</code></li><li><strong>整数常量</strong>： 整数  <code>-10、0、88</code></li><li><strong>小数常量</strong>：小数 <code>-5.5、1.0.88.88</code></li><li><strong>布尔常量</strong>：布尔值，表示真假，只有true和false</li><li><strong>空常量</strong>：一个特殊的值，空置，值为null</li></ul></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><blockquote><ul><li>格式1<ul><li>数据类型 变量名；</li><li>变量名 &#x3D; 数据值；</li></ul></li><li>格式2<ul><li>数据类型 变量名 &#x3D; 数据值； （推荐）</li></ul></li></ul><p><font color="skyblue">变量一定是要求先声明、再赋值、再使用</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 声明+赋值</span></span><br></pre></td></tr></table></figure><p>理解：</p><ul><li>数据类型：<strong>Java是强类型语言</strong>，每个常量或变量都有对应的数据类型</li><li>变量名：一个标识符，标识<strong>内存上的一块空间</strong></li><li>数据值：即变量值，该值会<strong>存储</strong>到变量名标识的那块<strong>空间</strong></li></ul></blockquote><h2 id="内存基础知识："><a href="#内存基础知识：" class="headerlink" title="内存基础知识："></a>内存基础知识：</h2><blockquote><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723105926602.png" alt="image-20230723105926602"></p></blockquote><h2 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h2><blockquote><ol><li>执行java命令，系统会把<strong>编译生成的class文件</strong>内容装入<strong>内存中的方法区</strong></li><li>接下来找到里面的<strong>main方法（程序入口）</strong></li><li>再在<strong>方法栈</strong>空间申请一块区域（<strong>存储方法中变量</strong>）来保证main方法的执行</li><li>最后<strong>顺序执行</strong>main方法中的代码</li><li>遇到main方法的<strong>“}”或return</strong>语句，方法执行结束，<strong>main方法函数帧内存释放</strong></li></ol></blockquote><h2 id="变量内存"><a href="#变量内存" class="headerlink" title="变量内存"></a>变量内存</h2><blockquote><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723110823912.png" alt="image-20230723110823912"></p><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723111248748.png" alt="image-20230723111248748"></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><ul><li>变量名是标识符中的一种，用来标识一块内存区域</li><li>变量定义后没有赋初值，不能直接使用，编译报错</li><li>变量值的类型应该跟变量的类型一致</li></ul></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Java是强类型语言，对于每一种数据都定义了明确的数据类型，<strong>不同类型</strong> 变量在内存中对应的<strong>空间大小不同</strong>。</p><p>分类：</p><ul><li>基本数据类型<ul><li>整数型 byte short int long</li><li>浮点型 float double</li><li>字符型 char</li><li>布尔型 boolean</li></ul></li><li>引用数据类型</li></ul><p><strong>思考：为什么数据类型有这么多种呢？</strong></p><ul><li><strong>不同的数据</strong>占用的<strong>内存空间是不同</strong>的</li><li><strong>不同的内存空间</strong>，所<strong>存储的数据的大小范围</strong>是不一样</li></ul><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723113817432.png" alt="image-20230723113817432"></p></blockquote><h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><blockquote><p>比特位：：bit ，是<strong>计算机存储信息的最小单位</strong>，存放一位二进制数，即 <strong>0 或 1</strong>。</p><p>字节：byte，是计算机<strong>存储容量的最小单位</strong>，通常用大写字母“B”表示， **<code>1byte == 8bits</code>**。</p><p>计算器存储容量的单位，常见的还有<strong>KB、M、G、T</strong>，换算过程如下：</p><ul><li>1KB (Kilobyte 千字节) &#x3D; 1024B，其中1024&#x3D;2^10 ( 2 的10次方) </li><li>1MB (Megabyte 兆字节 简称“兆”) &#x3D; 1024KB </li><li>1GB (Gigabyte 吉字节 又称“千兆”) &#x3D; 1024MB </li><li>1TB (Trillionbyte 万亿字节 太字节) &#x3D; 1024GB</li></ul></blockquote><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><blockquote><ul><li>二进制 <strong>0b|B开头</strong>，由0和1组成 </li><li>八进制 <strong>0开头</strong>，0、1…6、7组成 </li><li>十进制 常见整数，0、1…8、9组成 </li><li>十六进制 <strong>0x或0X开头</strong>，0、1…8、9、a、b、c、d、e、f组成，<strong>大小写 不区分</strong></li></ul></blockquote><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="任意进制转换为10进制"><a href="#任意进制转换为10进制" class="headerlink" title="任意进制转换为10进制"></a>任意进制转换为10进制</h3><blockquote><ul><li><code>结果值 = 系数*基数的权次幂相加</code></li><li><code>0x61：1*16^0 + 6*16^1 = 1 + 96 = 97</code></li></ul><p>变量内存理解：</p><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723151444575.png" alt="image-20230723151444575"></p></blockquote><h3 id="十进制转换为其他进制"><a href="#十进制转换为其他进制" class="headerlink" title="十进制转换为其他进制"></a>十进制转换为其他进制</h3><blockquote><p><strong>除积倒取余</strong> ，具体计算过程如下：</p><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723151810133.png" alt="image-20230723151810133"></p></blockquote><h3 id="十进制到二进制的快速转换"><a href="#十进制到二进制的快速转换" class="headerlink" title="十进制到二进制的快速转换"></a>十进制到二进制的快速转换</h3><blockquote><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723152006996.png" alt="image-20230723152006996"></p><p>上图运算步骤解析：</p><ul><li>拆解<strong>正整数</strong>，将其分解为<strong>2的指数</strong>倍相加</li><li>找出2的指数倍 对应的二进制1</li><li>根据变量类型确定占用的字节数及比特位，组合得到最终的二进制形式</li></ul></blockquote><h3 id="二进制转换为8、16进制"><a href="#二进制转换为8、16进制" class="headerlink" title="二进制转换为8、16进制"></a>二进制转换为8、16进制</h3><blockquote><ul><li>2进制转化为8进制<ul><li>从最右边开始，每<strong>3位分一组</strong>，不足3位的话高位补0</li><li>将得到的数字组合到一起，最前面以<strong>0开头</strong></li></ul></li><li>2进制转化为16进制<ul><li>从最右边开始，每<strong>4位分一组</strong>，不足4位的话高位补0</li><li>将得到的数字组合到一起，最前面以<strong>0x or 0X</strong>开头</li></ul></li></ul></blockquote><h2 id="原反补码"><a href="#原反补码" class="headerlink" title="原反补码"></a>原反补码</h2><blockquote><p><font color="skyblue">计算机运算时都是以补码方式进行</font></p></blockquote><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><blockquote><p>就是二进制定点表示法，即最<strong>高位为符号位</strong>，<strong>“0”表示正，“1”表示负</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">10</span>的原码：<span class="number">0</span> <span class="number">0</span>(<span class="number">23</span>) <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line">-<span class="number">10</span>的原码：<span class="number">1</span> <span class="number">0</span>(<span class="number">23</span>) <span class="number">0000</span> <span class="number">1010</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><blockquote><ul><li><strong>正数的反码与其原码相同</strong></li><li>负数的反码，在原码的基础上，<strong>保留了符号位，其他位逐位取反</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">10</span>的反码： 跟<span class="number">10</span>的原码相同  <span class="number">0</span> <span class="number">0</span>(<span class="number">23</span>) <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line">-<span class="number">10</span>的反码： 拿到-<span class="number">10</span>的原码， <span class="number">1</span> <span class="number">0</span>(<span class="number">23</span>) <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line">       保留符号位其他位取反 <span class="number">1</span> <span class="number">1</span>(<span class="number">23</span>) <span class="number">1111</span> <span class="number">0101</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><blockquote><ul><li>正数的补码与其原码相同</li><li>负数的补码是在其反码的末位加1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">10</span>的补码： 跟<span class="number">10</span>的原码相同  <span class="number">0</span> <span class="number">0</span>(<span class="number">23</span>) <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line">-<span class="number">10</span>的补码： 拿到-<span class="number">10</span>的反码， <span class="number">1</span> <span class="number">1</span>(<span class="number">23</span>) <span class="number">1111</span> <span class="number">0101</span></span><br><span class="line">           在反码基础上加  <span class="number">1</span> <span class="number">1</span>(<span class="number">23</span>) <span class="number">1111</span> <span class="number">0110</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char取值范围推导过程</span></span><br><span class="line"><span class="number">1.</span><span class="type">char</span>类型只能表示<span class="number">0</span>或正整数，其最高位不表示符号位</span><br><span class="line"><span class="number">2.</span><span class="type">char</span>类型占用<span class="number">2</span>个字节，<span class="number">16</span>个比特位</span><br><span class="line"><span class="number">3.</span>最小值 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> -&gt; <span class="number">0</span></span><br><span class="line"><span class="number">4.</span>最大值 <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> -&gt; <span class="number">65535</span>（大家可借助计算器，也可</span><br><span class="line">以手算）</span><br><span class="line"><span class="comment">//byte取值范围推导过程</span></span><br><span class="line"><span class="number">1.</span><span class="type">byte</span>类型可以表示正负整数和<span class="number">0</span></span><br><span class="line"><span class="number">2.</span><span class="type">byte</span>类型占用<span class="number">1</span>个字节，<span class="number">8</span>个比特位</span><br><span class="line"><span class="number">3.8</span>个比特位 <span class="number">1111</span> <span class="number">1111</span> 能够表示的数字有 <span class="number">256</span>个</span><br><span class="line"><span class="number">4.</span>最大值 <span class="number">0111</span> <span class="number">1111</span> -&gt; <span class="number">127</span></span><br><span class="line"><span class="number">5.</span>中间值 <span class="number">0000</span> <span class="number">0000</span> -&gt; <span class="number">0</span></span><br><span class="line"><span class="number">6.</span>其他值 <span class="number">8</span>个bits能够表示<span class="number">256</span>个数，其中[<span class="number">0</span>,<span class="number">127</span>]占用了<span class="number">128</span>个，剩余的</span><br><span class="line">数都是小于<span class="number">0</span>的，共<span class="number">128</span>个，结果可推理出来为[-<span class="number">128</span>,-<span class="number">1</span>]</span><br><span class="line"><span class="number">7.</span>总结，表示范围[-<span class="number">128</span>,<span class="number">127</span>]</span><br></pre></td></tr></table></figure><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723153632160.png" alt="image-20230723153632160"></p></blockquote><h1 id="常量补充"><a href="#常量补充" class="headerlink" title="常量补充"></a>常量补充</h1><blockquote><p>注意：整形字面值，不论是二进制、八进制还是十进制、十六进制，<strong>默认 都是int类型常量</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面默认都是int类型常量</span></span><br><span class="line">System.out.println(<span class="number">97</span>);</span><br><span class="line">System.out.println(<span class="number">0x61</span>);</span><br><span class="line">System.out.println(<span class="number">0141</span>);</span><br><span class="line">System.out.println(<span class="number">0b01100001</span>);</span><br></pre></td></tr></table></figure></blockquote><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><blockquote><p>基本数据类型表示范围大小排序：</p><p><img src="/2023/07/23/02-%E6%A0%87%E7%A4%BA%E7%AC%A6-%E5%85%B3%E9%94%AE%E5%AD%97-%E5%8F%98%E9%87%8F/image-20230723161321124.png" alt="image-20230723161321124"></p></blockquote><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><blockquote><ul><li>赋值过程中，<strong>小数据类型值或变量可以直接赋值给大类型变量</strong>，类型会<strong>自动进行转换</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> = num = <span class="number">10</span>; <span class="comment">// int ---&gt; long</span></span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">7.0F</span>; <span class="comment">// float ---&gt; double</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> c; <span class="comment">// char ---&gt; int</span></span><br></pre></td></tr></table></figure><ul><li>byte、short、char类型的数据在进行算术运算是，<strong>会先自动提升为int</strong>，然后再进行运算</li><li>其他类型相互运算时，表示<strong>范围小的会自动提升为范围大的</strong>，然后再运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> b + s; <span class="comment">// 使用变量名进行运算的时候，上升为int</span></span><br><span class="line"><span class="comment">// (byte -&gt; int) + (short -&gt; int)</span></span><br><span class="line"><span class="comment">//    int   +  int = int </span></span><br><span class="line"><span class="type">short</span> <span class="variable">sum2</span> <span class="operator">=</span> b + s; <span class="comment">// X int 无法自动转换为 short</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h2><blockquote><p><code>数据类型 变量名 = （目标数据类型）（数据值或变量或表达式）</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> (<span class="type">float</span>)<span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">123L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量赋值 强制类型转换</span></span><br><span class="line"><span class="type">double</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">178.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (<span class="type">int</span>)len;</span><br></pre></td></tr></table></figure></blockquote><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// int --&gt; byte</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// int --&gt; short</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">97</span>; <span class="comment">// int --&gt; char</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">127</span>; <span class="comment">// [-128, 127]</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">128</span>; <span class="comment">// x </span></span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> -<span class="number">32768</span>; <span class="comment">//  [-32,768（-2^15）到32,767（2^15 - 1）]</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s3</span> <span class="operator">=</span> -<span class="number">32769</span>; <span class="comment">// x</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">65535</span>; <span class="comment">// [0, 65535]</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="number">65536</span>; <span class="comment">// x </span></span><br></pre></td></tr></table></figure><p><strong>整形常量优化机制</strong></p><ul><li>常量值 &gt; 赋值类型的取值范围  fail</li><li>常量值 &lt;&#x3D; 赋值类型的取值范围 success</li></ul><p>注意事项：</p><ul><li>常量优化机制<strong>只适用于常量</strong>，如果是变量，则不可以</li><li><strong>该优化机制只针对int类型常量</strong>，对于long、float、double等常量，则不可以。</li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>博观而约取，厚积而薄发。——苏轼💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Java基础入门</title>
      <link href="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>目标：Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Java是什么？"><a href="#Java是什么？" class="headerlink" title="Java是什么？"></a>Java是什么？</h2><blockquote><ul><li>Java是一门非常优秀的计算机编程语言 (Go也很优秀)</li><li>Java之父：詹姆斯·高斯林（James Gosling）</li></ul><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230721083637158.png" alt="image-20230721083637158"></p></blockquote><h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><h2 id="世界语言排名"><a href="#世界语言排名" class="headerlink" title="世界语言排名"></a>世界语言排名</h2><blockquote><p>2023年7月21日：</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230721083931094.png" alt="image-20230721083931094"></p></blockquote><h2 id="Java关键时间"><a href="#Java关键时间" class="headerlink" title="Java关键时间"></a>Java关键时间</h2><blockquote><ul><li><strong>1991年4月</strong>，由 <strong>James Gosling</strong> 博士领导的<strong>绿色计划Green</strong> 启动 项目目的是开发一种能够在各种消费性电子产品（如机顶盒、冰箱等）上 运行的程序架构 该项目最终的产品是 <strong>Oak（橡树）</strong> ，即Java语言的前身</li><li><strong>1995年5月23日</strong>，<strong>Oak语言改名为Java</strong>，并且在SunWorld大会上正式发布 Java 1.0版本 Java语言第一次提出了<strong>Write Once，Run Anywhere</strong>的口号</li><li><strong>1996年1月23日</strong>，JDK 1.0发布，Java语言有了 第一个正式版本 的运行环境 JDK 1.0提供了一个<strong>纯解释执行的Java虚拟机</strong>实现（Sun Classic VM） JDK 1.0版本的代表技术包括：<strong>Java虚拟机、Applet、AWT</strong>等。</li><li><strong>1997年2月19日</strong>，Sun公司发布了JDK 1.1 Java技术的一些最基础的支撑点（如JDBC等）都是在JDK 1.1版本中发布的Java语法也有了一定的发展，如<strong>内部类和反射</strong></li><li><strong>1999年4月8日</strong>，JDK 1.1在此期间一共发布了1.1.0～1.1.8九个版本 从<strong>1.1.4之后</strong>，每个JDK版本都有一个<strong>自己的名字（工程代号）</strong>例如：JDK 1.1.4 - Sparkler（宝石）、JDK 1.1.5 - Pumpkin（南瓜）</li><li><strong>1998年12月4日</strong>，JDK迎来了里程碑式的版本JDK1.2，代号Playground（竞技 场） Sun公司在这个版本中把Java技术体系拆分为<strong>3个方向</strong>：<ul><li>面向桌面应用开发的J2SE（Java 2 Platform, Standard Edition）</li><li>面向企业级开发的J2EE（Java 2 Platform, Enterprise Edition）</li><li>面向手机移动终端开发的J2ME（Java 2 Platform, Micro Edition）</li></ul></li><li><strong>1999年4月27日</strong>， <strong>HotSpot虚拟机</strong> <ul><li>发布 HotSpot最初由一家名为”Longview Technologies”的小公司开发，因为HotSpot的优异表现，这家公司在1997年被Sun公司收购了 </li><li>HotSpot虚拟机发布时是作为JDK 1.2的附加程序提供的，后来它成为了JDK 1.3及之后所有版本的Sun JDK的默认虚拟机</li></ul></li><li><strong>2004年9月30日</strong>， JDK1.5 发布，代号Tiger（老虎） <ul><li>从JDK 1.2以来，Java在语法层面上的变换一直很小，而JDK1.5在Java语法 易用性上做出了非常大的改进 例如，<strong>自动装箱、泛型、动态注解、枚举、可变长参数、遍历循环 （foreach循环）</strong>等语法特性都是在JDK 1.5中加入的</li></ul></li><li><strong>2006年12月11日</strong>，JDK 1.6发布，代号Mustang（野马） </li><li>在这个版本中，Sun终结了从JDK 1.2开始已经有8年历史的J2EE、J2SE、 J2ME的命名方式 启用 <strong>Java SE 6、Java EE 6、Java ME 6</strong> 的命名方式。</li><li><strong>2006年11月13日</strong>，在JavaOne大会上，Sun公司宣布最终会将Java<strong>开源</strong></li><li><strong>2009年2月19日</strong>，工程代号为Dolphin（海豚）的JDK 1.7完成了其第一个里 程碑版本</li><li><strong>2009年4月20日</strong>，Oracle公司宣布正式以74亿美元的价格收购Sun公司，Java 商标从此正式归Oracle所有</li></ul></blockquote><h2 id="具体版本"><a href="#具体版本" class="headerlink" title="具体版本"></a>具体版本</h2><blockquote><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230721105254095.png" alt="image-20230721105254095"></p></blockquote><h1 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h1><blockquote><p>1998年12月4日，Sun公司在发布的JDK1.2中，将Java技术体系拆分为3个方向 （平台）：</p><ul><li>J2SE （Java 2 Platform， Standard Edition），面向桌面应用开发</li><li>J2ME （Java 2 Platform， Micro Edition），面向手机等移动终端开发</li><li>J2EE （Java 2 Platform， Enterprise Edition），面向企业级开发</li></ul></blockquote><h2 id="Java具体应用"><a href="#Java具体应用" class="headerlink" title="Java具体应用"></a>Java具体应用</h2><blockquote><p>全球超过30亿台各样设备上的应用程序是用Java开发的，耳熟能详的有：</p><ul><li>Adobe PDF 阅读器，Gui开发</li><li>Google、Facebook、Amazon、淘宝、百度、携程等Web网站</li><li>Tomcat、JBoss、WebLogic等Web服务器</li><li>抖音、淘宝、微信等手机APP，使用Android开发组件Android SDK（基于 Java）</li><li>ERP（企业资源规划）CRM（客户资源管理）等企业级应用</li><li>游戏后端，如英雄联盟、吃鸡</li></ul></blockquote><h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><blockquote><ul><li>SDK（software development kit），软件开发包，主要包含函数库或者工具等（安卓）</li><li>JDK（java develoment kit），Java程序开发工具包，面向Java程序的开发者</li><li>JRE（java runtime enviroment），Java程序运行环境，面向Java程序的使用者</li><li>API（application program interface），应用程序编程接口</li><li>API Documentation，API说明文档，描述API中的类、方法等使用的方式</li></ul><blockquote><p><strong>开发人员</strong>需要安装JDK，内部自带一个JRE（程序员用JDK完成开发后，用 JRE测试运行）</p><p><strong>实施人员（部署）</strong>可以安装独立的JRE，用于运行Java程序</p></blockquote></blockquote><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2><blockquote><p>Oracle：<a href="https://www.lzwgxust.top/post/97f5ff5d.html?highlight=windows">windows-jdk版本切换</a></p><p>API在线文档：<a href="https://docs.oracle.com/javase/8/index.html">Home: Java Platform, Standard Edition (Java SE) 8 Release 8 (oracle.com)</a></p><p>JDK8-API文档下载地址：<a href="https://www.oracle.com/java/technologies/javase-jdk8-doc-downloads.html">Java Development Kit 8 Documentation (oracle.com)</a></p></blockquote><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><blockquote><p><a href="https://blog.csdn.net/m0_50217781/article/details/112414571">Linux 安装jdk 两种方法</a></p><p><a href="https://blog.csdn.net/ACE_U_005A/article/details/114840497">WindowsJDK安装</a></p></blockquote><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><blockquote><p>需要配置三个环境变量：JAVA_HOME、PATH、CLASSPATH。<strong>其中PATH必须 配置</strong>，另外两个建议配置。</p><ul><li>JAVA_HOME: 指定JDK安装路径<ul><li><code>JAVA_HOME=E:\Java\jdk1.8.0_45</code></li></ul></li><li>PATH：命令搜素路径，建议使用<code>%JAVA_HOME%</code>引用JAVA_HOME的变量值<ul><li><code>PATH=%JAVA_HOME%\bin</code></li></ul></li><li>CLASSPATH：指定将来要运行或加载的class文件的所在路径。暂时配置为当前路径（也可以不配置，因为默认值就是当前路径）<ul><li><code>CLASSPATH=.</code></li></ul></li></ul></blockquote><h3 id="Linux中的环境配置"><a href="#Linux中的环境配置" class="headerlink" title="Linux中的环境配置"></a>Linux中的环境配置</h3><blockquote><p>使用vi打开 .&#x2F;bashrc 文件进行配置（<strong>用户级别的环境变量</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722124036678.png" alt="image-20230722124036678"></p></blockquote><h2 id="JDK结构"><a href="#JDK结构" class="headerlink" title="JDK结构"></a>JDK结构</h2><blockquote><ul><li>oracle官方文档中提供的JDK结构图：</li></ul><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722124505547.png" alt="image-20230722124505547"></p></blockquote><h2 id="JDK目录"><a href="#JDK目录" class="headerlink" title="JDK目录"></a>JDK目录</h2><blockquote><p>这里以Windows中安装后的目录为例说明：</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722124634038.png" alt="image-20230722124634038"></p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722124906223.png" alt="image-20230722124906223"></p></blockquote><blockquote><p>关于src.zip文件：</p><ul><li>我们将来在代码中，所调用的<strong>JavaSE-api</strong>中的代码，大多数的源码就存在这个压缩包中</li><li>这里面都是java文件，这些java文件编译或生成了class文件，都存在一个jar中，<code>%JAVA_HOME%\jre\lib\rt.jar</code></li><li><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722125545959.png" alt="image-20230722125545959"></li><li>我们的代码在运行时，<strong>JVM会先从这个rt.jar中加载一些我们需要使用的类</strong>，例如String.class、Object.class、System.class等</li></ul></blockquote><blockquote><p>src.zip 和 rt.jar 的关系：</p><p>**sun公司程序员 –&gt; 编写基础的代码 –&gt; <em>.java –&gt; 压缩 –&gt; src.zip –&gt; 编 译 –&gt; <em>.class –&gt; 归档 –&gt; rt.jar</em></em></p></blockquote><h1 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h1><blockquote><p>Java语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点，具体如下：</p><ul><li>更纯粹的面向对象编程，加速开发的过程</li><li><strong>一次编写，到处运行（Write Once, Run any Where）跨平台</strong></li><li>程序员写好Java程序，再将其编译成字节码文件，最后由JVM解释执行</li><li><strong>开源</strong>及强大的生态环境，社区活跃，第三方类库选择丰富</li><li>简单性，学起来简单，用起来更方便（<strong>后仰</strong>）</li><li>强大的API，使得编程变得更加容易快捷，大大降低了程序的开发成本</li><li>安全性，Java的存储分配模型可以有效防御恶意代码攻击</li><li>支持多线程和多任务</li><li>强类型、异常处理、垃圾回收机制等技术，保证了Java的健壮性</li></ul></blockquote><h1 id="跨平台原理"><a href="#跨平台原理" class="headerlink" title="跨平台原理"></a>跨平台原理</h1><blockquote><p>Java属于高级编程语言，高级语言编码运行步骤有：</p><ul><li>编写：指程序员编写源代码，比如HelloWorld.java</li><li>编译：指将源代码文件转化成机器认识的机器语言的过程<code>源代码---&gt;二进制</code></li><li>运行：指通过编译或，让计算机执行编译后指令的过程</li></ul></blockquote><blockquote><p>高级语言的编译方式分为三种：编译型、解释型、混合型</p><ul><li>编译型<ul><li>使用专门的编译器，针对特定平台（操作系统）将某种高级语言源代码 <strong>一次 性”翻译”</strong> 成可以被该平台硬件执行的 机器码 ，并包装成为该平台所能识别 的可执行程序的格式（生成新文件），这个转换过程就是”编译”</li><li>C、C++都属于编译型语言</li></ul></li><li>解释型<ul><li>使用专门的解释器，将源程序<strong>逐行解释</strong>成特定平台的机器码，并立即执行 （不会生成新文件）</li><li>可以理解为，解释型语言相当于把编译型语言里面的<strong>编译和执行合并</strong>到了一 起，同时进行</li><li>优点是跨平台，缺点是效率低</li><li>Python、Shell、Ruby都属于解释型语言</li></ul></li><li>混合型<ul><li>Java语言是<strong>混合型（编译+解释）</strong>的代表</li><li>首先它的源代码需要<strong>编译</strong>，生成与平台无关的字节码（.class）文件 javac</li><li>字节码文件不能直接执行，需要交给操作系统下的Java虚拟机（JVM）<strong>解释 执行</strong></li><li>Java为不同的操作系统提供了不同的JVM虚拟机</li></ul></li></ul></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>使用Java语言编写一份源代码，<strong>不管在什么操作系统</strong>下编译，得到的都是<strong>相同的字节码文件</strong>，在不同的操作系统下使用<strong>不同的JVM解释执行</strong>这份字节码文件， 程序成功运行，将会有相同的运行效果。这就是跨平台的原理， <strong>Write Once， Run any Where ！</strong></p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722151743153.png" alt="image-20230722151743153"></p><p>like this!</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722151635776.png" alt="image-20230722151635776"></p></blockquote><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><blockquote><p>存放在 <code>%JAVA_HOME%bin</code> 下面:</p><ul><li>javac 编译命令<ul><li>格式：<code>javac [-d 目标目录路径] *.java</code></li><li>作用：编译源文件获得字节码文件（存放到-d后目录下），如果不跟-d，则放到当前目录下</li></ul></li><li>java 运行命令<ul><li>格式：<code>java [-cp class文件存储目录] 类的全包名</code></li><li>例如：<code>java -cp bin/ com.lwsj.chap01.HelloWorld</code></li><li>作用：从-cp后面的路径中查找到需要运行的class文件，然后运行</li><li>注意：<code>类的全包名是指包名.类名，不要加.class后缀</code> &#x3D; 全限定名</li></ul></li><li>javadoc<ul><li>生成API文档命令</li></ul></li><li>javap<ul><li>反解析命令，可以解析出class字节码文件的内容</li></ul></li><li>jar<ul><li>打包命令</li></ul></li></ul></blockquote><h1 id="package"><a href="#package" class="headerlink" title="package"></a>package</h1><blockquote><ul><li>package语句必须是程序的第一条可执行的代码</li><li>package语句在一个Java文件中最多只能有一个</li><li>程序可以不用package，表示无包名</li><li>包其实就是文件夹，一般是公司域名倒着写 <a href="http://www.baidu.com/">www.baidu.com</a> 包名为com.baidu.项目名，最后编译生成的class文件，就会放到<code>com/baidu/项目名/</code>目录下</li></ul></blockquote><blockquote><p>JavaSE-API中常用的包有：</p><ul><li>java.lang<ul><li>最常用的一个包，里面的类可以在我们的程序中直接使用，不需要<strong>import导入</strong></li></ul></li><li>java.io<ul><li>用户输入输出流的操作。也就是读数据&#x2F;写数据</li></ul></li><li>java.net<ul><li>用户网络编程。可实现计算机A和B之间建立网络连接进行信息传输</li></ul></li><li>java.util<ul><li>工具类，可以帮我们在我们代码中完成一些辅助的功能，例如表示日期、使用集合存储数据、使用工具类操作数组等</li></ul></li></ul></blockquote><h1 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h1><h2 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h2><blockquote><p>JVM是<strong>Java Virtual Machine</strong>（Java虚拟机）的缩写，它是一个<strong>虚构</strong>出来的<strong>计算机规范结构</strong>，是通过在<strong>实际</strong>的计算机上仿真模拟各种计算机功能来实现的。</p><p>JVM是Java中最核心的一个东西，它在计算机的内存中，虚拟并提供了Java代码可以再其中运行的基础环境。</p></blockquote><blockquote><p>JVM内存管理结构如下：</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722182734788.png" alt="image-20230722182734788"></p><p>和我们程序中关系比较紧密的是<strong>堆区</strong>、<strong>栈区</strong>还有<strong>方法区</strong></p></blockquote><blockquote><p>JVM就是 java 程序 和 操作系统 之间的桥梁：</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722183134877.png" alt="image-20230722183134877"></p></blockquote><blockquote><p>Java代码编译后，计算机并不能直接运行，必须需要经过<strong>JVM进行解释</strong>后再进行运行。</p><p>so，<strong>Java其实并不算是真正的编译语言</strong>。</p></blockquote><blockquote><p><font color="skyblue">注意：JVM本质上是一个规范，每个公司都可以按照这个规范实现自己的JVM虚拟机</font></p><p>现在默认使用的虚拟机是Oracle公司提供的HotSpot</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230722184135515.png" alt="image-20230722184135515"></p></blockquote><blockquote><p>当使用Java命令来运行程序的使用，会先启动JVM，这个JVM在JDK中对应了一个ddl或so文件：</p><ul><li>如果是Windows系统下，这个文件在：<code>%JAVA_HOME%\jre\bin\server\jvm.dll</code></li><li>如果是Linux系统下，这个文件在：<code>$JAVA_HOME$/jre/lib/amd64/server/libjvm.so</code></li></ul><p><font color="skybule">注意：Linux下面的so文件就类似于Windows中的dll文件</font></p></blockquote><h2 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h2><blockquote><p>将编写好J<strong>ava代码编译成class文件</strong>（字节码）后，需要被<strong>JVM加载到内存</strong>中才可以运行，JVM加载时是需要做<strong>字节码验证</strong>的。</p></blockquote><blockquote><p>Java代码编译及运行过程：</p><p><img src="/2023/07/22/01-Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20230822104912848.png" alt="image-20230822104912848"></p><p>加载到内存的途径有很多，可以通过<strong>本地磁盘</strong>也可以通过<strong>网络</strong>（上图是通过 网络）加载。</p></blockquote><blockquote><pre><code>    一个class文件被加载到JVM内存之后，首先要经过字节码验证，验证内容主要包含：- 检查当前class文件的版本和JVM的版本是否兼容- 检查当前代码是否会破坏系统的完整性- 检查当前代码是否有栈溢出的情况- 检查当前代码中的参数类型是否正确- 检查当前代码中的类型转换操作是否正确验证通过后，再确定哪些代码是 **解释执行** 的，哪些代码是 **JIT即时编译执行** 的：- 解释执行 - class文件内容需要交给JVM进行解释执行，简单理解就是**JVM解释一行就执行一行代码**。所以如果Java代码全是这样的运行方式的话，**效率会稍低**一些。- JIT（Just In Time）即时编译 - 执行代码的另一种方式，JVM可以把Java中的 **热点代码** 直接编译成计算机可以运行的二进制指令，这样后续再调用这个热点代码的时候，就可以直接运行编译好的指令，大大提高运行效率。</code></pre></blockquote><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><blockquote><p>在<strong>Java语言</strong>中，编程人员<strong>不需要</strong>在代码中主动的对内存进行申请与释放 （C、C++语言中，程序员需要自己控制）</p></blockquote><blockquote><p>Java代码中，开辟要使用的内存空间，使用<strong>new关键字</strong>即可。</p><p>使用完后，对内存的释放，在JVM中，由垃圾回收器（Garbage Collection，GC）来完成。</p><p><strong>不同类型的GC</strong>，在JVM中，会根据<strong>不同的算法</strong>，对<strong>不同的内存区域</strong>内标记为垃圾的空间，进行回收释放。在这个过程中，<strong>是不需要编程人员干预的，自动完成</strong>。</p><p>JavaSE-API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.System.gc();</span><br><span class="line">java.lang.Runtime.gc();</span><br></pre></td></tr></table></figure><p><font color="skyblue">注意，虽然可以主动通知，但是最后GC并不一定会立刻执行，因为这个垃 圾回收的过程什么时候执行，最终还是要根据GC的具体算法和当前内存的 使用情况来确定。</font></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>百尺竿头立不难，一勤天下无难事。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>①Linux-操作系统-2</title>
      <link href="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/"/>
      <url>/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Linux 服务的基本操作-2</p></blockquote><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> a.txt</span><br><span class="line"><span class="comment"># 当a.txt文件不存在的时候，会创建该文件</span></span><br><span class="line"><span class="comment"># 当a.txt文件存在的时候，会更新文件的修改时间</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> a b c d</span><br></pre></td></tr></table></figure></blockquote><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> teest</span><br><span class="line"><span class="built_in">mkdir</span> test1 test2 test3 <span class="comment"># 创建多个平级目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/test4 <span class="comment"># 在当前用户家路径下创建一个子目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /test1/test2/test3 <span class="comment"># 创建多级子目录，-p表示如果子目录不存在就创建</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> a.txt b.txt</span><br><span class="line"><span class="comment"># 如果b.txt不存在，则自动创建b.txt文件</span></span><br><span class="line"><span class="comment"># 如果b.txt 存在，则自动覆盖b.txt文件内容</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -i a.txt b.txt <span class="comment"># 使用-i进行覆盖提示</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> a.txt b.txt <span class="built_in">test</span> <span class="comment"># 复制多个文件，到一个指定目录</span></span><br><span class="line"><span class="comment"># 复制a.txt b.txt文件到test目录中，要求这些文件和目录都是存在的</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r test1 test2 <span class="comment"># 复制文件夹和它的内容，到另一个文件夹中</span></span><br><span class="line"><span class="comment"># 复制test1文件及其内容到test2目录中</span></span><br><span class="line"><span class="comment"># 如果test2目录不存在，则创建test2并把test1目录中的内容复制进去，不包含test1目录</span></span><br><span class="line"><span class="comment"># 如果test2目录存在，则把整个test1目录及其内容全部复制到test2中，包含test1目录</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r <span class="built_in">test</span>  test4/temp <span class="comment"># 把test目录复制到test4目录中，并且修改目录名字为temp</span></span><br><span class="line"><span class="comment"># 注意，要求test4目录必须是存在的</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> a.txt <span class="built_in">test</span> <span class="comment"># 移动一个文件</span></span><br><span class="line"><span class="comment"># 将a.txt移动到test目录中</span></span><br><span class="line"><span class="comment"># 注意，也可以同时移动多个文件到目录中</span></span><br><span class="line"><span class="built_in">mv</span> a.txt b.txt c.txt <span class="built_in">test</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./test/a.txt . <span class="comment"># 将test目录中的a.txt移动到当前目录</span></span><br><span class="line"><span class="built_in">mv</span> a.txt b.txt <span class="comment"># 修改一个文件的名字,将a.txt改为b.txt</span></span><br><span class="line"><span class="built_in">mv</span> -i a.txt b.txt <span class="comment"># -i参数，覆盖提示</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> dir1 dir2 <span class="comment"># 修改目录的名字 （dir2不存在）</span></span><br><span class="line"><span class="built_in">mv</span> dir1 dir2 <span class="comment"># 将一个目录移动到另一个目录中 （dir2存在）</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> a.txt</span><br><span class="line"><span class="built_in">rm</span> -i a.txt</span><br><span class="line"><span class="built_in">rm</span> a b c d</span><br><span class="line"><span class="built_in">rmdir</span> <span class="built_in">test</span> <span class="comment"># 删除空目录 （非空报错）</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">test</span></span><br><span class="line"><span class="built_in">rm</span> -r -i <span class="built_in">test</span> (or) <span class="built_in">rm</span> -ri <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">rm</span> -r -f <span class="built_in">test</span> (or) <span class="built_in">rm</span> -rf <span class="built_in">test</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><blockquote><blockquote><p>Linux提供了丰富的帮助手册，当需要查看某个命令的参数时，可以使用man 命令。 </p><p><font color="skyblue">man is your friend</font></p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 空格，每次往下翻一个屏幕的内容</span></span><br><span class="line"><span class="comment"># 回车,每次往下翻一行内容</span></span><br><span class="line"><span class="comment"># b,每一次向上翻回一页</span></span><br><span class="line"><span class="comment"># f,每次向下翻一页</span></span><br><span class="line"><span class="comment"># q,退出当前手册界面</span></span><br><span class="line"><span class="comment"># /string,查找指定字符串，例如,/the 就是查找这个单词n,</span></span><br><span class="line"><span class="comment"># 配合/string命令，可以快速调整跳到下一个指定字符串的位置</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><blockquote><ul><li>ifconfig, 查看ip地址</li><li>要求 <ul><li>本机有telnet客户端，可以使用telnet命令</li><li>服务器主机安装了telnet服务器端，并已经开启服务</li><li>本机可以ping通服务器主机的ip地址</li></ul></li><li>使用<ul><li>telnet + ip + [23]</li></ul></li></ul></blockquote><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><h2 id><a href="#" class="headerlink" title="*"></a><code>*</code></h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示通配，可以代表0~n个字符</span></span><br><span class="line"><span class="built_in">ls</span> *.txt</span><br><span class="line"><span class="built_in">rm</span> *.txt</span><br></pre></td></tr></table></figure></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title="?"></a><code>?</code></h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示任意的一个字符（相当于占位符）</span></span><br><span class="line"><span class="built_in">ls</span> a?.txt</span><br></pre></td></tr></table></figure></blockquote><h2 id="-2"><a href="#-2" class="headerlink" title=";"></a><code>;</code></h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示在一行语句中连续执行多个命令，命令之间使用分号进行分割</span></span><br><span class="line"><span class="built_in">cd</span>;<span class="built_in">ls</span>        <span class="comment"># 先cd回到家目录，然后再执行ls命令</span></span><br><span class="line"><span class="built_in">date</span>;cal;<span class="built_in">pwd</span> <span class="comment"># 先显示时间，再显示日历，再显示当前路径</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="和"><a href="#和" class="headerlink" title="&gt; 和 &gt;&gt;"></a><code>&gt; 和 &gt;&gt;</code></h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出重定向符号，将来原本输出到命令行中的内容，重定向输入到另外一个地方。</span></span><br><span class="line"><span class="comment"># &gt; 表示往文件中写入内容，是覆盖操作</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; a <span class="comment"># 把hello写入到a文件中</span></span><br><span class="line"><span class="comment"># a文件如果不存在，则自动创建，a文件如果存在，则覆盖之前的内容</span></span><br><span class="line">cal &gt; a <span class="comment"># cal命令输出的日历写入到a文件中</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt; 表示往文件中写入内容，是追加操作</span></span><br><span class="line"><span class="built_in">date</span> &gt;&gt; a</span><br><span class="line">cal &gt;&gt; a</span><br><span class="line">cal 7 2023 &gt; a</span><br></pre></td></tr></table></figure></blockquote><h2 id="-3"><a href="#-3" class="headerlink" title="|"></a><code>|</code></h2><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道符，可以把第一个命令的结果，交给第二个命令作为参数进行操作</span></span><br><span class="line">cal | lp <span class="comment"># 把当前日历通过打印机进行打印</span></span><br><span class="line"><span class="comment"># 如果当前网络中配置好打印机并连接成功的话，可以打印出日历</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | grep <span class="string">&quot;lwsj&quot;</span></span><br><span class="line"><span class="comment"># grep命令进行对结果进行过滤筛选</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="查看内容"><a href="#查看内容" class="headerlink" title="查看内容"></a>查看内容</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt </span><br><span class="line"><span class="built_in">cat</span> a.txt b.txt &gt; c.txt</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; c.txt <span class="comment"># 把c.txt文件内容，设置为空</span></span><br></pre></td></tr></table></figure><p>Linux系统中，&#x2F;dev&#x2F;null（空设备文件或黑洞文件）是一个特殊的设备文件，所有 写入其中的数据，都会被丢弃的无影无踪，&#x2F;dev&#x2F;null通常被用于丢弃不需要的数 据输出，或作为用于输入流的空文件。这些操作通常由重定向完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /dev/null &gt; a <span class="comment"># 清空a文件</span></span><br><span class="line"><span class="built_in">ls</span> -R &gt; /dev/null <span class="comment"># 将本来要输出的内容直接丢弃不要</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><blockquote><p>more和cat类似，也是查看内容的命令，但more命令可以一点点显示内容，而非一次全显示出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">more /etc/passwd</span><br><span class="line"><span class="comment"># 空格，每次往下翻一个屏幕的内容</span></span><br><span class="line"><span class="comment"># 回车,每次往下翻一行内容</span></span><br><span class="line"><span class="comment"># b,每一次向上翻回一页</span></span><br><span class="line"><span class="comment"># f,每次向下翻一页</span></span><br><span class="line"><span class="comment"># q,退出当前查看内容界面</span></span><br><span class="line"><span class="comment"># v，进入vi模式（只读），在vi模式下，输入:q 则退出vi模块回到more的查看模式</span></span><br><span class="line"><span class="comment"># 在vi模式下，使用/stirng，查找指定字符串，例如，/the 就是查找这个单词</span></span><br><span class="line"><span class="comment"># 在vi模式下，n，配合/string命令，可以快速调整跳到下一个指定字符串的位置</span></span><br><span class="line"><span class="built_in">ls</span> -R | more <span class="comment"># more也经常和管道费 | 搭配使用</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h1><blockquote><p>vi编辑器是所有Unix及Linux系统下标准的编辑器，它相当于windows系统中的记事本一样，它的强大不逊于任何文本编辑器</p></blockquote><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h2><blockquote><ul><li>命令模式：可以使用简单的命令进行文本内容的操作</li><li>命令行模式（低行模式）：可以使用复杂点的命令进行文本内容操作</li><li>编辑模式，可以直接编辑文本内容</li></ul><p>三种模式的转换关系如下：</p><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719175822402.png" alt="image-20230719175822402"></p></blockquote><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote><p>基本指令的作用介绍：</p><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719175950429.png" alt="image-20230719175950429"></p><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719180020841.png" alt="image-20230719180020841"></p></blockquote><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><blockquote><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719180252969.png" alt="image-20230719180252969"></p></blockquote><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><blockquote><p>environment variables </p><p>在操作系统中，可以设置一些环境变量（名字&#x3D;值），将来在执行命令的时候，</p><p>可以从指的环境变量中获取到对应的值，也可以将来在我们写的程序中，通过环境变量的名字获取到这些值。</p></blockquote><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><blockquote><ul><li>临时环境变量<ul><li><code>name=lwsj</code></li><li><code>echo $name</code></li></ul></li><li>用户级别的环境变量<ul><li><code>vi ~/.bashrc</code></li><li><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719181512981.png" alt="image-20230719181512981"></li><li><code>source ~/.bashrc</code></li></ul></li><li>全局的环境变量<ul><li><code>sudo vi /etc/profile</code></li></ul></li></ul><p><strong>建议一般在 <code>~/.bashrc</code>中进行配置即可</strong></p><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719181920975.png" alt="image-20230719181920975"></p><ul><li><p>特殊的环境变量：</p><ul><li><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719182256027.png" alt="image-20230719182256027"></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /bin/ls</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">briup@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line">/usr/bin/ls</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><blockquote><p> <img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719183400040.png" alt="image-20230719183400040"></p></blockquote><blockquote><p>windows系统中，环境变量的意义和作用和Linux中列举出的基本一致。</p><p>windows和Linux区别：</p><ul><li>配置的地方或方式不同</li><li>引用变量的符号不同，windows使用变量名字<strong>两边加<code>%</code><strong>，Linux使用变量名字</strong>左边加<code>$</code></strong></li><li>多个路径之间分割的符号不同，windows使用<strong>分号</strong>，Linux使用<strong>冒号</strong></li><li>windows系统中环境变量名字的<strong>大小写不敏感</strong>，而Linux中大小写是<strong>敏感</strong>的</li></ul></blockquote><h1 id="归档压缩"><a href="#归档压缩" class="headerlink" title="归档压缩"></a>归档压缩</h1><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><blockquote><pre><code> 归档，把若干个文件或目录简单的合并在一起，它并不对文件进行压缩，就是将多个文件前后连接在一起，形成一个大文件。（+额外的信息）</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf work.tar a b c test1 test2 <span class="comment"># 把指定文件和目录进行归档</span></span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719184547469.png" alt="image-20230719184547469"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf work.tar -C dir1 <span class="comment"># 解除归档文件到指定目录中</span></span><br></pre></td></tr></table></figure><p>tar命令常用的选项及其作用：推荐 <code>tar --help</code></p><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719185204769.png" alt="image-20230719185204769"></p></blockquote><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><blockquote><p>压缩，是一种通过特定的算法来减小计算机文件大小的机制，Linux中的文 件压缩命令有多种，其中最常用的命令就是gzip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip work.tar</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719190526195.png" alt="image-20230719190526195"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> work.tar.gz</span><br><span class="line">tar -zcvf work.tar.gz a b c test1 test2</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719190738587.png" alt="image-20230719190738587"></p></blockquote><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip work.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719190901731.png" alt="image-20230719190901731"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf work.tar.gz -C dir2</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2/image-20230719191119162.png" alt="image-20230719191119162"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>书山有路勤为径，学海无涯苦作舟💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础篇-interview-heima</title>
      <link href="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/"/>
      <url>/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：备战秋招ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>逢郎欲语低头笑，碧玉搔头落水中。——白居易《采莲曲》</p></blockquote><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="手写二分查找"><a href="#手写二分查找" class="headerlink" title="手写二分查找"></a>手写二分查找</h2><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716100500003.png" alt="image-20230716100500003"></p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">334</span>, <span class="number">456</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> binarySearch(array, target);</span><br><span class="line">        System.out.println(<span class="string">&quot;idx = &quot;</span> + idx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分查找，找得到返回元素索引，找不到返回-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = array.length - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            mid = l + (r - l) / <span class="number">2</span>; <span class="comment">// 可以避免溢出问题</span></span><br><span class="line">            <span class="comment">// mid = (l + r) &gt;&gt;&gt; 1; // 无符号位右移，效率更高</span></span><br><span class="line">            <span class="keyword">if</span> (array[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &gt; target)</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target)</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mid = l + (r - l) / <span class="number">2</span>; <span class="comment">// 可以避免溢出问题</span></span><br><span class="line">mid = (l + r) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// 无符号位右移，效率更高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&gt;&gt;表示右移，如果该数为正，则高位补0，若为负数，则高位补1；</span></span><br><span class="line"><span class="comment">//&gt;&gt;&gt;表示无符号右移，也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0。</span></span><br></pre></td></tr></table></figure><p>奇技淫巧：</p><ul><li><strong>奇数二分取中间</strong></li><li><strong>偶数二分取中间靠左</strong></li><li>2^n &#x3D; 128 或 128&#x2F;2&#x2F;2 … 直到1</li><li>问题转化为log2(128)&#x3D;log10(128)&#x2F;log10(2)<ul><li>是整数，则该整数即为最终结果</li><li>是小数，则舍去小数部分，整数加一为最终答案</li></ul></li></ul></blockquote><h2 id="二分注意事项"><a href="#二分注意事项" class="headerlink" title="二分注意事项"></a>二分注意事项</h2><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716101842990.png" alt="image-20230716101842990"></p></blockquote><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序（BubbleSort）"><a href="#冒泡排序（BubbleSort）" class="headerlink" title="冒泡排序（BubbleSort）"></a>冒泡排序（BubbleSort）</h2><h3 id="文字版"><a href="#文字版" class="headerlink" title="文字版"></a>文字版</h3><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716103139783.png" alt="image-20230716103139783"></p><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716103318903.png" alt="image-20230716103318903"></p></blockquote><h3 id="代码版"><a href="#代码版" class="headerlink" title="代码版"></a>代码版</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最基本地冒泡排序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 当本次比较没有交换时，表示已完成sort</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;第&quot;</span> + j + <span class="string">&quot;次比较&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                   swap(array, j, j + <span class="number">1</span>);</span><br><span class="line">                   swapped = <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!swapped)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;轮冒泡：&quot;</span> + Arrays.toString(array));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 交换</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">       arr[x] = arr[x] ^ arr[y];</span><br><span class="line">       arr[y] = arr[x] ^ arr[y];</span><br><span class="line">       arr[x] = arr[x] ^ arr[y];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   改进：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 思路：前一次排序好的后面就不再排序了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort2</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length - <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最后一次索引的位置</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次比较&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (array[i] &gt; array[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            swap(array, i, i + <span class="number">1</span>);</span><br><span class="line">            last = i;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       n = last;</span><br><span class="line">       System.out.println(<span class="string">&quot;第&quot;</span> + (++cnt) + <span class="string">&quot;轮冒泡：&quot;</span> + Arrays.toString(array));</span><br><span class="line">  </span><br><span class="line">   &#125; <span class="keyword">while</span> (n != <span class="number">0</span>); <span class="comment">// 当索引位置为0时，表示数组有序</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="选择排序（SelectionSort）"><a href="#选择排序（SelectionSort）" class="headerlink" title="选择排序（SelectionSort）"></a>选择排序（SelectionSort）</h2><h3 id="文字版-1"><a href="#文字版-1" class="headerlink" title="文字版"></a>文字版</h3><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716110424177.png" alt="image-20230716110424177"></p><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716110526620.png" alt="image-20230716110526620"></p><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716112329134.png" alt="image-20230716112329134"></p></blockquote><h3 id="代码版-1"><a href="#代码版-1" class="headerlink" title="代码版"></a>代码版</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化：已经减小了交换次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="comment">// i表示每轮寻找到最小值所存放的目标索引</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">minn</span> <span class="operator">=</span> i;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minn + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (array[minn] &gt; array[j]) &#123;</span><br><span class="line">                minn = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (minn != i) &#123;</span><br><span class="line">               swap(array, minn, i);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(Arrays.toString(array));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 交换 swap</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">       array[i] = array[j];</span><br><span class="line">       array[j] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="插入排序（InsertSort）"><a href="#插入排序（InsertSort）" class="headerlink" title="插入排序（InsertSort）"></a>插入排序（InsertSort）</h2><h3 id="文字版-2"><a href="#文字版-2" class="headerlink" title="文字版"></a>文字版</h3><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716182134828.png" alt="image-20230716182134828"></p><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716182213799.png" alt="image-20230716182213799"></p><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716182312082.png" alt="image-20230716182312082"></p></blockquote><h3 id="代码版-2"><a href="#代码版-2" class="headerlink" title="代码版"></a>代码版</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="comment">// i表示需要插入元素索引的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i]; <span class="comment">// 代表待插入的元素值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; <span class="comment">// 代表已排序区域的元素索引</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; array[j]) &#123;</span><br><span class="line">                array[j+<span class="number">1</span>] = array[j]; <span class="comment">// 直接移动元素</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 退出循环，减少比较次数</span></span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j+<span class="number">1</span>] = t;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="希尔排序（ShellSort）"><a href="#希尔排序（ShellSort）" class="headerlink" title="希尔排序（ShellSort）"></a>希尔排序（ShellSort）</h2><blockquote><p>希尔排序对直接插入排序改进的着眼点： </p><ul><li>若待排序序列中 <strong>元素基本有序</strong> 时，直接插入排序的效率可以大大提高 </li><li>如果待排序序列中 <strong>元素数量较小</strong> 时，直接插入排序效率很高</li></ul><p>希尔排序算法思路： </p><ul><li>将整个待排序序列分割成<strong>若干个子序列</strong>，在<strong>子序列内部</strong>分别进行直接插入排 序，等到整个序列 <strong>基本有序</strong> 时，再对全体成员进行直接插入排序！</li></ul><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230727164346960.png" alt="image-20230727164346960"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改进的插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"> <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"> <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> len / <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// 插入排序</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; len; i++) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[i];</span><br><span class="line">         <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap;</span><br><span class="line">         <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (value &lt; arr[j]) &#123;</span><br><span class="line">                 arr[j + gap] = arr[j];</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             j -= gap;</span><br><span class="line">         &#125;</span><br><span class="line">         arr[j + gap] = value;</span><br><span class="line">     &#125;</span><br><span class="line">     gap /= <span class="number">2</span>;</span><br><span class="line">     System.out.println(Arrays.toString(arr));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="快速排序（QuickSort"><a href="#快速排序（QuickSort" class="headerlink" title="快速排序（QuickSort)"></a>快速排序（QuickSort)</h2><h3 id="文字版-3"><a href="#文字版-3" class="headerlink" title="文字版"></a>文字版</h3><blockquote><p><img src="/2023/07/16/%E5%9F%BA%E7%A1%80%E7%AF%87-interview-heima/image-20230716190806542.png" alt="image-20230716190806542"></p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> main.java.chapter01_foundation.utils.Utils; <span class="comment">// 自定义了一个utils</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">// 单边循环快排（lomuto洛穆托分区方案）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">// partition(array, 0, array.length - 1);</span></span><br><span class="line">        quick(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= h) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(a, l, h); <span class="comment">// p 正确的索引值</span></span><br><span class="line">        quick(a, l, p - <span class="number">1</span>); <span class="comment">// 左边分区</span></span><br><span class="line">        quick(a, p + <span class="number">1</span>, h); <span class="comment">// 右边分区</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pv</span> <span class="operator">=</span> array[h]; <span class="comment">// 基准点元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt; h; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pv &gt; array[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123; <span class="comment">// 小优化</span></span><br><span class="line">                    Utils.swap(array, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h != i) &#123; <span class="comment">// 小优化</span></span><br><span class="line">            Utils.swap(array, h, i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(array) + <span class="string">&quot; i=&quot;</span> + i);</span><br><span class="line">        <span class="comment">// 返回值代表了基准点元素所在的正确索引，用它确定下一轮分区的边界</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股文面试题_heima_contents</title>
      <link href="/2023/07/16/Java%E5%85%AB%E8%82%A1%E6%96%87%E9%9D%A2%E8%AF%95%E9%A2%98-heima-contents/"/>
      <url>/2023/07/16/Java%E5%85%AB%E8%82%A1%E6%96%87%E9%9D%A2%E8%AF%95%E9%A2%98-heima-contents/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：备战ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>磨刀霍霍向猪羊！</p></blockquote><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><blockquote><p>排序Sort算法：<a href="https://www.lzwgxust.top/post/30d7e4ab.html">基础篇-interview-heima</a></p><p>mybatis面试题：<a href="https://www.lzwgxust.top/post/f0d89c14.html">interview-01-mybatis</a></p></blockquote><h1 id="并发篇"><a href="#并发篇" class="headerlink" title="并发篇"></a>并发篇</h1><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><h1 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h1><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>不破楼兰终不还💪。</p></blockquote><div class="bilibili">    <iframe src="//player.bilibili.com/player.html?aid=414817490&bvid=BV1fV41117NX&cid=240950074&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-advanced-learning-week03</title>
      <link href="/2023/07/13/go-advanced-learning-week03/"/>
      <url>/2023/07/13/go-advanced-learning-week03/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>随着Go语言基本语法学习结束，迫切需要对Go进行更深入的学习。</p><p>主要分为三个模块：线程加锁、线程调度、内存管理</p></blockquote><h1 id="线程加锁"><a href="#线程加锁" class="headerlink" title="线程加锁"></a>线程加锁</h1><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><blockquote><ul><li>Go语言不仅仅提供基于CSP的通讯模型，也支持基于共享内存的多线程数据访问</li><li>Sync包提供了锁的基本原语</li><li>sync.Mutex 互斥锁<ul><li>Lock()加锁，Unlock()解锁</li></ul></li><li>sync.RWMutex 读写分离锁<ul><li>不限制并发读，只限制并发写和并发读写</li></ul></li><li>sync.waitGroup<ul><li>等待一组goroutine返回</li></ul></li><li>sync.Once<ul><li>保证某段代码只执行一次</li></ul></li><li>sync.Cond<ul><li>让一组 goroutine 在满足特定条件时被唤醒</li></ul></li></ul></blockquote><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><h2 id="深入理解Go语言线程调度"><a href="#深入理解Go语言线程调度" class="headerlink" title="深入理解Go语言线程调度"></a>深入理解Go语言线程调度</h2><blockquote><ul><li>进程：资源分配的基本单位</li><li>线程：调度的基本单位</li><li>无论是线程还是进程，在<strong>linux中都以task_struct描述</strong>，从内核角度看，与进程<strong>无本质区别</strong></li><li>Glibc中的pthread库提供NPTL（Native POSIX Threading Library)支持</li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230713210412288.png" alt="image-20230713210412288"></p><p>通过图片可以看出：<strong>进程是由一个<code>PID=1</code>不断fork出来的，线程在同一进程中的资源是共享的</strong></p></blockquote><h2 id="Linux进程的内存使用"><a href="#Linux进程的内存使用" class="headerlink" title="Linux进程的内存使用"></a>Linux进程的内存使用</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230713210812348.png" alt="image-20230713210812348"></p></blockquote><h2 id="CPU对内存"><a href="#CPU对内存" class="headerlink" title="CPU对内存"></a>CPU对内存</h2><blockquote><ul><li>CPU 上有个Memory Management Unit(MMU) 单元</li><li>CPU 把虚拟地址给MMU，MMU 去物理内存中查询页表，得到实际的物理地址</li><li>CPU 维护一份缓存Translation Lookaside Buffer(TLB) <strong>缓存虚拟地址和物理地址的映射关系</strong></li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230713214255573.png" alt="image-20230713214255573"></p></blockquote><h2 id="进程切换开销"><a href="#进程切换开销" class="headerlink" title="进程切换开销"></a>进程切换开销</h2><blockquote><ul><li>直接开销<ul><li>切换页表全局目录（PGD）</li><li>切换内核态堆栈</li><li>切换硬件上下文（<strong>进程恢复前，必须装入寄存器的数据统称为硬件上下文</strong>）</li><li>刷新TLB</li><li>系统调度器的代码执行</li></ul></li><li>间接开销<ul><li>CPU 缓存失效导致的进程需要到内存直接访问的IO操作变多</li></ul></li></ul></blockquote><h2 id="线程切花开销"><a href="#线程切花开销" class="headerlink" title="线程切花开销"></a>线程切花开销</h2><blockquote><ul><li>线程本质上只是<strong>一批共享资源的进程</strong>，线程切换本质上<strong>依然需要内核进行进程切换</strong></li><li>一组线程因为共享内存资源，因此一个进程的所有线程共享虚拟地址空间，线程切换相比进程切换，<strong>主要节省了虚拟地址空间的切换。</strong></li></ul></blockquote><h2 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h2><blockquote><p>无需内核帮助，应用程序在用户空间创建的可执行单元，<strong>创建销毁完全在用户态完成</strong></p><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230713220033219.png" alt="image-20230713220033219"></p></blockquote><h2 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h2><blockquote><p>Go 语言基于<code>GMP(=MPG)</code>模型实现用户态线程</p><ul><li>G：表示goroutine, 每个goroutine 都有自己的栈空间，定时器，初始化的栈空间2k左右，空间会随着需求增长。</li><li>M：抽象化代表内核线程，记录内核线程栈信息，当goroutine调度到线程时，使用该goroutine自己的栈信息（相当于把CPU分给了当前的goroutine了）</li><li>P：代表调度器，负责调度goroutine,维护一个本地goroutine队列，<strong>M从P上获得goroutine并执行，同时还负责部分内存的管理。</strong></li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230713220914520.png" alt="image-20230713220914520"></p></blockquote><h2 id="GMP-模型细节"><a href="#GMP-模型细节" class="headerlink" title="GMP 模型细节"></a>GMP 模型细节</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714090946258.png" alt="image-20230714090946258"></p></blockquote><h2 id="G-所处的位置"><a href="#G-所处的位置" class="headerlink" title="G 所处的位置"></a>G 所处的位置</h2><blockquote><ul><li>进程都有一个全局的G队列</li><li>每一个P拥有自己的本地执行队列</li><li>有不在运行队列中的 G<ul><li>处于channel阻塞态的G被放在sudog</li><li>脱离P绑定在M上的G，如系统调用</li><li>为了复用，执行结束进入P的gFree列表中的G（线程池）</li></ul></li></ul></blockquote><h2 id="Goroutine-创建过程"><a href="#Goroutine-创建过程" class="headerlink" title="Goroutine 创建过程"></a>Goroutine 创建过程</h2><blockquote><ul><li>获取或者创建新的Goroutine结构体<ul><li>从处理器的gFree 列表中查找空闲的Goroutine</li><li>如果不存在空闲的Goroutine，会通过runtime.malg 创建一个栈大小足够的新结构体</li></ul></li><li>将函数传入的参数移到Goroutine的栈上</li><li>更新Goroutine 调度相关的 属性，更新状态为_Grunnable</li><li>返回的Goroutine 会存储到全局变量allgs中</li></ul></blockquote><h2 id="将Goroutine放到运行队列上"><a href="#将Goroutine放到运行队列上" class="headerlink" title="将Goroutine放到运行队列上"></a>将Goroutine放到运行队列上</h2><blockquote><ul><li>Goroutine设置到处理器的runnext作为下一个处理器执行的任务（分配CPU）</li><li>当处理器的本地运行队列已经没有剩余空间时，就会把本地队列中的一部分Goroutine和待加入的Goroutine通过runtime.runqputslow添加到调度器持有的全局运行队列上。</li></ul></blockquote><h2 id="调度器行为"><a href="#调度器行为" class="headerlink" title="调度器行为"></a>调度器行为</h2><blockquote><ul><li>为了保证公平，当全局运行队列中有待执行的Goroutine时，通过schedtick保证有一定几率会从全局的运行队列中查找对应的Goroutine</li><li>从处理器本地的运行队列中查找待执行的Goroutine</li><li>如果前两种方法都没有找到Goroutine，会通过runtime.findrunnable进行阻塞地查找Goroutine<ul><li>从<strong>本地运行队列、全局运行队列</strong>中查找</li><li>从<strong>网络轮询器</strong>中查找是否有Goroutine等待运行</li><li>通过runtime.runqsteal 尝试从其他随机的处理器中窃取待运行的Goroutine</li></ul></li></ul></blockquote><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="关于内存管理的争论"><a href="#关于内存管理的争论" class="headerlink" title="关于内存管理的争论"></a>关于内存管理的争论</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714094713609.png" alt="image-20230714094713609"></p></blockquote><h2 id="堆内存管理"><a href="#堆内存管理" class="headerlink" title="堆内存管理"></a>堆内存管理</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714095304883.png" alt="image-20230714095304883"></p></blockquote><blockquote><ul><li>初始化<strong>连续内存块</strong>作为堆</li><li>有内存申请的时候，Allocator从堆内存的<strong>未分配区域分割小内存块</strong></li><li>用<strong>链表</strong>将已分配内存连接起来</li><li>需要信息描述每个内存块的元数据：<strong>大小，是否使用，下一个内存块的地址</strong>等</li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714100620993.png" alt="image-20230714100620993"></p></blockquote><h2 id="TCMalloc-概览"><a href="#TCMalloc-概览" class="headerlink" title="TCMalloc 概览"></a>TCMalloc 概览</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714102008494.png" alt="image-20230714102008494"></p><ul><li>page：内存页，一块<strong>8K</strong>大小的内存空间。<strong>Go与操作系统之间的内存申请和释放，都是以page为单位的</strong></li><li>span：内存块，<strong>一个或多个连续的page组成一个span</strong></li><li>sizeclass：空间规格，每个span都带有一个sizeclass，<strong>标记着该span中的page应该如何使用</strong></li><li>object：对象，用来存储一个变量数据内存空间，一个span在初始化时，会被切割成一堆等大的object；假设object的大小是16B，span大小是8K，那么就会把span中的page就会被初始化8K&#x2F;16B &#x3D; 512个object。<strong>所谓内存分配，就是分配一个object出去。</strong></li></ul></blockquote><h2 id="Go语言内存分配"><a href="#Go语言内存分配" class="headerlink" title="Go语言内存分配"></a>Go语言内存分配</h2><blockquote><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714105152109.png" alt="image-20230714105152109"></p><ul><li>mcache：小对象的内存分配直接走<ul><li><strong>size class 从1到66，每个class两个span</strong></li><li><strong>Span 大小是8KB，按span class 大小切分</strong></li></ul></li><li>mcentral<ul><li>Span内的所有内存块都被占用时，没有剩余空间继续分配对象，mcache会向mcentral申请1个span，mcache拿到span后继续分配对象</li><li>当mcentral向mcache提供span时，如果没有符合条件的span，mcentral会向mheap申请span</li></ul></li><li>mheap<ul><li>当mheap没有足够的内存时，mheap会向<strong>OS申请内存</strong></li><li>Mheap把Span组织成了树结构，而不是链表</li><li>然后把Span分配到heapArena进行管理，它包含<strong>地址映射和span是否包含指针等位图</strong><ul><li><strong>为了更高效的分配、回收和再利用内存</strong></li></ul></li></ul></li></ul></blockquote><h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><blockquote><p>内存回收 不同语言使用的算法是不一样的~</p><ul><li>引用计数（Python，PHP，Swift）<ul><li>对每一个对象维护一个引用计数，当引用该对象的对象被销毁的时候，引用计数减1，当引用计数为0的时候，回收该对象（if count&#x3D;&#x3D; 0 回收）</li><li><strong>优点：</strong>对象可以很快的被回收，不会出现内存耗尽或达到某个阈值时才回收</li><li><strong>缺点：</strong>不能很好的处理循环引用，而且实时维护引用计数，也有一定的代价</li></ul></li><li>标记-清除（Golang）<ul><li><strong>从根变量开始遍历所有引用的对象，引用的对象标记为“被引用”，没有被标记的进行回收</strong></li><li>优点：解决引用计数的缺点</li><li>缺点：需要STW（stop the world），即要暂停程序运行</li></ul></li><li>分代收集（Java）<ul><li>按照生命周期进行划分不同的代空间，生命周期长的放入老年代，短的放入新生代，新生代的回收频率高于老年代的频率</li></ul></li></ul></blockquote><h2 id="mspan"><a href="#mspan" class="headerlink" title="mspan"></a>mspan</h2><blockquote><p><code>mspan</code> 是分配内存时的基本单元（machine）</p><ul><li>allocBits<ul><li>记录了<strong>每块内存分配的情况</strong></li></ul></li><li>gcmarkBits<ul><li>记录了<strong>每块内存的引用情况</strong>，标记阶段对每块内存进行标记，有对象引用的内存标记为1，没有标记为0</li></ul></li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714112359263.png" alt="image-20230714112359263"></p></blockquote><blockquote><ul><li>这两个位图的<strong>数据结构是完全一致</strong>的，标记结束则进行内存回收，<strong>回收的时候，将allocbits指向gcmarkBits</strong>, <strong>标记过的则存在，未进行标记的则进行回收</strong>。</li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714113709971.png" alt="image-20230714113709971"></p></blockquote><h2 id="GC-工作流程"><a href="#GC-工作流程" class="headerlink" title="GC 工作流程"></a>GC 工作流程</h2><blockquote><p> Golang <strong>GC的大部分处理是和用户代码并行的</strong></p><ul><li>Mark：</li><li>Mark Prepare：初始化GC任务，包括开启写屏障（write barrier）和辅助GC（mutator assist），统计root对象的任务数量等。这个过程需要STW</li><li>GC Drains：扫描所有root对象，包括全局指针和goroutine（G）栈上的指针（扫描对应G栈时需停止该G），将其加入标记队列（灰色队列），并循环处理灰色队列的对象，知道灰色队列为空。该过程后台并行执行</li><li>Mark Termination：完成标记工作，重新扫描（re-scan）全局指针和栈。因为Mark和用户程序并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan再检查一下，这个过程也是会STW的</li><li>Sweep：按照标记结果回收所有的白色对象，该过程后台并行执行</li><li>Sweep Termination：对未清扫的span进行清扫，只有上一轮的GC的清扫工作完成才可以开始新一轮的GC</li></ul><p> <img src="/2023/07/13/go-advanced-learning-week03/image-20230714183547422.png" alt="image-20230714183547422"></p></blockquote><h2 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h2><blockquote><ul><li>GC开始时，认为所有object都是白色，即垃圾</li><li>从root区开始遍历，被触达的object置成灰色</li><li>遍历所有灰色object，将他们内部的引用变量置成灰色，自身置成黑色</li><li>循环第3步，直到没有灰色object了，只剩下了黑白两种，白色都是垃圾</li><li>对于<strong>黑色object</strong>，<strong>如果在标记期间发生了写操作，写屏障会在真正赋值前将新对象标记为灰色</strong></li><li><strong>标记过程中，mallocgc新分配的object，会先被标记成黑色再返回</strong></li></ul><p><img src="/2023/07/13/go-advanced-learning-week03/image-20230714184622181.png" alt="image-20230714184622181"></p></blockquote><h2 id="垃圾回收触发机制"><a href="#垃圾回收触发机制" class="headerlink" title="垃圾回收触发机制"></a>垃圾回收触发机制</h2><blockquote><ul><li>内存分配量达到<strong>阈值</strong>触发GC<ul><li>每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值则<strong>立即启动</strong>GC。</li><li><strong><code>阈值 = 上次GC内存分配量 * 内存增长率</code></strong></li><li>内存增长率由环境变量<strong>GOGC</strong>控制，默认为<strong>100</strong>，即每当<strong>内存扩大一倍</strong>时启动GC。</li></ul></li><li>定期触发GC<ul><li><strong>默认情况下，最长2分钟触发一次GC</strong>，这个间隔在<strong>src&#x2F;runtime&#x2F;proc.go:forcegcperiod</strong>变量中被声明</li></ul></li><li>手动触发<ul><li>程序代码中也可以使用**runtime.GC()**来手动触发GC。这主要用于GC性能测试和统计</li></ul></li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉第三周golang的进阶学习到这里就结束啦</p><p>期待下周的学习，我们下周见 拜拜咯~~💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm-最近公共祖先-LCA</title>
      <link href="/2023/07/13/algorithm-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88-LCA/"/>
      <url>/2023/07/13/algorithm-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88-LCA/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><strong>最近公共祖先（Least Common Ancestors, LCA）</strong></p><p>参考博文：</p><ul><li><a href="https://www.sohu.com/a/610630872_453160">算法竞赛专题解析│LCA</a></li><li><a href="https://blog.csdn.net/xuechen_gemgirl/article/details/77582917">(239条消息) 图解树上倍增法求LCA_cnnf的博客-CSDN博客</a></li></ul><p>洛谷题址：<a href="https://www.luogu.com.cn/problem/P3379">P3379 【模板】最近公共祖先（LCA</a></p></blockquote><h2 id="树上的倍增"><a href="#树上的倍增" class="headerlink" title="树上的倍增"></a>树上的倍增</h2><blockquote><p>推导公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d[u]; i++)</span><br><span class="line">    p[u][i] = p[p[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>AcCode</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by luozongwei on 2023/7/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500000</span> + <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//head数组就是链接表标配了吧？d存的是深度（deep）,p[i][j]存的[i]向上走2的j次方那么长的路径</span></span><br><span class="line"><span class="type">int</span> head[maxn], d[maxn], p[maxn][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, next;</span><br><span class="line">&#125; e[maxn * <span class="number">2</span>];<span class="comment">//存树</span></span><br><span class="line"><span class="comment">//加边函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[k].v = v;</span><br><span class="line">    e[k].next = head[u];</span><br><span class="line">    head[u] = k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先进行的预处理，将所有点的deep和p的初始值dfs出来</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    d[u] = d[fa] + <span class="number">1</span>;</span><br><span class="line">    p[u][<span class="number">0</span>] = fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d[u]; i++)</span><br><span class="line">        p[u][i] = p[p[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v != fa)</span><br><span class="line">            <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非常标准的lca查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保证a是在b结点上方，即a的深度小于b的深度</span></span><br><span class="line">    <span class="keyword">if</span> (d[a] &gt; d[b])</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="comment">//先把b移到和a同一个深度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[a] &lt;= d[b] - (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">            b = p[b][i];</span><br><span class="line">    <span class="comment">//特判，如果b上来和就和a一样了，那就可以直接返回答案了</span></span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[a][i] == p[b][i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a = p[a][i], b = p[b][i];           <span class="comment">//A和B一起上移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[a][<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 找出最后a值的数字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="built_in">add</span>(b, a);  <span class="comment">//无向图，要加两次                    </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">lca</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>果然算法还是太难了，呜呜呜~~💦💦💦。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的记账网站</title>
      <link href="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/"/>
      <url>/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p> ✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br> 🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br> ☀️博文主更方向为：分享自己的快乐<br> ❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br> 💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>人生迈向成长的一步，对于自己的money更细致的了解</p><p>那么<strong>简账</strong>是你一个不错的选择！！</p></blockquote><h1 id="🍙🍙🍙简账"><a href="#🍙🍙🍙简账" class="headerlink" title="🍙🍙🍙简账"></a>🍙🍙🍙简账</h1><blockquote><p>一个开源项目：<a href="https://juejin.cn/post/6956784053974466573">简账(开源记账软件)-功能介绍 - 掘金 (juejin.cn)</a></p><p>pc端和小程序端同步</p></blockquote><h2 id="🍚🍚pc端"><a href="#🍚🍚pc端" class="headerlink" title="🍚🍚pc端"></a>🍚🍚pc端</h2><blockquote><ul><li>登录页</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711220333369.png" alt="image-20230711220333369"></p><ul><li>首页</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711220447600.png" alt="image-20230711220447600"></p><ul><li><p>账单</p><ul><li>记一笔</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711220602331.png" alt="image-20230711220602331"></p><ul><li>月账本</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711220935934.png" alt="image-20230711220935934"></p></li><li><p>记账维护</p><ul><li>账户资本</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711221142588.png" alt="image-20230711221142588"></p><ul><li>账本维护</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230711221400364.png" alt="image-20230711221400364"></p></li></ul></blockquote><h2 id="🍛🍛小程序"><a href="#🍛🍛小程序" class="headerlink" title="🍛🍛小程序"></a>🍛🍛小程序</h2><blockquote><ul><li>明细</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230712081219103.png" alt="image-20230712081219103"></p><ul><li>图表</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230712081321067.png" alt="image-20230712081321067"></p><ul><li>记账</li></ul><p><img src="/2023/07/11/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%B0%E8%B4%A6%E7%BD%91%E7%AB%99/image-20230712081406448.png" alt="image-20230712081406448"></p></blockquote><blockquote><p>这段jp3的经历，让我领悟到了何为<strong>花钱如流水</strong>。</p><p>更使我深刻认识到，必须深入了解自己的财富流向，哪些领域花费最为巨大，又有哪些领域可节省。</p><p>使每一笔金钱都能投入有价值之中！</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>①Linux-操作系统</title>
      <link href="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐 briup-jp3-ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Linux 服务的基本操作</p></blockquote><h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><blockquote><p><a href="https://zh.wikipedia.org/wiki/Linux">Linux - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><strong>Linux系统内核+GNU系统套件 &#x3D; 各种 版本的Linux操作系统</strong></p></blockquote><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><blockquote><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718084521629.png" alt="image-20230718084521629"></p><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718084634235.png" alt="image-20230718084634235"></p></blockquote><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><blockquote><p>一个Linux操作系统，由是哪个重要的部分组成。内核、Shell、文件系统</p><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718085304546.png" alt="image-20230718085304546"></p><ul><li>Kernel<ul><li>内核，管理硬件设备、内存、进程、交互空间、文件系统、系统程序等。</li></ul></li><li>Shell<ul><li>Shell是<strong>用户和kernel之间的接口</strong>，它也是一个<strong>命令解释器</strong>，当用户在linux界 面发出一个指令时，命令先传到shell，然后在将这个指令翻译成计算机可 以识别的二进制语言，然后传给计算机内核，告诉他要做什么事情。计算机内核将结果返还给shell，shell翻译成人所熟悉的语言，将结果展示出来</li><li><code>指令--&gt;shell--&gt;二进制--&gt;内核--&gt;result to shell--&gt; show result</code></li></ul></li></ul></blockquote><h2 id="常见的几种Shell"><a href="#常见的几种Shell" class="headerlink" title="常见的几种Shell"></a>常见的几种Shell</h2><blockquote><ul><li>Bourne shell (sh)<ul><li>是一个快捷方式，已经被&#x2F;bin&#x2F;bash所取代</li></ul></li><li>Korn shell (ksh)<ul><li>语法与Bourne shell 相同，同时具备了C shell 的易用特点</li></ul></li><li>C shell (csh)<ul><li>使用的是”类C“语法，csh是具有C语言风格的使用shell</li></ul></li><li>Bourne-again shell (bash)<ul><li>大多数Linux系统默认使用的Shell,是Bourne shell的一个免费版本，它是最早的Unix Shell</li></ul></li></ul><p></p></blockquote><blockquote><p><strong>默认普通用户会显示$符号，root账号会显示#符号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看用户默认使用的shell， <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">briup@ubuntu:~$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看用户当前使用的shell， ps</span><br><span class="line">briup@ubuntu:~$ ps</span><br><span class="line">    PID TTY          TIME CMD</span><br><span class="line">   3519 pts/0    00:00:00 bash</span><br><span class="line">   3534 pts/0    00:00:00 ps</span><br><span class="line">   PID 进程编号，TTY 与进程关联的终端，TIME 进程使用的总cpu时间，CMD 正在执行的命令行命令</span><br></pre></td></tr></table></figure></blockquote><h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><blockquote><p><strong>不同的Linux系统或者同一系统的不同版本，文件系统的目录结果可能 会有所区别，但基本属于大同小异</strong></p><p>Solaris系统的目录结构：</p><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718105639168.png" alt="image-20230718105639168"></p></blockquote><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line"><span class="built_in">cat</span> /hello.txt   <span class="comment"># (&quot;/&quot;)根目录 </span></span><br><span class="line"><span class="comment"># 相对路径</span></span><br><span class="line"><span class="built_in">cat</span> ./hello.txt  <span class="comment"># (&quot;./&quot;)当前目录</span></span><br><span class="line"><span class="built_in">cat</span> ../hello.txt <span class="comment"># (&quot;../&quot;)父级目录</span></span><br></pre></td></tr></table></figure><p>注意，这里的cat是查看文件内容的一个命令</p></blockquote><h1 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h1><blockquote><ul><li><p>普通用户修改密码 ：</p><ul><li>passwd</li></ul></li><li><p>设置root（超级用户）用户密码：</p><ul><li>sudo passwd root</li></ul></li></ul><p><strong>sudo，命令表示临时使用最高权限（root账号权限）进行操作</strong></p><ul><li>当前用户，切换到root用户：</li></ul><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718140143939.png" alt="image-20230718140143939"></p><p><strong>注意，普通用户和root用户的命令提示符有所不同</strong></p></blockquote><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><blockquote><ul><li>创建一个新的用户swift，家目录为&#x2F;home&#x2F;swift，用户登录后使用bash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -mk /home/swift -s /bin/bash swift</span><br></pre></td></tr></table></figure><ul><li>给新建对的swift用户设置密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd swift</span><br></pre></td></tr></table></figure><ul><li>切换到swift用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su swift 或者 su - swift</span><br></pre></td></tr></table></figure><ul><li>使用sudo命令测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swift@ubuntu:~$ sudo clear</span><br><span class="line">[sudo] swift 的密码： </span><br><span class="line">swift 不在 sudoers 文件中。此事将被报告。</span><br><span class="line">swift@ubuntu:~$ </span><br></pre></td></tr></table></figure><p><strong>是因为swift用户不在sudo这个用户组中，所以无法使用sudo命令</strong></p><ul><li>id 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swift@ubuntu:~$ <span class="built_in">id</span></span><br><span class="line">用户<span class="built_in">id</span>=1003(swift) 组<span class="built_in">id</span>=1003(swift) 组=1003(swift)</span><br><span class="line">swift@ubuntu:~$ </span><br></pre></td></tr></table></figure><ul><li>切换到briup账号，使用sudo命令，将用户swift添加到sudo组中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a swift sudo</span><br></pre></td></tr></table></figure><p><strong>注意，切换到root用户也可以直接操作</strong></p><ul><li>切换到swift用户，查看是否已经在sudo组中，并且测试sudo命令是否可用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swift@ubuntu:/home/briup$ <span class="built_in">id</span></span><br><span class="line">用户<span class="built_in">id</span>=1003(swift) 组<span class="built_in">id</span>=1003(swift) 组=1003(swift),27(sudo)</span><br></pre></td></tr></table></figure><ul><li>切换到briup用户，使用sudo命令，将swift用户从sudo组中删除</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swift@ubuntu:/home/briup$ su briup</span><br><span class="line">密码： </span><br><span class="line">briup@ubuntu:~$ sudo gpasswd -d swift sudo</span><br><span class="line">正在将用户“swift”从“sudo”组中删除</span><br></pre></td></tr></table></figure><ul><li>使用sudo命令，删除swift用户，并删除swift用户对于的家目录 &#x2F;home&#x2F;swift，并 且是强制删除</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">briup@ubuntu:~$ sudo userdel -rf swift</span><br><span class="line">userdel: user swift is currently used by process 5358</span><br><span class="line">userdel: swift 邮件池 (/var/mail/swift) 未找到</span><br><span class="line">briup@ubuntu:~$ <span class="built_in">id</span> swift</span><br><span class="line"><span class="built_in">id</span>: “swift”：无此用户</span><br></pre></td></tr></table></figure><p><strong>注意：千万不要频繁使用 -rf 频繁删除东西啊啊啊~害怕</strong></p></blockquote><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><blockquote><p>命令格式：Command [option(s)] [argument[s]]</p><ul><li>command：命令关键字</li><li>options：可以有多个选项</li><li>arguments：可以有多个参数</li></ul><p>例如：显示a.txt的内容，并且显示行号 </p><ul><li>cat -n a.txt</li></ul></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><ul><li><strong>中间用空格隔开</strong></li><li><strong>单行命令一般不超过256个字符</strong></li><li><strong>大小写敏感</strong></li></ul></blockquote><h2 id="常用的几个命令："><a href="#常用的几个命令：" class="headerlink" title="常用的几个命令："></a>常用的几个命令：</h2><blockquote><ul><li>clear 清屏</li><li>pwd 显示当前工作目录</li><li>cd 切换目录</li><li>ls 显示当前目录下的内容列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a //显示隐藏文件和隐藏目录，也就是以点（.）开头的文件和目录</span><br><span class="line"><span class="built_in">ls</span> -R //递归显示目录中的内容</span><br><span class="line"><span class="built_in">ls</span> -t //显示目录中的内容列表，并使用时间排序，默认是按着名字排序</span><br><span class="line"><span class="built_in">ls</span> -l //显示详细信息</span><br><span class="line"><span class="built_in">ls</span> -a -l //这些参数可以多个一起使用</span><br><span class="line"><span class="built_in">ls</span> -al //参数可以分开也可以合在一起写</span><br><span class="line"><span class="built_in">ls</span> -F //显示文件的类型，目录/ 可执行文件* 普通文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r-- 1 briup briup 199 7月 16 12:16 a.txt</span><br><span class="line">从左到右</span><br><span class="line">- 文件类型，普通文件是- 目录是d 链接文件是l 块设备</span><br><span class="line">文件是b 字符设备文件是c</span><br><span class="line">命令管道文件是p sock文件是s</span><br><span class="line">rw-rw-r-- 权限设置，这里是分三组，分别为拥有者权限、同组人权</span><br><span class="line">限、其他人权限</span><br><span class="line">1 链接号</span><br><span class="line">briup 拥有者</span><br><span class="line">briup 拥有组</span><br><span class="line">199 文件大小</span><br><span class="line">7月 16 12:16 最后修改时间</span><br><span class="line">a.txt 文件名字</span><br></pre></td></tr></table></figure><ul><li><code>ls -F</code></li></ul><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718144318083.png" alt="image-20230718144318083"></p></blockquote><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><blockquote><p>使用ls -l 命令，可以查看文件或目录的相关权限</p><ul><li><code>ls -l 或者 ll</code></li></ul><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718144857332.png" alt="image-20230718144857332"></p><ul><li>截屏中标注的部分就是当前b.txt文件针对用户的权限。<ul><li>r  读权限</li><li>w 写权限，对目录来说，可生成文件与子目录或删除文件与子目录</li><li>x  执行权限，对目录来说，可查找该目录下内容</li><li><code>-</code> 表示没有任何权限</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rw- r-- ---</span><br><span class="line">rw- 表示当前文件对拥有者的权限</span><br><span class="line">r-- 表示当前文件对同组人的权限</span><br><span class="line">--- 表示当前文件对其他人的权限</span><br></pre></td></tr></table></figure><ul><li>在添加或者删除某个权限的时候：<ul><li>u 表示拥有者</li><li>g 表示同组人</li><li>o 表示其他人</li><li>a 表示所有人</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x b.txt</span><br><span class="line"><span class="built_in">chmod</span> 777 b.txt</span><br></pre></td></tr></table></figure><p><strong>也可以是数字来表示权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 x 执行权限 十进制数字 1</span><br><span class="line">0000 0010 w 写权限 十进制数字 2</span><br><span class="line">0000 0100 r 读权限 十进制数字 4</span><br><span class="line">在这种情况下，任意权限组合相加得出的数字结果，都是唯一。</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7 = 1+2+4 即 二进制 111</span></span><br><span class="line"><span class="built_in">chmod</span> 777 b.txt</span><br></pre></td></tr></table></figure><p><img src="/2023/07/11/%E2%91%A0Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230718145634301.png" alt="image-20230718145634301"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>书山有路勤为径，学海无涯苦作舟💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jp3-java-growth-process</title>
      <link href="/2023/07/11/jp3-java-growth-process/"/>
      <url>/2023/07/11/jp3-java-growth-process/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：楚门的世界 - 一个热爱学习和运动的程序猿<br>☀️博文主更方向为：jp3-fighting<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><p>经过再三决定，从头开始。</p><p>愿不在迷失自己，不在否定自己。</p></blockquote><h1 id="利器篇"><a href="#利器篇" class="headerlink" title="利器篇"></a>利器篇</h1><blockquote><p>欲练Java这门功夫，必须先利器。</p><p><a href="https://www.lzwgxust.top/post/a52e3c9e.html">ecplise轻松上手无忧版</a></p><p><a href="https://www.lzwgxust.top/post/8b18ee2.html">idea轻松上手无忧版</a></p><p><a href="https://www.lzwgxust.top/post/4fa26902.html">navicat轻松上手无忧版</a></p><p><a href="https://www.lzwgxust.top/post/d36fddee.html">cpolar简易实现内网穿透</a></p></blockquote><h1 id="内功篇"><a href="#内功篇" class="headerlink" title="内功篇"></a>内功篇</h1><blockquote><p>内功修身，刚柔并进。</p><p>expand-01-深入Java虚拟机（未完成）：<a href="https://www.lzwgxust.top/post/36aef600.html">expand-01-深入Java虚拟机</a></p><p>expend-02-jdk8新特性：<a href="https://www.lzwgxust.top/post/cea26ace.html">expend-02-jdk8新特性</a></p><p>expand-03-深入jdk源码（ing）：<a href="https://www.lzwgxust.top/post/7657946b.html">expand-03-深入jdk源码</a></p><p>epxand-04-JUC（ing）：<a href="https://www.lzwgxust.top/post/64bc2f62.html">expand-04-JUC深入并发编程 </a></p><p>expand-05-MySQL调优（未完成 no start）：</p><p>expand-99-23种设计模式（ing）：<a href="https://www.lzwgxust.top/post/1ac89767.html">expand-99-23种设计模式</a></p><p>mybatis源码分析（未完成 no start）：</p><p>ex-SpringMVC流程分析（第一次看源码哈哈）：<a href="https://www.lzwgxust.top/post/78e2411d.html">ex-SpringMVC流程分析</a></p></blockquote><h1 id="模板篇"><a href="#模板篇" class="headerlink" title="模板篇"></a>模板篇</h1><blockquote><p>灵机一动！一个字抄！yes</p><p>云服务：<a href="https://www.lzwgxust.top/post/ce132ebe.html">template-01-各类云服务 </a></p></blockquote><h1 id="一、🏭🏭🏭核心Java基础"><a href="#一、🏭🏭🏭核心Java基础" class="headerlink" title="一、🏭🏭🏭核心Java基础"></a>一、🏭🏭🏭核心Java基础</h1><blockquote><ul><li>Linux服务的基本操作</li><li>Java基础编程，熟练Java开发语法和规则，养成良好编程习惯</li><li>Java高级编程，灵活运用反射，线程，IO和网络等进行编程</li><li>掌握常用数据结构，并灵活运用</li><li>熟练使用企业级开发工具Eclipse和IDEA</li><li>Java中涉及的常用工具类，灵活运用，并知晓其原理</li></ul></blockquote><h2 id="①🏯🏯Linux-操作系统"><a href="#①🏯🏯Linux-操作系统" class="headerlink" title="①🏯🏯Linux 操作系统"></a>①🏯🏯Linux 操作系统</h2><blockquote><p><a href="https://www.lzwgxust.top/post/b85a1fee.html">①Linux-操作系统</a></p><p><a href="https://www.lzwgxust.top/post/e4d1725d.html">①Linux-操作系统-2</a></p><p><a href="https://www.lzwgxust.top/post/93d642cb.html">①Linux-操作系统-3</a></p></blockquote><h2 id="②🏰🏰Java-基础编程"><a href="#②🏰🏰Java-基础编程" class="headerlink" title="②🏰🏰Java 基础编程"></a>②🏰🏰Java 基础编程</h2><blockquote><p><a href="https://www.lzwgxust.top/post/190b6531.html">01-Java基础入门</a></p><p><a href="https://www.lzwgxust.top/post/8bf42cbe.html">02-标示符-关键字-变量</a></p><p><a href="https://www.lzwgxust.top/post/72924d5c.html">03-操作符-流程控制-方法</a></p><p><a href="https://www.lzwgxust.top/post/e21539ad.html">04-数组</a></p><p><a href="https://www.lzwgxust.top/post/a7b622d7.html">05-面向对象基础</a></p><p><a href="https://www.lzwgxust.top/post/db2adb86.html">06-static-继承-重写-多态</a></p><p><a href="https://www.lzwgxust.top/post/24340ded.html">07-抽象-接口-内部类-枚举</a></p><p><a href="https://www.lzwgxust.top/post/cede7098.html">08-1-集合</a></p><p><a href="https://www.lzwgxust.top/post/59864f97.html">08-2-泛型-注解</a></p><p><a href="https://www.lzwgxust.top/post/6eb1d8a7.html">09-异常</a></p></blockquote><h2 id="③💒💒Java-高级编程"><a href="#③💒💒Java-高级编程" class="headerlink" title="③💒💒Java 高级编程"></a>③💒💒Java 高级编程</h2><blockquote><p><a href="https://www.lzwgxust.top/post/d7b0b4f7.html">10-多线程</a></p><p><a href="https://www.lzwgxust.top/post/a9757ddf.html">11-File-IO流</a></p><p><a href="https://www.lzwgxust.top/post/91f908d8.html">12-网络编程</a></p><p><a href="https://www.lzwgxust.top/post/24d8961c.html">13-类加载-反射</a></p></blockquote><h2 id="④🗼🗼项目管理及编程规范"><a href="#④🗼🗼项目管理及编程规范" class="headerlink" title="④🗼🗼项目管理及编程规范"></a>④🗼🗼项目管理及编程规范</h2><h2 id="⑤🗽🗽Web-服务器项目"><a href="#⑤🗽🗽Web-服务器项目" class="headerlink" title="⑤🗽🗽Web 服务器项目"></a>⑤🗽🗽Web 服务器项目</h2><h1 id="二、⛪⛪⛪数据持久化"><a href="#二、⛪⛪⛪数据持久化" class="headerlink" title="二、⛪⛪⛪数据持久化"></a>二、⛪⛪⛪数据持久化</h1><blockquote><ul><li>XML基本语法，XML文件的DTD验证和解析</li><li>Mysql数据库的使用及数据库分析及设计实践</li><li>Jdbc的使用，封装，数据连接池技术</li><li>了解项目编程规范，养成良好编程习惯</li><li>掌握团队协作工具SVN及GIT的使用</li><li>掌握项目管理工具Maven的使用</li><li>面向对象分析和设计，常用设计模式的使用</li></ul></blockquote><h2 id="⑥🕌🕌XML-编程"><a href="#⑥🕌🕌XML-编程" class="headerlink" title="⑥🕌🕌XML 编程"></a>⑥🕌🕌XML 编程</h2><h2 id="⑦🛕🛕Mysql-数据库"><a href="#⑦🛕🛕Mysql-数据库" class="headerlink" title="⑦🛕🛕Mysql 数据库"></a>⑦🛕🛕Mysql 数据库</h2><blockquote><p><a href="https://www.lzwgxust.top/post/9097dbef.html">01-mysql概述安装配置</a></p><p><a href="https://www.lzwgxust.top/post/13ed513c.html">02-select查询</a></p><p><a href="https://www.lzwgxust.top/post/67b2a6ea.html">03-DDL及DML操作</a></p><p><a href="https://www.lzwgxust.top/post/be498244.html">04-事务索引视图</a></p></blockquote><h2 id="⑧🕍🕍JDBC"><a href="#⑧🕍🕍JDBC" class="headerlink" title="⑧🕍🕍JDBC"></a>⑧🕍🕍JDBC</h2><blockquote><p><a href="https://www.lzwgxust.top/post/f649a76f.html">05-JDBC</a></p></blockquote><h2 id="⑨⛩⛩Maven-基础"><a href="#⑨⛩⛩Maven-基础" class="headerlink" title="⑨⛩⛩Maven 基础"></a>⑨⛩⛩Maven 基础</h2><h2 id="⑩🕋🕋SVN（X）"><a href="#⑩🕋🕋SVN（X）" class="headerlink" title="⑩🕋🕋SVN（X）"></a>⑩🕋🕋SVN（X）</h2><blockquote><p><a href="https://www.lzwgxust.top/post/51ee138b.html">SVN轻松上手无忧版</a></p></blockquote><h2 id="11🎢🎢物联网泛在接入-数据采集中心"><a href="#11🎢🎢物联网泛在接入-数据采集中心" class="headerlink" title="11🎢🎢物联网泛在接入-数据采集中心"></a>11🎢🎢物联网泛在接入-数据采集中心</h2><blockquote><p><a href="https://www.lzwgxust.top/post/b374ca99.html">project-01-物联网环境检测系统</a></p></blockquote><h2 id="12🎡🎡企业信息管理系统"><a href="#12🎡🎡企业信息管理系统" class="headerlink" title="12🎡🎡企业信息管理系统"></a>12🎡🎡企业信息管理系统</h2><h1 id="三、🛝🛝🛝JavaWeb开发"><a href="#三、🛝🛝🛝JavaWeb开发" class="headerlink" title="三、🛝🛝🛝JavaWeb开发"></a>三、🛝🛝🛝JavaWeb开发</h1><blockquote><ul><li>Html&#x2F;Css&#x2F;JavaScript&#x2F;Ajax&#x2F;Json的基本使用</li><li>熟练掌握常用Web服务器（Tomcat&#x2F;Jetty服务器）的使用</li><li>Servlet&#x2F;Jsp&#x2F;EL&#x2F;JSTL 表达式的使用</li><li>掌握基础JavaEE项目开发流程</li><li>掌握MVC设计模式，并熟练运用通过项目掌握应用分层开发特征，模块关系建立</li><li>梳理掌握数据库事务处理，通用服务抽取等</li><li>掌握VUE前端框架</li><li>掌握ElementUI组件等前端技术</li><li>熟悉前后端分析开发流程与相关技术</li></ul></blockquote><h2 id="13🎠🎠Html-Css"><a href="#13🎠🎠Html-Css" class="headerlink" title="13🎠🎠Html&amp;Css"></a>13🎠🎠Html&amp;Css</h2><h2 id="14🌉🌉JavaScript"><a href="#14🌉🌉JavaScript" class="headerlink" title="14🌉🌉JavaScript"></a>14🌉🌉JavaScript</h2><h2 id="15🎪🎪Ajax-Json"><a href="#15🎪🎪Ajax-Json" class="headerlink" title="15🎪🎪Ajax&amp;Json"></a>15🎪🎪Ajax&amp;Json</h2><h2 id="16⚓⚓Vue-ElementUI"><a href="#16⚓⚓Vue-ElementUI" class="headerlink" title="16⚓⚓Vue&amp;ElementUI"></a>16⚓⚓Vue&amp;ElementUI</h2><h2 id="17🏛-🏛-Servlet-基础"><a href="#17🏛-🏛-Servlet-基础" class="headerlink" title="17🏛   🏛  Servlet 基础"></a>17🏛   🏛  Servlet 基础</h2><h2 id="18🏟-🏟-SpringBootWeb-基础"><a href="#18🏟-🏟-SpringBootWeb-基础" class="headerlink" title="18🏟   🏟  SpringBootWeb 基础"></a>18🏟   🏟  SpringBootWeb 基础</h2><blockquote><p><a href="https://www.lzwgxust.top/post/8af06a17.html">SpringBoot项目中各类注解</a></p></blockquote><h2 id="19🏗-🏗-智能实验室管理云平台"><a href="#19🏗-🏗-智能实验室管理云平台" class="headerlink" title="19🏗   🏗  智能实验室管理云平台"></a>19🏗   🏗  智能实验室管理云平台</h2><h2 id="20🧱🧱Estore-线上购物商城"><a href="#20🧱🧱Estore-线上购物商城" class="headerlink" title="20🧱🧱Estore 线上购物商城"></a>20🧱🧱Estore 线上购物商城</h2><h1 id="四、🛖🛖🛖企业核心框架"><a href="#四、🛖🛖🛖企业核心框架" class="headerlink" title="四、🛖🛖🛖企业核心框架"></a>四、🛖🛖🛖企业核心框架</h1><blockquote><ul><li>企业级开发思想</li><li>SpringBoot框架快速开发入门</li><li>熟练掌握Spring、SpringMVC企业级框架</li><li>熟练掌握Mybatis框架实现Dao层开发</li><li>掌握SSM框架整合</li><li>Mybatis-Plus插件学习</li><li>RestFul风格的URL设计</li><li>前后端分离项目的开发特征</li><li>Swagger及JWT在前后端分析项目中的应用</li><li>掌握Docker的安装配置与基本使用</li><li>熟悉容器化项目部署</li></ul></blockquote><h2 id="21🏘-🏘-MyBatis-Mybatis-Plus"><a href="#21🏘-🏘-MyBatis-Mybatis-Plus" class="headerlink" title="21🏘   🏘 MyBatis&amp;Mybatis-Plus"></a>21🏘   🏘 MyBatis&amp;Mybatis-Plus</h2><h2 id="22🏚-🏚-Spring-SpringMVC-高级"><a href="#22🏚-🏚-Spring-SpringMVC-高级" class="headerlink" title="22🏚   🏚 Spring&amp;SpringMVC 高级"></a>22🏚   🏚 Spring&amp;SpringMVC 高级</h2><h2 id="23🏠🏠Git-GitHub"><a href="#23🏠🏠Git-GitHub" class="headerlink" title="23🏠🏠Git&amp;GitHub"></a>23🏠🏠Git&amp;GitHub</h2><h2 id="24🏡🏡Redis-内存数据库"><a href="#24🏡🏡Redis-内存数据库" class="headerlink" title="24🏡🏡Redis 内存数据库"></a>24🏡🏡Redis 内存数据库</h2><h2 id="25🏢🏢Docker及项目部署"><a href="#25🏢🏢Docker及项目部署" class="headerlink" title="25🏢🏢Docker及项目部署"></a>25🏢🏢Docker及项目部署</h2><h2 id="26🏣🏣今日看点-资讯管理及推荐系统"><a href="#26🏣🏣今日看点-资讯管理及推荐系统" class="headerlink" title="26🏣🏣今日看点-资讯管理及推荐系统"></a>26🏣🏣今日看点-资讯管理及推荐系统</h2><h2 id="27🏤🏤智慧农业病虫害识别系统"><a href="#27🏤🏤智慧农业病虫害识别系统" class="headerlink" title="27🏤🏤智慧农业病虫害识别系统"></a>27🏤🏤智慧农业病虫害识别系统</h2><h1 id="五、🏥🏥🏥微服务架构技术"><a href="#五、🏥🏥🏥微服务架构技术" class="headerlink" title="五、🏥🏥🏥微服务架构技术"></a>五、🏥🏥🏥微服务架构技术</h1><blockquote><ul><li>微服务架构设计模式、特征</li><li>掌握SpringCloud技术体系</li><li>了解微服务架构解决方案，搭建微服务应用</li><li>熟悉Eureka、Nacos、OpenFeign、Gateway 路由及Sentinel组件</li><li>掌握MQ的特征的及RabbitMQ中间件的使用</li><li>熟练掌握Redis内存数据库</li><li>熟练使用Nginx反向代理服务器及Zookeeper分布式服务框架</li><li>基于Docker容器的服务发布和部署账务基本的CI&#x2F;CD流程，了解DevOps的概念</li></ul></blockquote><h2 id="28🏦🏦SpringData-X"><a href="#28🏦🏦SpringData-X" class="headerlink" title="28🏦🏦SpringData (X)"></a>28🏦🏦SpringData (X)</h2><h2 id="29🏨🏨Nginx-X"><a href="#29🏨🏨Nginx-X" class="headerlink" title="29🏨🏨Nginx(X)"></a>29🏨🏨Nginx(X)</h2><h2 id="30🏩🏩SpringCloud"><a href="#30🏩🏩SpringCloud" class="headerlink" title="30🏩🏩SpringCloud"></a>30🏩🏩SpringCloud</h2><h2 id="31🏪🏪SpringSecurity"><a href="#31🏪🏪SpringSecurity" class="headerlink" title="31🏪🏪SpringSecurity"></a>31🏪🏪SpringSecurity</h2><h2 id="32🏫🏫RabbitMQ"><a href="#32🏫🏫RabbitMQ" class="headerlink" title="32🏫🏫RabbitMQ"></a>32🏫🏫RabbitMQ</h2><h2 id="33🏬🏬Zookeeper"><a href="#33🏬🏬Zookeeper" class="headerlink" title="33🏬🏬Zookeeper"></a>33🏬🏬Zookeeper</h2><h2 id="34🌟🌟地质勘探建模平台"><a href="#34🌟🌟地质勘探建模平台" class="headerlink" title="34🌟🌟地质勘探建模平台"></a>34🌟🌟地质勘探建模平台</h2><h1 id="六、👻👻👻面试就业专题"><a href="#六、👻👻👻面试就业专题" class="headerlink" title="六、👻👻👻面试就业专题"></a>六、👻👻👻面试就业专题</h1><h2 id="35🍱🍱就业专项培养"><a href="#35🍱🍱就业专项培养" class="headerlink" title="35🍱🍱就业专项培养"></a>35🍱🍱就业专项培养</h2><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>不积跬步无以至千里💪。</p></blockquote><div class="bilibili">    <iframe src="//player.bilibili.com/player.html?aid=414817490&bvid=BV1fV41117NX&cid=240950074&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键搭建属于自己的ChatGpt</title>
      <link href="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/"/>
      <url>/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>一直想要实现一个属于自己的ChatGpt，今天终于在舍友的帮助下实现了。</p><p>大家可以访问一下我的：<a href="https://ai.lzwgxust.top/">ChatGPT Next Web</a></p></blockquote><h2 id="🌲🌲github"><a href="#🌲🌲github" class="headerlink" title="🌲🌲github"></a>🌲🌲github</h2><blockquote><p>首先从github中找到这个优秀的开源项目：</p><ul><li><a href="https://github.com/Yidadaa/ChatGPT-Next-Web">Yidadaa&#x2F;ChatGPT-Next-Web: 一键拥有你自己的跨平台 ChatGPT 应用</a></li></ul></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626151543826.png" alt="image-20230626151543826"></p><h2 id="🍀🍀vercel"><a href="#🍀🍀vercel" class="headerlink" title="🍀🍀vercel"></a>🍀🍀vercel</h2><blockquote><p>vercel官网：<a href="https://vercel.com/dashboard">Dashboard – Vercel</a>   </p><p>vercel注册：<a href="https://www.bilibili.com/video/BV1Fh411e7ZH/?vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">Twikoo Vercel 部署教程_哔哩哔哩_bilibili</a> (后面部分是vercel的注册，记得一键三连)</p><p>可以学习这个博客，学完你就懂如何通过vercel将域名挂载到github对应仓库了<a href="https://xiaoming.site/post/6b62e9ba.html">Vercel+imsyy 部署个人博客 home 页面 | 小铭の博客 (xz133744.github.io)</a></p></blockquote><blockquote><p>进入到Vercel中（具体的注册流程我就省略了）</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626151949927.png" alt="image-20230626151949927"></p><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152021010.png" alt="image-20230626152021010"></p><blockquote><p>点击进行部署</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152212736.png" alt="image-20230626152212736"></p><blockquote><p>出现下面这个页面表示将项目部署成功</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152756059.png" alt="image-20230626152756059"></p><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152825804.png" alt="image-20230626152825804"></p><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152914440.png" alt="image-20230626152914440"></p><h2 id="🌍🌍硅云"><a href="#🌍🌍硅云" class="headerlink" title="🌍🌍硅云"></a>🌍🌍硅云</h2><blockquote><p>要想实现上面一步，必须进行域名解析</p><p>进入硅云，进行域名解析</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626152657573.png" alt="image-20230626152657573"></p><h2 id="🌞🌞url访问"><a href="#🌞🌞url访问" class="headerlink" title="🌞🌞url访问"></a>🌞🌞url访问</h2><blockquote><p>解析成功后就可以直接使用url进行访问了：</p><p>比如我的访问地址就是 <code>https://ai.lzwgxust.top/</code></p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626153304053.png" alt="image-20230626153304053"></p><blockquote><p>添加自己ChatGpt账号的密钥也就是key值(需要魔法才能进):<a href="https://platform.openai.com/">Overview - OpenAI API</a></p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626153350263.png" alt="image-20230626153350263"></p><blockquote><p>设置后刷新页面就可以进行愉快的交流啦~~</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626153500198.png" alt="image-20230626153500198"></p><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626153640382.png" alt="image-20230626153640382"></p><h2 id="🍠🍠自定义chatgpt接口"><a href="#🍠🍠自定义chatgpt接口" class="headerlink" title="🍠🍠自定义chatgpt接口"></a>🍠🍠自定义chatgpt接口</h2><blockquote><p>使用F12打开调试工具–&gt;选择网络（network）–&gt;选择Fetch&#x2F;XHR–&gt;双击请求就可以难道属于自己的chatgpt接口了</p></blockquote><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626154408584.png" alt="image-20230626154408584"></p><h3 id="🔥请求体参数"><a href="#🔥请求体参数" class="headerlink" title="🔥请求体参数"></a>🔥请求体参数</h3><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;presence_penalty&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;frequency_penalty&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是还需要一个请求头：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    Authorization<span class="punctuation">:</span> <span class="string">&quot;Bearer 自己chatgpt的key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626155257430.png" alt="image-20230626155257430"></p></blockquote><h3 id="🍙返回体"><a href="#🍙返回体" class="headerlink" title="🍙返回体"></a>🍙返回体</h3><blockquote><p>返回数据类型如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span><span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;你 &quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;好&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;，&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;有&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;什&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;么&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;需要&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;帮&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;助&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;的&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;吗&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;？&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-7VbOxTLneeUQoN9eJe71NeThFEdfp&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1687766295</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="string">&quot;stop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">[</span>DONE<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>我们主要是需要拿到 <code>data.choices.delta.content</code>的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sendAi</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;自己的chatgpt-api&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">header</span>: &#123;</span><br><span class="line">            <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer 自己的openai的密钥&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="comment">// role: &quot;user&quot;,</span></span><br><span class="line">            <span class="comment">// content: msg</span></span><br><span class="line">            <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="comment">// 用户输入</span></span><br><span class="line">                    <span class="string">&quot;content&quot;</span>: msg</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;stream&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="comment">// 使用的ChatGPT模型</span></span><br><span class="line">            <span class="string">&quot;temperature&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;presence_penalty&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;frequency_penalty&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: (<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 对返回的数据进行处理</span></span><br><span class="line">            <span class="keyword">const</span> newData = data.<span class="title function_">split</span>(<span class="string">&#x27;data:&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> data1 = newData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.<span class="title function_">split</span>(<span class="string">&#x27;&quot;choices&quot;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">const</span> data2 = data1.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> item.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">const</span> content = []</span><br><span class="line">            data2.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    content.<span class="title function_">push</span>(...<span class="title class_">JSON</span>.<span class="title function_">parse</span>(item))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">const</span> contents = content.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">delta</span> &amp;&amp; item.<span class="property">finish_reason</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> item.<span class="property">delta</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(contents)</span><br><span class="line">            <span class="keyword">const</span> a = []</span><br><span class="line">            contents.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">null</span>) &#123;</span><br><span class="line">                    a.<span class="title function_">push</span>(item.<span class="property">content</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            msgList.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: msgList.<span class="property">length</span>,</span><br><span class="line">                <span class="attr">speaker</span>: <span class="string">&#x27;server&#x27;</span>, <span class="comment">// chatGpt输出</span></span><br><span class="line">                <span class="attr">content</span>: a.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; msgList &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>代码解析后的样子：</p><p><img src="/2023/06/26/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt/image-20230626165800226.png" alt="image-20230626165800226"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本使用</title>
      <link href="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>用于自己记忆，避免忘记git上传操作。哈哈记不住~~🫡</p></blockquote><h1 id="🤔🤔🤔git基本操作"><a href="#🤔🤔🤔git基本操作" class="headerlink" title="🤔🤔🤔git基本操作"></a>🤔🤔🤔git基本操作</h1><h2 id="🫡🫡有克隆的情况"><a href="#🫡🫡有克隆的情况" class="headerlink" title="🫡🫡有克隆的情况"></a>🫡🫡有克隆的情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone http:.....</span><br><span class="line">exit</span><br><span class="line">找到存在.git文件的目录重新 Git Bush进去</span><br><span class="line">git status  </span><br><span class="line">git add .    (如果是红色)</span><br><span class="line">git commit -m &quot;本次提交注释&quot; (如果是绿色)</span><br><span class="line">最后一定要记得：</span><br><span class="line">git push -u origin 分支</span><br></pre></td></tr></table></figure><p>注意点:modified 很大可能是发生冲突了</p><p>如何解决冲突上网搜</p><h2 id="🐙🐙要更新的情况"><a href="#🐙🐙要更新的情况" class="headerlink" title="🐙🐙要更新的情况"></a>🐙🐙要更新的情况</h2><p>建议每次写代码的时候先进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line">#如果远程分支名==本地分支名的话 写一个即可</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">后面进行更新操作</span><br><span class="line">git status  </span><br><span class="line">git add .    (如果是红色)</span><br><span class="line">git commit -m &quot;本次提交注释&quot; (如果是绿色)</span><br><span class="line">最后一定要记得：</span><br><span class="line">git push -u origin 分支</span><br></pre></td></tr></table></figure><h1 id="git-ssh-github失败"><a href="#git-ssh-github失败" class="headerlink" title="git-ssh-github失败"></a>git-ssh-github失败</h1><blockquote><p>git-ssh-github 或者 git-ssh-gitee突然就失败了，经过一番摸索，终于解决啦~~</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>在用户的.ssh下生成两个SSH Key密钥对，id_rsa是(私钥)，不能泄露出去，id_rsa_pub是公钥，可以放心地告诉其他人。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230820101903410.png" alt="image-20230820101903410"></p><p>将公钥复制出来放入到github 和 gitee当中</p><ul><li>github</li></ul><p><img src="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230820102119748.png" alt="image-20230820102119748"></p><ul><li>gitee</li></ul><p><img src="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230820102224334.png" alt="image-20230820102224334"></p><p>添加ssh成功后，进行测试看是否能连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>如果这个时候 github 还是没有出现successful的话，配置一下 git连接github的端口</p><p><img src="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230820102523762.png" alt="image-20230820102523762"></p><p>将下面配置复制进去即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p><img src="/2023/06/23/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230820102742105.png" alt="image-20230820102742105"></p><p>这个时候就表示ssh连接成功啦~~</p></blockquote><h1 id="git与svn的区别"><a href="#git与svn的区别" class="headerlink" title="git与svn的区别"></a>git与svn的区别</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/48148269">对比Git 与 SVN，这篇讲的很易懂</a></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此 <code>tool栏</code> 楚门的世界将会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效且快速制作PPT</title>
      <link href="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/"/>
      <url>/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>你还在为如何做ppt而烦恼吗？你还在为ppt的排版而烦恼吗？你还在为ppt的图片而烦恼吗？</p><p>你还在为ppt的的内容而烦恼吗？恭喜你，看这一篇博客就够了！哈哈</p><p>否定之否定，使用闪击ppt生成ppt是没有动画效果的，还得自己加呜呜~~~</p></blockquote><blockquote><p>推荐大佬视频：<a href="https://www.bilibili.com/video/BV1oj411G7QV/?spm_id_from=333.337.search-card.all.click&vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">吴思路：ChatGPT搭配闪击PPT三分钟生成PPT,你只需要输入一个标题</a></p><p>闪击PPT：<a href="https://ppt.sankki.com/#/works">闪击PPT - 高效内容演示 (sankki.com)</a></p><p>ChatGpt（自行解决）：<a href="https://chat.openai.com/">ChatGPT (openai.com)</a></p></blockquote><h2 id="🍛🍛闪击ppt"><a href="#🍛🍛闪击ppt" class="headerlink" title="🍛🍛闪击ppt"></a>🍛🍛闪击ppt</h2><blockquote><p>闪击ppt的基本使用和模块划分</p></blockquote><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621190307143.png" alt="image-20230621190307143"></p><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621190434117.png" alt="image-20230621190434117"></p><h3 id="🥡草稿"><a href="#🥡草稿" class="headerlink" title="🥡草稿"></a>🥡草稿</h3><blockquote><p>草稿部分要遵循基本的语法：<a href="https://zhuanlan.zhihu.com/p/607583650">闪击PPT如何文本直接转PPT - 知乎 (zhihu.com)</a></p><p>不需要记忆，只需要<code>===</code>选择即可。</p><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621192236606.png" alt="image-20230621192236606"></p><ul><li>封面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=====封面=====</span><br><span class="line"><span class="comment">#封面页标题页标题页标题</span></span><br><span class="line"><span class="comment">##封面副标题副标题</span></span><br><span class="line">演讲人：芝士不吃</span><br></pre></td></tr></table></figure><ul><li>目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=====目录=====</span><br><span class="line"><span class="comment">#目录</span></span><br><span class="line"><span class="comment">##CONTENTS</span></span><br><span class="line">1、目录项1</span><br><span class="line">2、目录项2</span><br><span class="line">3、目录项3</span><br><span class="line">4、目录项4</span><br><span class="line">5、目录项5</span><br></pre></td></tr></table></figure><ul><li>过渡</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=====过渡=====</span><br><span class="line"><span class="comment">#过渡页页标题</span></span><br><span class="line"><span class="comment">##过渡页页副标</span></span><br></pre></td></tr></table></figure><ul><li>致谢</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=====致谢=====</span><br><span class="line"><span class="comment">#Thank you</span></span><br><span class="line"><span class="comment">##感谢观看，欢迎提问</span></span><br><span class="line">闪击工作室出品</span><br></pre></td></tr></table></figure><ul><li>列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=====列表=====</span><br><span class="line"><span class="comment">#文本页页标题</span></span><br><span class="line"><span class="comment">##文本页页副标</span></span><br><span class="line">1、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容。</span><br><span class="line">2、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容。</span><br><span class="line">3、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容。</span><br><span class="line">4、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容。</span><br></pre></td></tr></table></figure><ul><li>多列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">=====多列表=====</span><br><span class="line"><span class="comment">#多列表页页标题</span></span><br><span class="line"><span class="comment">##多列表页页副标</span></span><br><span class="line">1、一级小标题</span><br><span class="line">1.1、二级小标题</span><br><span class="line">二级详细内容详细内容详细内容</span><br><span class="line">1.2、二级小标题</span><br><span class="line">二级详细内容详细内容详细内容</span><br><span class="line">2、一级小标题</span><br><span class="line">2.1、二级小标题</span><br><span class="line">二级详细内容详细内容详细内容</span><br><span class="line">3、一级小标题</span><br><span class="line">3.1、二级小标题</span><br><span class="line">二级详细内容详细内容详细内容  </span><br><span class="line">4、一级小标题</span><br><span class="line">4.1、二级小标题</span><br><span class="line">二级详细内容详细内容详细内容  </span><br></pre></td></tr></table></figure><ul><li>图文列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=====图文列表=====</span><br><span class="line"><span class="comment">#图文列表页页标题</span></span><br><span class="line"><span class="comment">##图文列表页页副标</span></span><br><span class="line">1、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">2、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">3、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">4、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容</span><br></pre></td></tr></table></figure><ul><li>大段文字</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=====大段文字=====</span><br><span class="line"><span class="comment">#大段文字页页标题</span></span><br><span class="line"><span class="comment">##大段文字页页副标</span></span><br><span class="line">段落小标题</span><br><span class="line">请输入详细内容详细内容详细内容详细内容详细内容详细内容详细内容详细内容详细内容。\n请输入详细内容详细内容详细内容详细内容详细内容详细内容详细内容详细内容详细内容。</span><br></pre></td></tr></table></figure><ul><li>图文排版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=====图文排版=====</span><br><span class="line"><span class="comment">#图文排版页页标题</span></span><br><span class="line"><span class="comment">##图文排版页页副标</span></span><br><span class="line">1、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">2、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">3、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br><span class="line">4、列表小标</span><br><span class="line">请输入详细内容详细内容详细内容详细内容。</span><br></pre></td></tr></table></figure><ul><li>对比</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">=====对比=====</span><br><span class="line"><span class="comment">#对比页页标题</span></span><br><span class="line"><span class="comment">##对比页页副标</span></span><br><span class="line">差异项\n差异项</span><br><span class="line">1、线下教育</span><br><span class="line">1.1、线下教育优点一，线下教育优点二。</span><br><span class="line">1.2、线下教育优点一，线下教育优点二。</span><br><span class="line">2、线上教育</span><br><span class="line">2.1、线上教育优点一，线上教育优点二。</span><br><span class="line">2.2、线上教育优点一，线上教育优点二。</span><br></pre></td></tr></table></figure><ul><li>因果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=====因果=====</span><br><span class="line"><span class="comment">#因果页页标题</span></span><br><span class="line"><span class="comment">##因果页页副标</span></span><br><span class="line">1.因的小标题</span><br><span class="line">因的描述</span><br><span class="line">2.果的小标题</span><br><span class="line">果的描述</span><br><span class="line">3.因的小标题</span><br><span class="line">因的描述</span><br><span class="line">4.果的小标题</span><br><span class="line">果的描述</span><br></pre></td></tr></table></figure><ul><li>顺序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=====顺序=====</span><br><span class="line"><span class="comment">#顺序页页标题</span></span><br><span class="line"><span class="comment">##顺序页页副标</span></span><br><span class="line">1、第一天</span><br><span class="line">活动举办</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">2、第二天</span><br><span class="line">活动举办</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">3、第三天</span><br><span class="line">活动举办</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">4、第四天</span><br><span class="line">活动举办</span><br><span class="line">请输入详细内容详细内容</span><br></pre></td></tr></table></figure><ul><li>金字塔</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=====金字塔=====</span><br><span class="line"><span class="comment">#金字塔页页标题</span></span><br><span class="line"><span class="comment">##金字塔页页副标</span></span><br><span class="line">1、100%</span><br><span class="line">金字塔标题</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">2、50%</span><br><span class="line">金字塔标题</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">3、30%</span><br><span class="line">金字塔标题</span><br><span class="line">请输入详细内容详细内容</span><br><span class="line">4、10%</span><br><span class="line">金字塔标题</span><br><span class="line">请输入详细内容详细内容</span><br></pre></td></tr></table></figure><ul><li>兜底</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=====兜底=====</span><br><span class="line"><span class="comment">#兜底页页标题</span></span><br><span class="line"><span class="comment">##兜底页副标题    </span></span><br></pre></td></tr></table></figure><ul><li>人物列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">=====人物列表=====</span><br><span class="line"><span class="comment">#人物列表页页标题</span></span><br><span class="line"><span class="comment">##人物列表页页副标</span></span><br><span class="line">1、张三</span><br><span class="line">设计师</span><br><span class="line">请输入详细内容详细内容请输入详细内容详细内容</span><br><span class="line">2、李四</span><br><span class="line">程序员</span><br><span class="line">请输入详细内容详细内容请输入详细内容详细内容</span><br><span class="line">3、王五</span><br><span class="line">产品经理</span><br><span class="line">请输入详细内容详细内容请输入详细内容详细内容</span><br></pre></td></tr></table></figure><ul><li>人物介绍</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=====人物介绍=====</span><br><span class="line"><span class="comment">#人物详情页页标题</span></span><br><span class="line"><span class="comment">##人物详情页页副标</span></span><br><span class="line">张三</span><br><span class="line">感官科技公司设计师</span><br><span class="line">请输入详细内容详细内容请输入详细内容详细内容\n请输入详细内容详细内容请输入详细内容详细内容\n请输入详细内容详细内容请输入详细内容详细内容</span><br></pre></td></tr></table></figure><ul><li>金句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=====金句=====</span><br><span class="line"><span class="comment">#金句页页标题</span></span><br><span class="line">博观而约取,厚积而薄发</span><br><span class="line">苏东坡</span><br></pre></td></tr></table></figure></blockquote><h3 id="🏌内容卡片"><a href="#🏌内容卡片" class="headerlink" title="🏌内容卡片"></a>🏌内容卡片</h3><blockquote><p>可以拉到最下面选择添加页面</p></blockquote><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621192352363.png" alt="image-20230621192352363"></p><blockquote><p>以封面为例子对内容卡片中的元素进行一一介绍</p><ul><li>图片</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621193123592.png" alt="image-20230621193123592"></p><ul><li>图表</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621193336048.png" alt="image-20230621193336048"></p><ul><li>表格</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621193403607.png" alt="image-20230621193403607"></p><ul><li>代码</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621193433768.png" alt="image-20230621193433768"></p><ul><li>视频</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621193526220.png" alt="image-20230621193526220"></p></blockquote><h3 id="💦预览"><a href="#💦预览" class="headerlink" title="💦预览"></a>💦预览</h3><blockquote><ul><li>主题颜色设置</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621194233557.png" alt="image-20230621194233557"></p><ul><li>字体大小</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621194118811.png" alt="image-20230621194118811"></p><ul><li>设置母版</li></ul><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621195503704.png" alt="image-20230621195503704"></p></blockquote><h3 id="🦸‍♂演示ppt"><a href="#🦸‍♂演示ppt" class="headerlink" title="🦸‍♂演示ppt"></a>🦸‍♂演示ppt</h3><blockquote><p>当我们写好ppt后可以在线演示</p></blockquote><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621195750410.png" alt="image-20230621195750410"></p><blockquote><p> 当当当~！！！</p></blockquote><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621195811143.png" alt="image-20230621195811143"></p><h2 id="🤔🤔ChatGPT"><a href="#🤔🤔ChatGPT" class="headerlink" title="🤔🤔ChatGPT"></a>🤔🤔ChatGPT</h2><blockquote><p>使用ChatGpt生成对应内容的草稿（因为草稿需要特定的语法）</p><p>使用下面<strong>语法</strong>行对ChatGpt进行训练：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">我的名字叫做芝士不吃，帮我制作一篇内容为《秦朝为什么会灭亡》PPT，要求如下：</span><br><span class="line">第一、一定要使用中文。</span><br><span class="line">第二、页面形式有3种，封面、目录、列表。</span><br><span class="line">第三、目录页要列出内容大纲。</span><br><span class="line">第四、根据内容大纲，生成对应的PPT列表页，每一页PPT列表页使用=====列表=====开头。</span><br><span class="line">第五、封面页格式如下：</span><br><span class="line">=====封面=====</span><br><span class="line"><span class="comment"># 主标题</span></span><br><span class="line"><span class="comment">## 副标题</span></span><br><span class="line">演讲人：我的名字</span><br><span class="line">第六、目录页格式如下：</span><br><span class="line">=====目录=====</span><br><span class="line"><span class="comment"># 目录</span></span><br><span class="line"><span class="comment">## CONTENT</span></span><br><span class="line">1、内容</span><br><span class="line">2、内容</span><br><span class="line">第七、列表页格式如下：</span><br><span class="line">=====列表=====</span><br><span class="line"><span class="comment"># 页面主标题</span></span><br><span class="line">1、要点1</span><br><span class="line">要点描述内容</span><br><span class="line">第八、列表页里的要点描述内容是对要点的详细描述，10个字以上，50个字以内。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最后，一定要使用代码块回复你生成的内容，切记切记。</span><br></pre></td></tr></table></figure><p>将上面这段<strong>语法</strong>复制给ChatGpt后：生成对应草稿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">=====封面=====</span><br><span class="line"><span class="comment"># 秦朝为什么会灭亡</span></span><br><span class="line"><span class="comment">## 探究秦朝灭亡的原因</span></span><br><span class="line">演讲人：芝士不吃</span><br><span class="line"></span><br><span class="line">=====目录=====</span><br><span class="line"><span class="comment"># 目录</span></span><br><span class="line"><span class="comment">## 内容大纲</span></span><br><span class="line">1、秦朝简介</span><br><span class="line">2、统一战争的疲劳</span><br><span class="line">3、暴政与民不聊生</span><br><span class="line">4、儒法斗争与秦末内乱</span><br><span class="line"></span><br><span class="line">=====列表=====</span><br><span class="line"><span class="comment"># 秦朝简介</span></span><br><span class="line">1、建立者：秦始皇</span><br><span class="line">秦始皇统一六国，建立了秦朝。</span><br><span class="line"></span><br><span class="line">2、中央集权体制</span><br><span class="line">秦朝实行高度集权，权力高度集中于皇帝。</span><br><span class="line"></span><br><span class="line">3、修筑万里长城</span><br><span class="line">为了防御北方游牧民族的侵袭，修建了万里长城。</span><br><span class="line"></span><br><span class="line">=====列表=====</span><br><span class="line"><span class="comment"># 统一战争的疲劳</span></span><br><span class="line">1、持续战争状态</span><br><span class="line">秦朝统一战争连年不断，给国家造成了巨大的负担。</span><br><span class="line"></span><br><span class="line">2、兵役制度加重</span><br><span class="line">征兵制度使大量男丁被征入伍，严重影响了农业生产。</span><br><span class="line"></span><br><span class="line">3、腐败与贪污</span><br><span class="line">秦朝官员腐败现象严重，贪污成风，导致国家财政困难。</span><br><span class="line"></span><br><span class="line">=====列表=====</span><br><span class="line"><span class="comment"># 暴政与民不聊生</span></span><br><span class="line">1、苛捐杂税</span><br><span class="line">秦朝实行苛捐杂税，重税压迫百姓，民不聊生。</span><br><span class="line"></span><br><span class="line">2、焚书坑儒</span><br><span class="line">秦始皇下令焚书坑儒，破坏了古代文化传统，引起民众不满。</span><br><span class="line"></span><br><span class="line">3、强制劳役</span><br><span class="line">秦朝推行强制劳役政策，使百姓生活困苦，造成民怨。</span><br><span class="line"></span><br><span class="line">=====列表=====</span><br><span class="line"><span class="comment"># 儒法斗争与秦末内乱</span></span><br><span class="line">1、法家与儒家之争</span><br><span class="line">秦朝实行法家政治，压制了儒家思想，引发了儒法斗争。</span><br><span class="line"></span><br><span class="line">2、陈胜吴广起义</span><br><span class="line">秦朝末年，陈胜、吴广等起义军纷起，加剧了秦朝的内乱。</span><br><span class="line"></span><br><span class="line">3、秦朝灭亡</span><br><span class="line">最终，秦朝内乱不断，加上外族入侵，导致秦朝的灭亡。</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230621200533123.png" alt="image-20230621200533123"></p></blockquote><blockquote><p>对于闪击PPT的使用到这里就基本结束了，好的工具确实能加快我们的工作效率。能起到事半功倍的成效。</p></blockquote><h2 id="🫡🫡导出"><a href="#🫡🫡导出" class="headerlink" title="🫡🫡导出"></a>🫡🫡导出</h2><blockquote><p>满心欢喜写好ppt后打算导出到本地，发现竟然需要会员！！！</p><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230624170459459.png" alt="image-20230624170459459"></p><p>但是莫慌！邀请好友即可7天会员可用</p><p><img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230624173007036.png" alt="image-20230624173007036"></p></blockquote><blockquote><p>注意一点：下载后要记得下载对应<strong>字体包</strong>：<a href="https://cos.sankki.com/package/font/font.zip">https://cos.sankki.com/package/font/font.zip</a></p><p>具体使用，双击文件，点击安装即可。</p></blockquote><h2 id="💜💜自定义logo"><a href="#💜💜自定义logo" class="headerlink" title="💜💜自定义logo"></a>💜💜自定义logo</h2><blockquote><p>有了ppt难道你不想设计一个属于自己ppt主题的logo吗？放心，我懂你！</p><p>logo：<a href="https://www.logosc.cn/start">智能LOGO生成器 - 在线logo设计制作公司标志！ - 标小智LOGO神器 (logosc.cn)</a></p><p>去水印：<a href="https://img.logosc.cn/erase">AI图片去水印，一键涂抹去除多余物体和人物 - AI改图神器 (logosc.cn)</a></p><p><strong>给你看看我的logo！！</strong>（当然还是存在一点小瑕疵的额）<img src="/2023/06/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9CPPT/image-20230625150349853.png" alt="image-20230625150349853"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此 <code>tool栏</code> 楚门的世界将会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ppt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github搭建个人图床</title>
      <link href="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：fs实训二ing<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>使用github搭建属于自己的个人图床，实现图片存在自由，会生成对应的url外链</p></blockquote><h2 id="💜💜github"><a href="#💜💜github" class="headerlink" title="💜💜github"></a>💜💜github</h2><h3 id="🍅创建github仓库"><a href="#🍅创建github仓库" class="headerlink" title="🍅创建github仓库"></a>🍅创建github仓库</h3><blockquote><p>先到github官网创建账号（略）</p><p>创建一个github仓库用于存放图片：<a href="https://github.com/">GitHub</a></p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201146335.png" alt="image-20230613201146335"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201301492.png" alt="image-20230613201301492"></p><blockquote><p>出现下面界面就算成功啦</p><p>当然一开始你是什么都没有滴！我有是因为我已经上传测试过啦！</p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201356116.png" alt="image-20230613201356116"></p><h3 id="✌生成github的Token"><a href="#✌生成github的Token" class="headerlink" title="✌生成github的Token"></a>✌生成github的Token</h3><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202107691.png" alt="image-20230613202107691"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202143411.png" alt="image-20230613202143411"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202231594.png" alt="image-20230613202231594"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202342164.png" alt="image-20230613202342164"></p><blockquote><p>复制token后面要用</p></blockquote><h2 id="💪💪PicGo"><a href="#💪💪PicGo" class="headerlink" title="💪💪PicGo"></a>💪💪PicGo</h2><h3 id="📢下载PicGo"><a href="#📢下载PicGo" class="headerlink" title="📢下载PicGo"></a>📢下载PicGo</h3><blockquote><p>PicGo官网：<a href="https://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a></p><p>首先跳到github</p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201644993.png" alt="image-20230613201644993"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201711876.png" alt="image-20230613201711876"></p><h3 id="📣配置PicGo"><a href="#📣配置PicGo" class="headerlink" title="📣配置PicGo"></a>📣配置PicGo</h3><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613201920513.png" alt="image-20230613201920513"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202550906.png" alt="image-20230613202550906"></p><blockquote><p>对PicGo进行设置看官方文档：<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></p><p>下面列出我的设置</p></blockquote><blockquote><p>快捷键修改，根据个人习惯。我的是：<code>ctrl + shift + \</code></p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202753088.png" alt="image-20230613202753088"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202839174.png" alt="image-20230613202839174"></p><blockquote><p>选择URL表示的是上传图片后自动返回URL地址，直接ctrl+V即可</p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613202938271.png" alt="image-20230613202938271"></p><blockquote><p>到这里基本上就完成了。</p><p>下面进行域名绑定自己的github仓库</p></blockquote><h2 id="🌻🌻vercel"><a href="#🌻🌻vercel" class="headerlink" title="🌻🌻vercel"></a>🌻🌻vercel</h2><blockquote><p>vercel官网：<a href="https://vercel.com/dashboard">Dashboard – Vercel</a>   </p><p>vercel注册：<a href="https://www.bilibili.com/video/BV1Fh411e7ZH/?vd_source=37d0a4e2d39fe02cac0e2a4c23fe8ec3">Twikoo Vercel 部署教程_哔哩哔哩_bilibili</a> (后面部分是vercel的注册，记得一键三连)</p><p>可以学习这个博客，学完你就懂如何通过vercel将域名挂载到github对应仓库了<a href="https://xiaoming.site/post/6b62e9ba.html">Vercel+imsyy 部署个人博客 home 页面 | 小铭の博客 (xz133744.github.io)</a></p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613204135527.png" alt="image-20230613204135527"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613204229401.png" alt="image-20230613204229401"></p><blockquote><p>首先将自己的域名与vercel进行解析，我使用的是硅云： <code>vercel-dns.com.</code></p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230627183707035.png" alt="image-20230627183707035"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613204538839.png" alt="image-20230613204538839"></p><blockquote><p>这样子就相当于把我的 images.lzwgxust.top与我的Luozongwei&#x2F;github-blog-img绑定成功了</p><p>再次配置PicGo: 这样就可以使用自己的域名+图片名进行访问了</p><p><code>https://images.lzwgxust.top/background.png</code></p></blockquote><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613204708865.png" alt="image-20230613204708865"></p><h2 id="🏅🏅如何使用？"><a href="#🏅🏅如何使用？" class="headerlink" title="🏅🏅如何使用？"></a>🏅🏅如何使用？</h2><blockquote><p>首先ctrl+C复制图片</p><p>然后使用PicGo的快捷键：ctrl+shift+\</p></blockquote><p>​<img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613205451446.png" alt="image-20230613205451446"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230613210001079.png" alt="image-20230613210001079"></p><h2 id="上传失败解决方案"><a href="#上传失败解决方案" class="headerlink" title="上传失败解决方案"></a>上传失败解决方案</h2><h3 id="代理问题"><a href="#代理问题" class="headerlink" title="代理问题"></a>代理问题</h3><blockquote><p>可能是我代理开多了的问题，找了一天了呜呜呜~~</p><p>上传前的准备</p><ul><li>PicGo设置</li></ul><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230820111237996.png" alt="image-20230820111237996"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230820111312398.png" alt="image-20230820111312398"></p><ul><li>设置本地代理</li></ul><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230820111501063.png" alt="image-20230820111501063"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230820111643609.png" alt="image-20230820111643609"></p><p><img src="/2023/06/13/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230820111744276.png" alt="image-20230820111744276"></p><p>功夫不负有心人，终于成功啦！感动</p></blockquote><blockquote><p>到这里就全部结束啦！！！下次再见~~</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现0元百度网盘不限速？</title>
      <link href="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/"/>
      <url>/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：暂时木有哈哈。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>天下早已传闻百度网盘限速之苦，令人不堪其扰。然今有智者言：解困之道已现，待观风云。我们静候佳音。</p></blockquote><h2 id="草船借箭"><a href="#草船借箭" class="headerlink" title="草船借箭"></a>草船借箭</h2><blockquote><p>首先我们得先有油猴插件：<a href="https://www.lzwgxust.top/post/9506ea9e.html">超级好用的工具集合 | 楚门的世界 (lzwgxust.top)</a></p><p>然后下载脚本：<a href="https://greasyfork.org/zh-CN/scripts/463707-%E5%B0%B1%E6%98%AF%E5%8A%A0%E9%80%9F-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E6%97%A0%E9%99%90%E9%80%9F%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD">【就是加速】百度网盘无限速批量下载 (greasyfork.org)</a></p><p>IDM下载：<a href="https://www.123pan.com/s/NjcA-PGmNA.html">https://www.123pan.com/s/NjcA-PGmNA.html</a></p><p>IDM破解：<a href="https://zhuanlan.zhihu.com/p/430535305">IDM序列号 - 知乎 (zhihu.com)</a></p></blockquote><h2 id="万事俱备"><a href="#万事俱备" class="headerlink" title="万事俱备"></a>万事俱备</h2><blockquote><p>上面的准备工作成功后：你会看到一个就是加速（豪气）</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611214623750.png" alt="image-20230611214623750"></p><blockquote><p>可以批量下载，但是不能下载文件夹，就是要进入到文件夹里边</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611214747850.png" alt="image-20230611214747850"></p><blockquote><p>首先会出现一个拦截，点击链接即可。</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611214917146.png" alt="image-20230611214917146"></p><blockquote><p>再次点击就是加速：复制netdisk</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215049392.png" alt="image-20230611215049392"></p><blockquote><p>打开IDM</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215140200.png" alt="image-20230611215140200"></p><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215212909.png" alt="image-20230611215212909"></p><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215347960.png" alt="image-20230611215347960"></p><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215421102.png" alt="image-20230611215421102"></p><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215613077.png" alt="image-20230611215613077"></p><blockquote><p>下载速度还是挺可观的</p></blockquote><p><img src="/2023/06/11/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B00%E5%85%83%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%EF%BC%9F/image-20230611215709314.png" alt="image-20230611215709314"></p><blockquote><p>到此就实现加速啦~ 真正的勇士就是要寻找破局之道！</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows-jdk版本切换</title>
      <link href="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
      <url>/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：一起来学go(狗)语言。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>为了解决不同的插件、软件对jdk版本的需要。</p></blockquote><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><blockquote><p>官网：<a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p></blockquote><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160006973.png" alt="image-20230611160006973"></p><blockquote><p>拉到下面有不同jdk版本的选择，现在用的最多的应该是 jdk8 、jdk11、jdk17。</p><p>下面以jdk17为例子：</p></blockquote><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160045806.png" alt="image-20230611160045806"></p><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160328287.png" alt="image-20230611160328287"></p><blockquote><p>根据自己需求选择对应电脑的安装包：我的是Windows11</p></blockquote><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160432387.png" alt="image-20230611160432387"></p><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160615192.png" alt="image-20230611160615192"></p><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611160950478.png" alt="image-20230611160950478"></p><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611161158136.png" alt="image-20230611161158136"></p><blockquote><p>这样子基本上就可以了，后面想切换windows的jdk版本的话就自己改变JAVA_HOME的值就OK了。</p></blockquote><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611161328968.png" alt="image-20230611161328968"></p><p><img src="/2023/06/11/windows-jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/image-20230611161407895.png" alt="image-20230611161407895"></p><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-basic-learning-week02</title>
      <link href="/2023/06/06/go-basic-learning-week02/"/>
      <url>/2023/06/06/go-basic-learning-week02/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：一起来学go(狗)语言。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>将对go语言的面向接口、函数式编程、错误处理和资源管理、测试、Goroutine、Channel进行初步学习。</p></blockquote><h1 id="❤️‍🔥❤️‍🔥❤️‍🔥面向接口"><a href="#❤️‍🔥❤️‍🔥❤️‍🔥面向接口" class="headerlink" title="❤️‍🔥❤️‍🔥❤️‍🔥面向接口"></a>❤️‍🔥❤️‍🔥❤️‍🔥面向接口</h1><h2 id="🍇🍇接口概念"><a href="#🍇🍇接口概念" class="headerlink" title="🍇🍇接口概念"></a>🍇🍇接口概念</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRetriever</span><span class="params">()</span></span> retriever &#123;</span><br><span class="line">    <span class="comment">// 两个里边都实现了Get方法，但是没有实现接口，却能使用接口的功能</span></span><br><span class="line"><span class="comment">// return testing.Retriever&#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> infar.Retriever&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?: Something that can &quot;Get&quot;</span></span><br><span class="line"><span class="keyword">type</span> retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(url <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r retriever = getRetriever()</span><br><span class="line">fmt.Println(r.Get(<span class="string">&quot;https://www.imooc.com&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>强类型语言：熟悉接口的概念 <font color="skyblue">“天上飞的理念，必然会有落地的实现”</font></li><li>弱类型语言：没（少）有接口的概念</li></ul><p><strong>这里会存在一个疑问，为什么没有实现接口却能有接口的功能呢？</strong> 听哦细细道来</p></blockquote><h2 id="🍈🍈duck-typing"><a href="#🍈🍈duck-typing" class="headerlink" title="🍈🍈duck typing"></a>🍈🍈duck typing</h2><blockquote><p>大黄鸭是鸭子吗？（不同角度看待）</p></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230606093757854.png" alt="image-20230606093757854"></p><blockquote><p>（这是因为duck typing是需要动态绑定的，但是go不具备）</p><ul><li><p>传统类型系统：脊索动物门，脊椎动物亚门，鸟纲雁形目。。。。。。</p></li><li><p>duck typing: 是鸭子</p><ul><li>”像鸭子走路，像鸭子叫（长得像鸭子)，那么就是鸭子”</li><li>描述事物的外部行为而非内部结构</li><li>严格说go属于结构化类型系统，类似duck typing</li></ul></li></ul></blockquote><h3 id="🍉python中的duck-typing"><a href="#🍉python中的duck-typing" class="headerlink" title="🍉python中的duck typing"></a>🍉python中的duck typing</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">retriever</span>):</span><br><span class="line">    <span class="keyword">return</span> retriever.get(<span class="string">&quot;www.imooc.com&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><font color="skyblue">运行时才知道</font>传入的retriever有没有get</li><li>需要注释来说明接口</li></ul></blockquote><h3 id="🍊C-中的duck-typing"><a href="#🍊C-中的duck-typing" class="headerlink" title="🍊C++中的duck typing"></a>🍊C++中的duck typing</h3><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">R</span>&gt;</span><br><span class="line">    <span class="function">string <span class="title">download</span><span class="params">(<span class="type">const</span> R&amp; retriever)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> retriever.<span class="built_in">get</span>(<span class="string">&quot;www.imooc.com&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="skyblue">编译时才知道</font>传入的retriever有没有get</li><li>需要注释来说明接口</li></ul></blockquote><h3 id="🍋java中的类似代码"><a href="#🍋java中的类似代码" class="headerlink" title="🍋java中的类似代码"></a>🍋java中的类似代码</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;R <span class="keyword">extends</span> <span class="title class_">Retriever</span>&gt;</span><br><span class="line">String <span class="title function_">download</span><span class="params">(R r)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.get(<span class="string">&quot;www.imooc.com&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>传入的参数必须实现Retriever接口</strong></li><li>不是duck typings</li></ul></blockquote><h3 id="🍌go语言的duck-typing"><a href="#🍌go语言的duck-typing" class="headerlink" title="🍌go语言的duck typing"></a>🍌go语言的duck typing</h3><blockquote><ul><li>同时需要Readable, Appendable怎么办？（apache polygene)</li><li>同时具备python, c++的duck typing的灵活性</li><li>又具有java的类型检查</li></ul></blockquote><h2 id="🍍🍍接口的定义"><a href="#🍍🍍接口的定义" class="headerlink" title="🍍🍍接口的定义"></a>🍍🍍接口的定义</h2><p><img src="/2023/06/06/go-basic-learning-week02/image-20230606100956341.png" alt="image-20230606100956341"></p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retriever实现者</span></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(url <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// download是使用者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(r Retriever)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Get(<span class="string">&quot;http://www.imooc.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r Retriever</span><br><span class="line">r = mock.Retriever&#123;<span class="string">&quot;this is a fake imooc.com&quot;</span>&#125;</span><br><span class="line">r = real2.Retriever&#123;&#125;</span><br><span class="line">fmt.Println(download(r))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现者1 mockRetriever</span></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">Contents <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Contents</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现者2 realRetriever</span></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">struct</span> &#123;</span><br><span class="line">Contents <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123; </span><br><span class="line"><span class="keyword">return</span> r.Contents</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点: interface中的Get(url string) string 必须 要和实现者中的Get方法参数类型一致</strong></p><ul><li>接口的实现是<font color="skyblue">隐式</font>的</li><li>只要实现接口里的方法</li></ul></blockquote><h2 id="🥭🥭接口的值类型"><a href="#🥭🥭接口的值类型" class="headerlink" title="🥭🥭接口的值类型"></a>🥭🥭接口的值类型</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口变量内 （值的类型， 值/指针）</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, r, r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock.Retriever &#123;this is a fake imooc.com&#125;</span></span><br><span class="line"><span class="comment">// Contents: this is a fake imooc.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// *real.Retriever &amp;&#123;Mozilla/5.0 1m0s&#125;</span></span><br><span class="line"><span class="comment">// UserAgent: Mozilla/5.0</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230606105143852.png" alt="image-20230606105143852"></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230606105204942.png" alt="image-20230606105204942"></p><blockquote><ul><li>接口变量自带指针</li><li>接口变量同样采用值传递，几乎不需要使用接口的指针</li><li>指针接收者实现只能以指针方式使用；值接收者都可</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Contents</span><br><span class="line">&#125;</span><br><span class="line">r = mock.Retriever&#123;<span class="string">&quot;this is a fake imooc.com&quot;</span>&#125;</span><br><span class="line">r = &amp;mock.Retriever&#123;<span class="string">&quot;this is a fake imooc.com&quot;</span>&#125; <span class="comment">// 两种都行</span></span><br><span class="line">inspect(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> Get(url <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    resp, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    result, err := httputil.DumpResponse(resp, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(result)</span><br><span class="line">&#125;</span><br><span class="line">r = &amp;real2.Retriever&#123; <span class="comment">// 只能以指针的方式使用</span></span><br><span class="line">    UserAgent: <span class="string">&quot;Mozilla/5.0&quot;</span>,</span><br><span class="line">    TimeOut:   time.Minute,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="🍎查看接口变量"><a href="#🍎查看接口变量" class="headerlink" title="🍎查看接口变量"></a>🍎查看接口变量</h3><blockquote><ul><li>表示任何类型：interface{}</li><li>Type Assertion</li><li>Type Switch</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface&#123;&#125; 可以接收任何类型</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(v <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, v.(<span class="type">int</span>)) <span class="comment">// 表示强制接收int类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    head := (*q)[<span class="number">0</span>]</span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> head.(<span class="type">int</span>) <span class="comment">// 表示强制返回int类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type assertion</span></span><br><span class="line"><span class="keyword">if</span> mockRetriever, ok := r.(mock.Retriever); ok &#123;</span><br><span class="line">    fmt.Println(mockRetriever.Contents)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;not a mock retriever&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type Switch</span></span><br><span class="line"><span class="keyword">switch</span> v := r.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> mock.Retriever:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Contents:&quot;</span>, v.Contents)</span><br><span class="line">    <span class="keyword">case</span> *real2.Retriever:</span><br><span class="line">    fmt.Println(<span class="string">&quot;UserAgent:&quot;</span>, v.UserAgent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🍏🍏接口的组合"><a href="#🍏🍏接口的组合" class="headerlink" title="🍏🍏接口的组合"></a>🍏🍏接口的组合</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(url <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Poster <span class="keyword">interface</span> &#123;</span><br><span class="line">    Post(url <span class="type">string</span>, form <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口的组合</span></span><br><span class="line"><span class="keyword">type</span> RetrieverPoster <span class="keyword">interface</span> &#123;</span><br><span class="line">    Retriever</span><br><span class="line">    Poster</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 源码中存在大量这样的设计</span></span><br><span class="line"><span class="comment">// ReadWriteCloser is the interface that groups the basic Read, Write and Close methods.</span></span><br><span class="line"><span class="keyword">type</span> ReadWriteCloser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🍐🍐常用系统接口"><a href="#🍐🍐常用系统接口" class="headerlink" title="🍐🍐常用系统接口"></a>🍐🍐常用系统接口</h2><blockquote><ul><li>Stringer （相当于java的toSring）</li><li>Reader&#x2F;Writer （有了更强大的读写功能，不单单只是读写文件）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于是重写了toString方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Retriever)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">//TODO implement me</span></span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Retriever: &#123;Contents=%s&#125;&quot;</span>, r.Contents)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用io.Reader功能更强大了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContents</span><span class="params">(reader io.Reader)</span></span> &#123;</span><br><span class="line">    scanner := bufio.NewScanner(reader)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        fmt.Println(scanner.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="🍑🍑🍑函数式编程"><a href="#🍑🍑🍑函数式编程" class="headerlink" title="🍑🍑🍑函数式编程"></a>🍑🍑🍑函数式编程</h1><h2 id="🍒🍒函数式编程-vs-函数指针"><a href="#🍒🍒函数式编程-vs-函数指针" class="headerlink" title="🍒🍒函数式编程 vs 函数指针"></a>🍒🍒函数式编程 vs 函数指针</h2><blockquote><ul><li>函数式一等公民：参数，变量，返回值都可以是函数</li><li>高阶函数</li><li>函数 -&gt; 闭包</li></ul></blockquote><h2 id="🍓🍓”正统“-函数式编程"><a href="#🍓🍓”正统“-函数式编程" class="headerlink" title="🍓🍓”正统“ 函数式编程"></a>🍓🍓”正统“ 函数式编程</h2><blockquote><ul><li>不可变性：不能有状态，只能有常量和函数</li><li>函数只能有一个参数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正统的函数式编程满足了上面的两个条件</span></span><br><span class="line"><span class="keyword">type</span> iAdder <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder2</span><span class="params">(base <span class="type">int</span>)</span></span> iAdder &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> (<span class="type">int</span>, iAdder) &#123;</span><br><span class="line">        <span class="keyword">return</span> base + v, adder2(base + v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🫐🫐闭包"><a href="#🫐🫐闭包" class="headerlink" title="🫐🫐闭包"></a>🫐🫐闭包</h2><p><img src="/2023/06/06/go-basic-learning-week02/image-20230607091820416.png" alt="image-20230607091820416"></p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span> <span class="comment">// 自由变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 返回的是函数的引用，同时会把自由变量保存下来</span></span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="🥝python中的闭包"><a href="#🥝python中的闭包" class="headerlink" title="🥝python中的闭包"></a>🥝python中的闭包</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>():</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">value</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">sum</span> += value</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure><ul><li>python原生支持闭包</li><li>使用<code>__closure__</code>来查看闭包内容</li></ul></blockquote><h3 id="🍅C-中的闭包"><a href="#🍅C-中的闭包" class="headerlink" title="🍅C++中的闭包"></a>🍅C++中的闭包</h3><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要在c++14才能跑通这段代码</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">adder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> [=] (<span class="type">int</span> value) <span class="keyword">mutable</span> &#123;</span><br><span class="line">        sum += value;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过去：stl或者boost带有类似库</li><li>c++11及以后：支持闭包</li></ul></blockquote><h3 id="🫒java中的闭包"><a href="#🫒java中的闭包" class="headerlink" title="🫒java中的闭包"></a>🫒java中的闭包</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Holder就是自定义的一个class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Holder</span>() &#123; </span><br><span class="line">    Integer value;</span><br><span class="line">&#125;</span><br><span class="line">Function&lt;Integer, Integer&gt; <span class="title function_">adder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Holder&lt;Integer&gt; sum = <span class="keyword">new</span> <span class="title class_">Holder</span>&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (Integer value) -&gt; &#123;</span><br><span class="line">        sum.value += value;</span><br><span class="line">        <span class="keyword">return</span> sum.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1.8以后：使用Function接口和Lambda表达式来创建函数对象</li><li>匿名类或Lambda表达式均支持闭包</li></ul></blockquote><h3 id="🥥go语言闭包的使用"><a href="#🥥go语言闭包的使用" class="headerlink" title="🥥go语言闭包的使用"></a>🥥go语言闭包的使用</h3><blockquote><ul><li>斐波那契数列</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</span></span><br><span class="line"><span class="comment">//   a, b</span></span><br><span class="line"><span class="comment">//     a, a+b</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为函数实现接口</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> intGen <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g intGen)</span></span> Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    next := g()</span><br><span class="line">    <span class="keyword">if</span> next &gt; <span class="number">10000</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, io.EOF</span><br><span class="line">    &#125;</span><br><span class="line">    s := fmt.Sprintf(<span class="string">&quot;%d\n&quot;</span>, next)</span><br><span class="line">    <span class="keyword">return</span> strings.NewReader(s).Read(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用函数来遍历二叉树</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TraverseFunc(f <span class="function"><span class="keyword">func</span><span class="params">(*Node)</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    node.Left.TraverseFunc(f)</span><br><span class="line">    f(node) <span class="comment">// 由自己决定该做什么</span></span><br><span class="line">    node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统计结点个数</span></span><br><span class="line">nodeCount := <span class="number">0</span></span><br><span class="line">root.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *tree.Node)</span></span> &#123;</span><br><span class="line">    nodeCount++</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">&quot;Node count: &quot;</span>, nodeCount)</span><br></pre></td></tr></table></figure><p>工语言闭包的应用</p><ul><li>更为自然，不需要修饰如何访问自由变量</li><li>没有Lambda表达式，但是又匿名函数</li></ul></blockquote><h1 id="🥑🥑🥑错误处理和资源管理"><a href="#🥑🥑🥑错误处理和资源管理" class="headerlink" title="🥑🥑🥑错误处理和资源管理"></a>🥑🥑🥑错误处理和资源管理</h1><h2 id="🍆🍆defer调用"><a href="#🍆🍆defer调用" class="headerlink" title="🍆🍆defer调用"></a>🍆🍆defer调用</h2><blockquote><ul><li>确保调用在函数结束时发生</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span> &#123; <span class="comment">// defer 会在函数结束时调用 栈的方式</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">println</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">println</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;error occurred&quot;</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数在defer语句时计算</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tyrDefer2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">30</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(<span class="string">&quot;printed too many&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="skyblue">defer列表为后进先出（栈）</font></li></ul></blockquote><h3 id="🥔何时使用defer调用"><a href="#🥔何时使用defer调用" class="headerlink" title="🥔何时使用defer调用"></a>🥔何时使用defer调用</h3><blockquote><ul><li>Open&#x2F;Close</li><li>Lock&#x2F;Unlock</li><li>PrintHeader&#x2F;PrintFooter</li></ul></blockquote><h2 id="🥕🥕错误处理一"><a href="#🥕🥕错误处理一" class="headerlink" title="🥕🥕错误处理一"></a>🥕🥕错误处理一</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">&quot;abc.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> pathError, ok := err.(*os.PathError); ok &#123;</span><br><span class="line">        fmt.Println(pathError.Err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;unknown error&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🌽🌽错误处理二"><a href="#🌽🌽错误处理二" class="headerlink" title="🌽🌽错误处理二"></a>🌽🌽错误处理二</h2><blockquote><ul><li>如何实现统一的错误处理逻辑（封装+函数作为参数和返回值）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handler.go</span></span><br><span class="line"><span class="comment">// 封装操作和产生错误信息的过程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFileList</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    path := request.URL.Path[<span class="built_in">len</span>(<span class="string">&quot;/list/&quot;</span>):]</span><br><span class="line">    file, err := os.Open(path)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    bytes, err := ioutil.ReadAll(file)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    writer.Write(bytes)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// web.go</span></span><br><span class="line"><span class="comment">// 函数作为参数和返回值</span></span><br><span class="line"><span class="keyword">type</span> appHandler <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于统一处理错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errWrapper</span><span class="params">(handler appHandler)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        err := handler(writer, request)</span><br><span class="line">        <span class="comment">//defer func() &#123;</span></span><br><span class="line">        <span class="comment">//r := recover()</span></span><br><span class="line">        <span class="comment">//if r != nil &#123;</span></span><br><span class="line">        <span class="comment">//log.Printf(&quot;Panic: %v&quot;, r)</span></span><br><span class="line">        <span class="comment">//http.Error(writer, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//&#125;()</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;Error handling request: &quot;</span>, err.Error())</span><br><span class="line">            <span class="comment">//if userErr, ok := err.(userError); ok &#123; // 用户可以看到的错误</span></span><br><span class="line">            <span class="comment">//http.Error(writer, userErr.Message(), http.StatusBadRequest)</span></span><br><span class="line">            <span class="comment">//return</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            code := http.StatusOK</span><br><span class="line">            <span class="keyword">switch</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> os.IsNotExist(err):</span><br><span class="line">                code = http.StatusNotFound <span class="comment">// 404 未找到</span></span><br><span class="line">                <span class="keyword">case</span> os.IsPermission(err):</span><br><span class="line">                code = http.StatusForbidden <span class="comment">// 403 禁止访问</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                code = http.StatusInternalServerError <span class="comment">// 500 内部服务器错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            http.Error(writer, http.StatusText(code), code)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main函数入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/list/&quot;</span>, errWrapper(filelisting.HandleFileList))</span><br><span class="line"><span class="comment">// http://localhost:8888/list/fib.txt</span></span><br><span class="line">    err := http.ListenAndServe(<span class="string">&quot;:8888&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在要确定哪些错误是可以给用户看到的</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handler.go 增加了</span></span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">&quot;/list/&quot;</span></span><br><span class="line"><span class="keyword">type</span> userError <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u userError)</span></span> Error() <span class="type">string</span> &#123; <span class="comment">// 给开发者看的错误信息</span></span><br><span class="line">    <span class="comment">//TODO implement me</span></span><br><span class="line">    <span class="keyword">return</span> u.Message()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u userError)</span></span> Message() <span class="type">string</span> &#123; <span class="comment">// 给用户看的错误信息</span></span><br><span class="line">    <span class="comment">//TODO implement me</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(u)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFileList</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 判断路径是否是以 /list/ 开头</span></span><br><span class="line">    <span class="keyword">if</span> strings.Index(request.URL.Path, prefix) != <span class="number">0</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> userError(<span class="string">&quot;path must start with &quot;</span> + prefix)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// web.go 增加了</span></span><br><span class="line"><span class="keyword">type</span> userError <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="type">error</span>            <span class="comment">// 给开发者看的错误信息</span></span><br><span class="line">    Message() <span class="type">string</span> <span class="comment">// 给用户看的错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// errWapper中增加部分</span></span><br><span class="line"><span class="comment">// 自定义recover后的处理</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">recover</span>()</span><br><span class="line">    <span class="keyword">if</span> r != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Panic: %v&quot;</span>, r)</span><br><span class="line">        http.Error(writer, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 判断是不是用户错误</span></span><br><span class="line"><span class="keyword">if</span> userErr, ok := err.(userError); ok &#123; </span><br><span class="line">    http.Error(writer, userErr.Message(), http.StatusBadRequest)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🌶🌶recover"><a href="#🌶🌶recover" class="headerlink" title="🌶🌶recover"></a>🌶🌶recover</h2><blockquote><p><font color="skyblue">recover就是在确保程序出现error或者panic后不宕机，这是go语言对应服务错误的一种保护机制</font></p><ul><li>仅在defer调用中使用</li><li>获取panic的值</li><li>如果无法处理，可重新panic</li></ul></blockquote><h2 id="🫑🫑error-vs-panic"><a href="#🫑🫑error-vs-panic" class="headerlink" title="🫑🫑error vs panic"></a>🫑🫑error vs panic</h2><blockquote><ul><li>意料之中的：使用error。如：文件打不开</li><li>意料之外的：使用panic。如：数组越界</li></ul></blockquote><h2 id="🥒🥒错误处理的综合实例"><a href="#🥒🥒错误处理的综合实例" class="headerlink" title="🥒🥒错误处理的综合实例"></a>🥒🥒错误处理的综合实例</h2><blockquote><ul><li>defer + panic + recover</li><li>Type Assertion</li><li>函数式编程的应用</li></ul><p>对Type Assertion进行解释：</p><p>go提供了一种方式让我们可以<font color="skyblue">判断某个接口所绑定的类型是否携有某种其他类型</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t, ok := i.(T)</span><br><span class="line">userErr, ok := err.(userError) <span class="comment">//判断返回的err中有没有userError这种类型</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="🦀🦀🦀测试"><a href="#🦀🦀🦀测试" class="headerlink" title="🦀🦀🦀测试"></a>🦀🦀🦀测试</h1><p><img src="/2023/06/06/go-basic-learning-week02/image-20230607221401956.png" alt="image-20230607221401956"></p><h2 id="🦞🦞传统测试-vs-表格驱动测试"><a href="#🦞🦞传统测试-vs-表格驱动测试" class="headerlink" title="🦞🦞传统测试 vs 表格驱动测试"></a>🦞🦞传统测试 vs 表格驱动测试</h2><h3 id="🦐传统测试"><a href="#🦐传统测试" class="headerlink" title="🦐传统测试"></a>🦐传统测试</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123; <span class="comment">// java</span></span><br><span class="line">    assertEquals(<span class="number">3</span>,add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    assertEquals(<span class="number">2</span>,add(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    assertEquals(<span class="number">0</span>,add(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    assertEquals(<span class="number">0</span>,add(-<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">    assertEquals(Integer.MIN_VALUE, add(<span class="number">1</span>, Integer.MAX_VALUE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试数据和测试逻辑混在一起</li><li>出错信息不明确</li><li>一旦一个数据出错测试全部结束</li></ul></blockquote><h3 id="🦑表格驱动测试"><a href="#🦑表格驱动测试" class="headerlink" title="🦑表格驱动测试"></a>🦑表格驱动测试</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试勾股定理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTriangle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span>&#123; a, b, c <span class="type">int</span> &#125;&#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, <span class="number">15</span>, <span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="number">12</span>, <span class="number">35</span>, <span class="number">37</span>&#125;,</span><br><span class="line">        &#123;<span class="number">30000</span>, <span class="number">40000</span>, <span class="number">50000</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        <span class="keyword">if</span> actual := calcTriangle(tt.a, tt.b); actual != tt.c &#123;</span><br><span class="line">            t.Errorf(<span class="string">&quot;calcTriangle(%d,%d); &quot;</span>+</span><br><span class="line">                     <span class="string">&quot;got %d; expected %d&quot;</span>,</span><br><span class="line">                     tt.a, tt.b, actual, tt.c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分离的测试数据和测试逻辑</li><li>明确的出错信息</li><li>可以部分失败</li></ul></blockquote><h2 id="🦪🦪代码覆盖率"><a href="#🦪🦪代码覆盖率" class="headerlink" title="🦪🦪代码覆盖率"></a>🦪🦪代码覆盖率</h2><blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608093542543.png" alt="image-20230608093542543"></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608093637100.png" alt="image-20230608093637100"></p><p>下面使用命令行cmd进行测试</p><ul><li><code>go test -coverprofile=&quot;c.out&quot;</code>（<font color="red">注意：我是要加上“”才能执行成功)</font></li><li><code>go tool cover -html=&quot;c.out&quot;</code></li></ul><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608101853833.png" alt="image-20230608101853833"></p></blockquote><p>使用命令行cmd进行测试</p><h2 id="🍦🍦性能测试"><a href="#🍦🍦性能测试" class="headerlink" title="🍦🍦性能测试"></a>🍦🍦性能测试</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试速度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSubstr</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span></span><br><span class="line">    ans := <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        actual := lengthOfNonRepeatingSubStr(s)</span><br><span class="line">        <span class="keyword">if</span> actual != ans &#123;</span><br><span class="line">            b.Errorf(<span class="string">&quot;Got %d for input %s; expected %d&quot;</span>, actual, s, ans)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">goos: windows </span><br><span class="line">goarch: amd64 </span><br><span class="line">pkg: imooc.com/ccmouse/learngo/chapter01/nonrepeatingsubstr</span><br><span class="line">cpu: Intel(R) Core(TM) i5-1035G1 CPU @ 1.00GHz</span><br><span class="line">BenchmarkSubstr</span><br><span class="line">BenchmarkSubstr-8        1224705(测试次数)       1014 ns/op（每次耗费的时间）</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><ul><li><code>go test -bench .</code></li></ul></blockquote><h2 id="🍧🍧使用pprof进行性能调优"><a href="#🍧🍧使用pprof进行性能调优" class="headerlink" title="🍧🍧使用pprof进行性能调优"></a>🍧🍧使用pprof进行性能调优</h2><blockquote><p>步骤如下：</p><ul><li><code>go test -bench .</code> (选做)</li><li><code> go test -bench . -cpuprofile cpu.out</code></li><li><code>go tool pprof .\cpu.out</code></li><li><code>(pprof) web</code> （前提是下载好<a href="https://www.graphviz.org/">Graphviz</a>，同时配置好环境变量即可）</li></ul><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608110808876.png" alt="image-20230608110808876"></p><blockquote><p>选择 Add Graphiz to the system PATH for all users 后<strong>自动配置环境变量</strong></p></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608111418960.png" alt="image-20230608111418960"></p><p><font color="skyblue">红框越大，箭头越粗则表示耗时越长</font></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608111844267.png" alt="image-20230608111844267"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据Graphviz图选择对map进行优化 空间换时间</span></span><br><span class="line"><span class="keyword">var</span> lastOccurred = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0xffff</span>) <span class="comment">// 65535</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfNonRepeatingSubStr</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//lastOccurred := make(map[rune]int) map耗时多</span></span><br><span class="line">    <span class="comment">// lastOccurred[&#x27;e&#x27;] = 1</span></span><br><span class="line">    <span class="comment">// lastOccurred[0x65] = 6  &#x27;e&#x27; = 0x65</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> lastOccurred &#123;</span><br><span class="line">        lastOccurred[i] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">    maxLength := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="type">rune</span>(s) &#123;</span><br><span class="line">        <span class="keyword">if</span> lastI := lastOccurred[ch]; lastI != <span class="number">-1</span> &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">            start = lastI + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i-start+<span class="number">1</span> &gt; maxLength &#123;</span><br><span class="line">            maxLength = i - start + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        lastOccurred[ch] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能调优步骤：</p><ul><li>-cpuprofile获取性能数据</li><li>go tool pprof 查看性能数据</li><li>分析慢在哪里</li><li>优化代码</li></ul></blockquote><h2 id="🍨🍨http测试"><a href="#🍨🍨http测试" class="headerlink" title="🍨🍨http测试"></a>🍨🍨http测试</h2><blockquote><ul><li>通过使用假的Request&#x2F;Response （快，粒度细，像单元测试）</li><li>通过起服务器 (集成度高，代码覆盖率高，但是慢)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是测试了错误处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestErrorWrapper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        f := errWrapper(tt.h)</span><br><span class="line">        response := httptest.NewRecorder()</span><br><span class="line">        request := httptest.NewRequest(http.MethodGet, <span class="string">&quot;http://www.imooc.com&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        f(response, request)</span><br><span class="line">        verifyResponse(response.Result(), tt.code, tt.message, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试了整个服务器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestErrWrapperInServer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        f := errWrapper(tt.h)</span><br><span class="line">        server := httptest.NewServer(http.HandlerFunc(f))</span><br><span class="line">        resp, _ := http.Get(server.URL)</span><br><span class="line">        verifyResponse(resp, tt.code, tt.message, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🍩🍩生成文档和实例代码"><a href="#🍩🍩生成文档和实例代码" class="headerlink" title="🍩🍩生成文档和实例代码"></a>🍩🍩生成文档和实例代码</h2><blockquote><p>使用 go doc 查看文档</p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608163914918.png" alt="image-20230608163914918"></p><p>使用 godoc 生成文档</p><p><font color="red">注意可能会执行失败，说无法识别godoc</font></p><ul><li><code>go get golang.org/x/tools/cmd/godoc</code> 执行该指令即可（最好科学上网）</li></ul><p>成功后执行 <code>godoc -http :6060</code></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608164314967.png" alt="image-20230608164314967"></p><p>可以看到自己项目的目录结构了</p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608164348977.png" alt="image-20230608164348977"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应注释 queue.go</span></span><br><span class="line"><span class="comment">// An FIFO queue</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// Pushes the element into the queue</span></span><br><span class="line"><span class="comment">// q.Push(123)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(v <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pops element from head</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    head := (*q)[<span class="number">0</span>]</span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> head.(<span class="type">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Returns if the queue is empty or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608164544009.png" alt="image-20230608164544009"></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608164652959.png" alt="image-20230608164652959"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应代码 queue_test.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleQueue_Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    q := Queue&#123;<span class="number">1</span>&#125;</span><br><span class="line">    q.Push(<span class="number">2</span>)</span><br><span class="line">    q.Push(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(q.Pop())</span><br><span class="line">    fmt.Println(q.Pop())</span><br><span class="line">    fmt.Println(q.IsEmpty())</span><br><span class="line">    fmt.Println(q.Pop())</span><br><span class="line">    fmt.Println(q.IsEmpty())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output: 要写了Output才会有执行箭头</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="🍪文档"><a href="#🍪文档" class="headerlink" title="🍪文档"></a>🍪文档</h3><blockquote><ul><li>用注释写文档</li><li>在测试中加入Example</li><li>使用 go doc (查看) &#x2F; godoc（生成）文档</li></ul></blockquote><h1 id="🎂🎂🎂Goroutine"><a href="#🎂🎂🎂Goroutine" class="headerlink" title="🎂🎂🎂Goroutine"></a>🎂🎂🎂Goroutine</h1><blockquote><p>只需要一个<code>go</code>关键字就可以实现并发编程啦</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="comment">// I/O操作会进行线程（协程）切换</span></span><br><span class="line">            fmt.Printf(<span class="string">&quot;Hello from goroutine %d\n&quot;</span>, i) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去掉I/O操作，验证是否是非抢占式的协程</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            a[i]++</span><br><span class="line">            runtime.Gosched() <span class="comment">// 交出控制权</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><ul><li><code>go run -race .\goroutine.go</code> 可以查看是否存在 <code>race condition! （计算机）竞态条件</code></li></ul><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608200414918.png" alt="image-20230608200414918"></p></blockquote><h2 id="🍬🍬协程-Coroutine"><a href="#🍬🍬协程-Coroutine" class="headerlink" title="🍬🍬协程 Coroutine"></a>🍬🍬协程 Coroutine</h2><blockquote><p>go 内部是 协程</p><ul><li>轻量级“线程”</li><li><font color="red">非抢占式</font>多任务处理，由协程主动交出控制权</li><li>编译器&#x2F;解释器&#x2F;虚拟机层面的多任务（os没有协程）</li><li>多个协程可能在一个或多个线程上运行</li></ul></blockquote><h2 id="🍭🍭go语言的调度器"><a href="#🍭🍭go语言的调度器" class="headerlink" title="🍭🍭go语言的调度器"></a>🍭🍭go语言的调度器</h2><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608201544168.png" alt="image-20230608201544168"></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608204433658.png" alt="image-20230608204433658"></p><h3 id="🐕其他语言中的协程"><a href="#🐕其他语言中的协程" class="headerlink" title="🐕其他语言中的协程"></a>🐕其他语言中的协程</h3><blockquote><ul><li>C++：Boost.Coroutine</li><li>Java：不支持</li><li>python中的协程<ul><li>使用yield关键字实现协程</li><li>Python3.5加入了<code>async def</code>对协程原生支持</li></ul></li></ul></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608201952155.png" alt="image-20230608201952155"></p><h2 id="🥵🥵goroutine的定义"><a href="#🥵🥵goroutine的定义" class="headerlink" title="🥵🥵goroutine的定义"></a>🥵🥵goroutine的定义</h2><blockquote><ul><li>任何函数只需加上go就能送给调度器运行</li><li>不需要在定义时区分是否是异步函数</li><li>调度器在合适的点进行切换</li><li>使用-race来检测数据访问冲突</li></ul></blockquote><h2 id="🤓🤓goroutine可能的切换点"><a href="#🤓🤓goroutine可能的切换点" class="headerlink" title="🤓🤓goroutine可能的切换点"></a>🤓🤓goroutine可能的切换点</h2><blockquote><ul><li>I&#x2F;O,select</li><li>channel</li><li>等待锁</li><li>函数调用（有时）</li><li>runtime.Gosched()</li></ul><p>只是参考，不能保证切换，不能保证在其他地方不切换</p></blockquote><h2 id="🤲🤲查看线程数"><a href="#🤲🤲查看线程数" class="headerlink" title="🤲🤲查看线程数"></a>🤲🤲查看线程数</h2><blockquote><p>Linunx 使用<code> top</code>， Windows没有找到💦💦💦</p><p>这里的 X&#x2F;Y: <strong>Y的最大值取决于电脑的核数</strong></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608203956811.png" alt="image-20230608203956811"></p></blockquote><h1 id="🦊🦊🦊Channel（管道）"><a href="#🦊🦊🦊Channel（管道）" class="headerlink" title="🦊🦊🦊Channel（管道）"></a>🦊🦊🦊Channel（管道）</h1><blockquote><p>Channel的理论基础：Communication Sequential Process(CSP)</p></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608212221388.png" alt="image-20230608212221388"></p><blockquote><ul><li>Channel as first-class citizen</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// channel作为一等公民，可以用作参数，返回值，数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Worker %d received %c\n&quot;</span>, id, &lt;-c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] = createWorker(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        channels[i] &lt;- <span class="string">&#x27;A&#x27;</span> + i</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">这里有个难点就是如何区分 <code>chan&lt;- 和 &lt;-chan</code> </font></p><p>我的理解是：这里的 n &#x3D; 变量</p><ul><li><p><strong>chan&lt;- 表明数据只能向管道发送，（对于n，即只能发送不能接收）</strong></p></li><li><p><strong>&lt;-chan 表明数据只能从管道出去，（对于n，即只能接收不能发送）</strong></p></li><li><p>Buffered channel</p></li></ul><p>一般只要channel中有数据但是没有人接收，那么就会报错 ！deadLock！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufferedChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>) <span class="comment">// 表示可以缓存3个数据</span></span><br><span class="line">    <span class="keyword">go</span> worker(<span class="number">0</span>, c)</span><br><span class="line">    c &lt;- <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;d&#x27;</span></span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Channel close and range</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种发送方关闭方式</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    n, ok := &lt;-c</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送方主动关闭</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">channelClose</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">go</span> worker(<span class="number">0</span>, c)</span><br><span class="line">    c &lt;- <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    c &lt;- <span class="string">&#x27;d&#x27;</span></span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2023/06/06/go-basic-learning-week02/image-20230608215513102.png" alt="image-20230608215513102"></p><h2 id="🐵🐵例一：使用Channel来等待goroutine结束"><a href="#🐵🐵例一：使用Channel来等待goroutine结束" class="headerlink" title="🐵🐵例一：使用Channel来等待goroutine结束"></a>🐵🐵例一：使用Channel来等待goroutine结束</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// done.go</span></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">     in   <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">     done <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">doWork</span><span class="params">(id <span class="type">int</span>, w worker)</span></span> &#123;</span><br><span class="line">     <span class="keyword">for</span> n := <span class="keyword">range</span> w.in &#123;</span><br><span class="line">           fmt.Printf(<span class="string">&quot;Worker %d received %c\n&quot;</span>, id, n)</span><br><span class="line">           <span class="comment">//go func() &#123; done &lt;- true &#125;() 最直接的一种解决方法</span></span><br><span class="line">           w.done()</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> worker &#123;</span><br><span class="line">     w := worker&#123;</span><br><span class="line">           in: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">           done: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">               wg.Done()</span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">go</span> doWork(id, w)</span><br><span class="line">       <span class="keyword">return</span> w</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">chanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">     <span class="keyword">var</span> workers [<span class="number">10</span>]worker</span><br><span class="line">       <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">           workers[i] = createWorker(i, &amp;wg)</span><br><span class="line">       &#125;</span><br><span class="line">       wg.Add(<span class="number">20</span>)</span><br><span class="line">       <span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">           worker.in &lt;- <span class="string">&#x27;a&#x27;</span> + i</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> i, worker := <span class="keyword">range</span> workers &#123;</span><br><span class="line">           worker.in &lt;- <span class="string">&#x27;A&#x27;</span> + i</span><br><span class="line">       &#125;</span><br><span class="line">       wg.Wait()</span><br><span class="line">       <span class="comment">// wait for all of them</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>WaitGroup的使用</li><li>声明 <code>var wg sync.WaitGroup</code></li><li><code>wg.Add(n)</code>“添加”会将增量（可能为负数）添加到等待组计数器</li><li><code>wg.Done</code> 本质就是 <code>wg.Add(-1)</code></li><li><code> wg.Wait()</code> 等待块，直到等待组计数器为零。</li><li>如果计数器变为零，则释放在 Wait 上阻塞的所有 goroutine。</li></ul></blockquote><h2 id="🐒🐒例二：使用Channel实现树的遍历"><a href="#🐒🐒例二：使用Channel实现树的遍历" class="headerlink" title="🐒🐒例二：使用Channel实现树的遍历"></a>🐒🐒例二：使用Channel实现树的遍历</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TraverseFunc 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TraverseFunc(f <span class="function"><span class="keyword">func</span><span class="params">(*Node)</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    node.Left.TraverseFunc(f)</span><br><span class="line">    f(node)</span><br><span class="line">    node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span></span> TraverseWithChannel() <span class="keyword">chan</span> *Node &#123;</span><br><span class="line">    out := <span class="built_in">make</span>(<span class="keyword">chan</span> *Node)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        node.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">            out &lt;- node</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 channel 遍历</span></span><br><span class="line">c := root.TraverseWithChannel()</span><br><span class="line">maxNode := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> node := <span class="keyword">range</span> c &#123;</span><br><span class="line">    <span class="keyword">if</span> node.Value &gt; maxNode &#123;</span><br><span class="line">        maxNode = node.Value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Max node value: &quot;</span>, maxNode)</span><br></pre></td></tr></table></figure></blockquote><h2 id="🦍🦍例三：使用Select来进行调度"><a href="#🦍🦍例三：使用Select来进行调度" class="headerlink" title="🦍🦍例三：使用Select来进行调度"></a>🦍🦍例三：使用Select来进行调度</h2><blockquote><ul><li>Select 的使用</li><li>定时器的使用</li><li>在Select中使用Nil Channel</li></ul><p>对 <code>Nil Channel</code>进行解释</p><blockquote><p>当未为channel分配内存时，channel就是nil channel，例如var ch1 chan int。nil channel会永远阻塞对该channel的读、写操作。</p><p>nil channel会阻塞对该channel的所有读、写。所以，可以将某个channel设置为nil，进行强制阻塞，对于select分支来说，就是<font color="skyblue"><strong>强制禁用此分支</strong></font>。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generator只是生产数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">    out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            time.Sleep(time.Duration(rand.Intn(<span class="number">1500</span>)) * time.Millisecond)</span><br><span class="line">            out &lt;- i</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 真正做事的是worker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker %d received %d\n&quot;</span>, id, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="type">int</span>)</span></span> <span class="keyword">chan</span>&lt;- <span class="type">int</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> worker(id, c)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c1, c2 = generator(), generator()</span><br><span class="line">    <span class="keyword">var</span> worker = createWorker(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> values []<span class="type">int</span></span><br><span class="line">    tm := time.After(<span class="number">10</span> * time.Second)</span><br><span class="line">    tick := time.Tick(time.Second)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> activeWorker <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">        <span class="keyword">var</span> activeValue <span class="type">int</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(values) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            activeWorker = worker</span><br><span class="line">            activeValue = values[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> n := &lt;-c1:</span><br><span class="line">            values = <span class="built_in">append</span>(values, n)</span><br><span class="line">            <span class="keyword">case</span> n := &lt;-c2:</span><br><span class="line">            values = <span class="built_in">append</span>(values, n)</span><br><span class="line">            <span class="keyword">case</span> activeWorker &lt;- activeValue: <span class="comment">// 这里使用了Nil Channel机制</span></span><br><span class="line">            values = values[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">case</span> &lt;-time.After(<span class="number">800</span> * time.Millisecond):</span><br><span class="line">            fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> &lt;-tick:</span><br><span class="line">            fmt.Println(<span class="string">&quot;queue len = &quot;</span>, <span class="built_in">len</span>(values))</span><br><span class="line">            <span class="keyword">case</span> &lt;-tm:</span><br><span class="line">            fmt.Println(<span class="string">&quot;bye&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🦧🦧传统同步机制"><a href="#🦧🦧传统同步机制" class="headerlink" title="🦧🦧传统同步机制"></a>🦧🦧传统同步机制</h2><blockquote><ul><li>WaitGoup</li><li>sync.Mutex 通常用来保护临界区和共享资源</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> atomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    lock  sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> increment() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;safe increment&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        a.lock.Lock()</span><br><span class="line">        <span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">        a.value++</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *atomicInt)</span></span> get() <span class="type">int</span> &#123;</span><br><span class="line">    a.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line">    <span class="keyword">return</span> a.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sync.Cond 用来协调想要访问的共享资源</li></ul></blockquote><h2 id="🐶🐶并发编程模式"><a href="#🐶🐶并发编程模式" class="headerlink" title="🐶🐶并发编程模式"></a>🐶🐶并发编程模式</h2><blockquote><ul><li>生成器</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消息生成器 返回chan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            time.Sleep(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond)</span><br><span class="line">            c &lt;- fmt.Sprintf(<span class="string">&quot;service: %s, message: %d&quot;</span>, name, i)</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务&#x2F;任务</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于拿到了不同的服务</span></span><br><span class="line">m1 := msgGen(<span class="string">&quot;service1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;service2&quot;</span>)</span><br><span class="line"><span class="comment">// m := fanIn(m1, m2)</span></span><br></pre></td></tr></table></figure><ul><li>同时等待多个服务：两种方法</li></ul><p>方法一：开多个goroutine</p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230610094833006.png" alt="image-20230610094833006"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适用于我们不知道有多少个channel的情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(chs ...<span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">for</span> _, ch := <span class="keyword">range</span> chs &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">string</span>)</span></span> &#123; <span class="comment">// 使用函数传参避免问题</span></span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                c &lt;- &lt;-ch</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(ch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：Select</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适用于我们知道有多少个channel的情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanInBySelect</span><span class="params">(c1, c2 <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> m := &lt;-c1:</span><br><span class="line">                c &lt;- m</span><br><span class="line">                <span class="keyword">case</span> m := &lt;-c2:</span><br><span class="line">                c &lt;- m</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="🦝🦝任务的控制"><a href="#🦝🦝任务的控制" class="headerlink" title="🦝🦝任务的控制"></a>🦝🦝任务的控制</h2><blockquote><ul><li>非阻塞等待<ul><li>如果m1到了m2没有到，就会 <code>no message received</code></li><li>如果m1到了同时m2也到了，就会输出 <code>service service2:message ?</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonBlockingWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> m := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> m, <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line">m1 := msgGen(<span class="string">&quot;service1&quot;</span>)</span><br><span class="line">m2 := msgGen(<span class="string">&quot;service2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(&lt;-m1)</span><br><span class="line">    <span class="keyword">if</span> m, ok := nonBlockingWait(m2); ok &#123;</span><br><span class="line">        fmt.Println(m)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;no message received&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>超时机制<ul><li>如果 <code>1000*time.Millisecond</code>内到了，输出：<code>service service1:message ?</code></li><li>如果在指定时间内没有到，输出：<code>timeout</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeoutWait</span><span class="params">(c <span class="keyword">chan</span> <span class="type">string</span>, timeout time.Duration)</span></span> (<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> m := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> m, <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line">m1 := msgGen(<span class="string">&quot;service1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> m, ok := timeoutWait(m1, <span class="number">1000</span>*time.Millisecond); ok &#123;</span><br><span class="line">        fmt.Println(m)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>任务中断&#x2F;退出</li><li>优雅退出</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面两点的结合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">msgGen</span><span class="params">(name <span class="type">string</span>, done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> &lt;-time.After(time.Duration(rand.Intn(<span class="number">2000</span>)) * time.Millisecond):</span><br><span class="line">                c &lt;- fmt.Sprintf(<span class="string">&quot;service: %s, message: %d&quot;</span>, name, i)</span><br><span class="line">                <span class="keyword">case</span> &lt;-done: <span class="comment">// 外面通知我要退出了</span></span><br><span class="line">                fmt.Println(<span class="string">&quot;Cleaning Up&quot;</span>)</span><br><span class="line">                time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">                fmt.Println(<span class="string">&quot;Cleaning Done&quot;</span>)</span><br><span class="line">                done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 通知外面我已经退出了</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="comment">// 第一个&#123;&#125;表示struct&#123;&#125;类型的值，第二个&#123;&#125;表示初始化该类型</span></span><br><span class="line">done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 通知service1退出</span></span><br><span class="line">&lt;-done <span class="comment">// 等待service1退出</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="🐱🐱🐱迷宫的广度优先搜索"><a href="#🐱🐱🐱迷宫的广度优先搜索" class="headerlink" title="🐱🐱🐱迷宫的广度优先搜索"></a>🐱🐱🐱迷宫的广度优先搜索</h1><h2 id="🦌🦌广度优先算法（BFS"><a href="#🦌🦌广度优先算法（BFS" class="headerlink" title="🦌🦌广度优先算法（BFS)"></a>🦌🦌广度优先算法（BFS)</h2><blockquote><ul><li>为爬虫实战项目做好准备</li><li>应用广泛，综合性强</li><li>面试常见</li></ul><p><img src="/2023/06/06/go-basic-learning-week02/image-20230610114732824.png" alt="image-20230610114732824"></p><p><img src="/2023/06/06/go-basic-learning-week02/image-20230610114811652.png" alt="image-20230610114811652"></p><p>广度优先搜索走迷宫：</p><ul><li>用循环创建二维slice</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化步数矩阵 全都为0</span></span><br><span class="line">steps := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="built_in">len</span>(maze))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> steps &#123;</span><br><span class="line">    steps[i] = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(maze[i]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用slice来实现队列</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q := []point&#123;start&#125; <span class="comment">// 初始化队列</span></span><br><span class="line">cur := Q[<span class="number">0</span>]</span><br><span class="line">Q = Q[<span class="number">1</span>:]</span><br><span class="line">Q = <span class="built_in">append</span>(Q, next)</span><br></pre></td></tr></table></figure><ul><li>用<code>scanner := bufio.NewScanner(file)</code>读取文件</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMaze</span><span class="params">(filename <span class="type">string</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    file, err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    scanner := bufio.NewScanner(file)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取迷宫的行数和列数</span></span><br><span class="line">    scanner.Scan()</span><br><span class="line">    dimensions := strings.Split(scanner.Text(), <span class="string">&quot; &quot;</span>) <span class="comment">// Split--&gt;[]string</span></span><br><span class="line">    row, _ := strconv.Atoi(dimensions[<span class="number">0</span>]) <span class="comment">// string--&gt;int</span></span><br><span class="line">    col, _ := strconv.Atoi(dimensions[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建迷宫</span></span><br><span class="line">    maze := <span class="built_in">make</span>([][]<span class="type">int</span>, row)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> maze &#123;</span><br><span class="line">        maze[i] = <span class="built_in">make</span>([]<span class="type">int</span>, col)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐行读取迷宫</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row &amp;&amp; scanner.Scan(); i++ &#123;</span><br><span class="line">        line := strings.Split(scanner.Text(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">            mazeValue, _ := strconv.Atoi(line[j])</span><br><span class="line">            maze[i][j] = mazeValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;读取迷宫文件失败：&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maze</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对Point的抽象</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p point)</span></span> add(r point) point &#123;</span><br><span class="line"><span class="keyword">return</span> point&#123;p.i + r.i, p.j + r.j&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="🐗🐗🐗http及其他标准库"><a href="#🐗🐗🐗http及其他标准库" class="headerlink" title="🐗🐗🐗http及其他标准库"></a>🐗🐗🐗http及其他标准库</h1><h2 id="🐭🐭http"><a href="#🐭🐭http" class="headerlink" title="🐭🐭http"></a>🐭🐭http</h2><blockquote><ul><li>使用http客户端发送请求</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request, err := http.NewRequest(http.MethodGet, <span class="string">&quot;http://www.imooc.com&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用http.Client控制请求头部等</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求头信息</span></span><br><span class="line">request.Header.Add(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Linux; Android 10; Redmi K30 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Mobile Safari/537.36&quot;</span>)</span><br><span class="line"><span class="comment">// 查看是否发生重定向</span></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">    CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Redirect:&quot;</span>, req)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">resp, err := client.Do(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br></pre></td></tr></table></figure><p><img src="/2023/06/06/go-basic-learning-week02/image-20230610162658583.png" alt="image-20230610162658583"></p><ul><li>httputil简化工作</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取响应内容</span></span><br><span class="line">s, err := httputil.DumpResponse(resp, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="🐇http服务器的性能分析"><a href="#🐇http服务器的性能分析" class="headerlink" title="🐇http服务器的性能分析"></a>🐇http服务器的性能分析</h3><blockquote><ul><li>import _ “net&#x2F;http&#x2F;pprof”</li><li>访问<code>http://ip:port/debug/pprof</code></li><li>使用 <code>go tool pprof</code>分析性能</li></ul></blockquote><h2 id="🐿🐿JSON的解析"><a href="#🐿🐿JSON的解析" class="headerlink" title="🐿🐿JSON的解析"></a>🐿🐿JSON的解析</h2><blockquote><ul><li>JSON数据格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;item_1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;learn go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;item_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;learn java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total_price&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>结构体的tag</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OrderItem <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID    <span class="type">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">    Name  <span class="type">string</span>  <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Price <span class="type">float64</span> <span class="string">`json:&quot;price&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Order <span class="keyword">struct</span> &#123; <span class="comment">// tag</span></span><br><span class="line">    ID         <span class="type">string</span>      <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">    Items      []OrderItem <span class="string">`json:&quot;item&quot;`</span></span><br><span class="line">    Quantity   <span class="type">int</span>         <span class="string">`json:&quot;quantity&quot;`</span></span><br><span class="line">    TotalPrice <span class="type">float64</span>     <span class="string">`json:&quot;total_price&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSON Marshal与Unmarshal,数据类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Marshal</span></span><br><span class="line">b, err := json.Marshal(o)</span><br><span class="line"><span class="comment">// Unmarshal</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(s), &amp;o)</span><br></pre></td></tr></table></figure><ul><li>第三方API的解析技巧（选择struct形式）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map形式接收数据</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, m[<span class="string">&quot;data&quot;</span>].([]<span class="keyword">interface</span>&#123;&#125;)[<span class="number">2</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;synonym&quot;</span>].(<span class="type">string</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct形式接收数据</span></span><br><span class="line">m := <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Synonym <span class="type">string</span> <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">        Tag     <span class="type">string</span> <span class="string">`json:&quot;tag&quot;`</span></span><br><span class="line">    &#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v, %+v\n&quot;</span>, m.Data[<span class="number">0</span>].Synonym, m.Data[<span class="number">0</span>].Tag)</span><br></pre></td></tr></table></figure></blockquote><h2 id="🦫🦫gin框架的介绍"><a href="#🦫🦫gin框架的介绍" class="headerlink" title="🦫🦫gin框架的介绍"></a>🦫🦫gin框架的介绍</h2><blockquote><ul><li>gin-gonic&#x2F;gin （依赖）建议将go版本换成 go1.20.5<ul><li>go get -u github.com&#x2F;gin-gonic&#x2F;gin</li><li>get -u go.uber.org&#x2F;zap</li></ul></li><li>middleware的使用：功能感觉像java的AOP</li><li>Context的使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    logger, err := zap.NewProduction()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// middleware 中间件</span></span><br><span class="line">    <span class="keyword">const</span> keyRequestId = <span class="string">&quot;requestId&quot;</span> <span class="comment">// Context</span></span><br><span class="line">    r.Use(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        s := time.Now()</span><br><span class="line">        c.Next()</span><br><span class="line">        <span class="comment">// 自定义日志</span></span><br><span class="line">        <span class="comment">// path, satatus, latency</span></span><br><span class="line">        logger.Info(<span class="string">&quot;incoming request&quot;</span>,</span><br><span class="line">                    zap.String(<span class="string">&quot;path&quot;</span>, c.Request.URL.Path),</span><br><span class="line">                    zap.Int(<span class="string">&quot;status&quot;</span>, c.Writer.Status()),</span><br><span class="line">                    zap.Duration(<span class="string">&quot;latency&quot;</span>, time.Now().Sub(s)))</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">// Context的使用</span></span><br><span class="line">        c.Set(keyRequestId, rand.Int())</span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        h := gin.H&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong gin&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> rid, exists := c.Get(keyRequestId); exists &#123;</span><br><span class="line">            h[keyRequestId] = rid.(<span class="type">int</span>) <span class="comment">// 添加keyRequestId字段</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.JSON(<span class="number">200</span>, h)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>此番周旋，劳顿滔天，压力堆积如山，只能于夜幕降临之际寻觅一丝空闲，进行种种总结。直至此刻才告一段落，触及一种轻松自在之感，这便是所谓苦尽甘来的真谛。💪</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-basic-learning-week01</title>
      <link href="/2023/06/04/go-basic-learning-week01/"/>
      <url>/2023/06/04/go-basic-learning-week01/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：一起来学go(狗)语言。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>江湖儿女们，听我一言！自我初识Java以来，侠者心中燃起一抹热忱，追求编程的精髓。然而，多年的江湖岁月让我领悟到一种新的力量——Go语言。</p></blockquote><h1 id="🌟🌟🌟基础语法"><a href="#🌟🌟🌟基础语法" class="headerlink" title="🌟🌟🌟基础语法"></a>🌟🌟🌟基础语法</h1><h2 id="👻👻变量和常量"><a href="#👻👻变量和常量" class="headerlink" title="👻👻变量和常量"></a>👻👻变量和常量</h2><h3 id="🍱变量定义"><a href="#🍱变量定义" class="headerlink" title="🍱变量定义"></a>🍱变量定义</h3><blockquote><p>使用Var关键字</p><ul><li>var a, b, c bool</li><li>var s1, s2 string &#x3D; “hello”, “world”</li><li>可以放在函数内，或直接放在包内</li><li>使用var()集中定义变量</li></ul><p>让编译器自动决定类型</p><ul><li>var a, b, i, s1, s2 &#x3D; true, flase, 3, “hello”, “world”</li></ul><p>使用:&#x3D;定义变量</p><ul><li>a, b, i, s1, s2 :&#x3D; true, flase, 3, “hello”, “world”</li><li><font color="skyblue">只能在函数内使用</font></li></ul></blockquote><h3 id="🍘内建变量类型"><a href="#🍘内建变量类型" class="headerlink" title="🍘内建变量类型"></a>🍘内建变量类型</h3><blockquote><ul><li>bool, string</li><li>(u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr</li><li>byte, rune</li><li>float32, float64, complex64, complex128</li></ul></blockquote><h3 id="🍙强制类型转换"><a href="#🍙强制类型转换" class="headerlink" title="🍙强制类型转换"></a>🍙强制类型转换</h3><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604163756712.png" alt="image-20230604163756712"></p><h3 id="🍛常量定义"><a href="#🍛常量定义" class="headerlink" title="🍛常量定义"></a>🍛常量定义</h3><blockquote><ul><li>const filename &#x3D; “abc.txt”</li><li>const数值可作为各种类型使用</li><li>const a, b &#x3D; 3, 4</li></ul><p>一次声明多个常量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name  = <span class="string">&quot;lwsj&quot;</span></span><br><span class="line">age   = <span class="number">21</span></span><br><span class="line">flag  = <span class="literal">true</span></span><br><span class="line">price = <span class="number">12.23</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><h3 id="🥡使用常量定义枚举类型"><a href="#🥡使用常量定义枚举类型" class="headerlink" title="🥡使用常量定义枚举类型"></a>🥡使用常量定义枚举类型</h3><blockquote><ul><li>普通枚举类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    cpp    = <span class="number">0</span></span><br><span class="line">    java   = <span class="number">1</span></span><br><span class="line">    python = <span class="number">2</span></span><br><span class="line">    golang = <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>自增枚举类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    cpp = <span class="literal">iota</span> <span class="comment">// 自动递增</span></span><br><span class="line">    java</span><br><span class="line">    python</span><br><span class="line">    golang</span><br><span class="line">)</span><br><span class="line"><span class="comment">// b, kb, mb, gb, tb, pb</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    kb</span><br><span class="line">    mb</span><br><span class="line">    gb</span><br><span class="line">    tb</span><br><span class="line">    pb</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 1 1024 1048576 1073741824 1099511627776 1125899906842624</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="🏌变量定义要点回顾"><a href="#🏌变量定义要点回顾" class="headerlink" title="🏌变量定义要点回顾"></a>🏌变量定义要点回顾</h3><blockquote><ul><li>变量类型写在变量名之后</li><li>编译器可推测变量类型</li><li>咩有char，只有rune</li><li>原生支持复数类型</li></ul></blockquote><h2 id="💦💦条件语句"><a href="#💦💦条件语句" class="headerlink" title="💦💦条件语句"></a>💦💦条件语句</h2><h3 id="🦸‍♂if"><a href="#🦸‍♂if" class="headerlink" title="🦸‍♂if"></a>🦸‍♂if</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err == <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="type">string</span>(contents))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;cannot print file contents:&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>if的条件里可以赋值</li><li>if的条件里赋值的变量作用域就在这个if语句里</li></ul></blockquote><h3 id="🤔switch"><a href="#🤔switch" class="headerlink" title="🤔switch"></a>🤔switch</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">result = a + b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">result = a - b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">result = a * b</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">result = a / b</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;unsupported operation: &quot;</span> + op)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch后可以没有表达式</li><li>switch会自动break，除非使用fallthrough</li></ul></blockquote><h2 id="🫡🫡循环"><a href="#🫡🫡循环" class="headerlink" title="🫡🫡循环"></a>🫡🫡循环</h2><h3 id="🐋for"><a href="#🐋for" class="headerlink" title="🐋for"></a>🐋for</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">   sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 死循环</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转二进制</span></span><br><span class="line"><span class="keyword">for</span> ; n &gt; <span class="number">0</span>; n /= <span class="number">2</span> &#123; <span class="comment">// 省略初始条件，相当于while</span></span><br><span class="line">    lsb := n % <span class="number">2</span></span><br><span class="line">    result = strconv.Itoa(lsb) + result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for的条件里不需要括号</li><li>for的条件里可以省略初始条件，结束条件，递增表达式</li><li>省略初始条件，相当于while</li></ul></blockquote><h3 id="🐙基本语法要点回顾"><a href="#🐙基本语法要点回顾" class="headerlink" title="🐙基本语法要点回顾"></a>🐙基本语法要点回顾</h3><blockquote><ul><li>for, if 后面的条件没有括号</li><li>if条件里也可以定义变量</li><li>咩有while</li><li>switch不需要break，也可以直接switch多个条件</li></ul></blockquote><h2 id="🍭函数"><a href="#🍭函数" class="headerlink" title="🍭函数"></a>🍭函数</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a / b, a % b</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ul><li>返回值类型写在最后面</li><li>函数可以返回多个值</li><li>函数返回多个值时可以起名字（建议仅用于非常简单的函数）</li><li>没有默认参数，可选参数（只有可变参数 (int…)）</li><li>函数可以作为参数使用</li></ul></blockquote><h2 id="🧋指针"><a href="#🧋指针" class="headerlink" title="🧋指针"></a>🧋指针</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> pa *<span class="type">int</span> = &amp;a</span><br><span class="line">*pa = <span class="number">3</span></span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><ul><li>Go的指针不能运算</li><li>Go语言<font color="skyblue"><strong>只有值传递</strong></font>一种方式</li></ul></blockquote><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604194929854.png" alt="image-20230604194929854"></p><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604195206687.png" alt="image-20230604195206687"></p><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604195510679.png" alt="image-20230604195510679"></p><h1 id="🎊🎊🎊内建容器"><a href="#🎊🎊🎊内建容器" class="headerlink" title="🎊🎊🎊内建容器"></a>🎊🎊🎊内建容器</h1><h2 id="🌳🌳数组"><a href="#🌳🌳数组" class="headerlink" title="🌳🌳数组"></a>🌳🌳数组</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的定义</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"><span class="comment">// 数组的遍历</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="comment">//for i, v := range numbers &#123;</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">    sum += v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以通过 _ 省略变量（当我不想使用该变量的时候）</li><li>不仅range，任何地方都可以通过 _ 省略变量</li></ul></blockquote><h3 id="🌵为什么要使用range呢？"><a href="#🌵为什么要使用range呢？" class="headerlink" title="🌵为什么要使用range呢？"></a>🌵为什么要使用range呢？</h3><blockquote><ul><li>意义明确，美观</li><li>c++: 没有类似能力</li><li>Java&#x2F;Python：只能for each value, 不能同时获取 i, v</li></ul></blockquote><h3 id="🌲数组是值类型"><a href="#🌲数组是值类型" class="headerlink" title="🌲数组是值类型"></a>🌲数组是值类型</h3><blockquote><ul><li>[10]int和[20]int是不同类型</li><li>调用func f(arr [10]int) 会拷贝数组</li><li>在go语言中一般不直接使用数组（<strong>而是用切片</strong>）</li></ul></blockquote><h2 id="🍀🍀Slice（切片）"><a href="#🍀🍀Slice（切片）" class="headerlink" title="🍀🍀Slice（切片）"></a>🍀🍀Slice（切片）</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">s := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">// s的值为[2,3,4,5] 左闭右开</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="number">10</span> <span class="comment">// arr的值变为[0,1,10,3,4,5,6,7]</span></span><br><span class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">// [2,3,4,5]</span></span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>] <span class="comment">// [5,6]</span></span><br></pre></td></tr></table></figure><ul><li>slice本是没有数据，是对底层array的一个view</li><li>slice 可以向后扩展，不可以想前扩展</li><li>s[i]不可以超越len(s)，向后扩展不可以超越底层数组cap(s)</li></ul></blockquote><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604201138021.png" alt="image-20230604201138021"></p><p><img src="/2023/06/04/go-basic-learning-week01/image-20230604201208296.png" alt="image-20230604201208296"></p><h3 id="🌍向Slice添加元素"><a href="#🌍向Slice添加元素" class="headerlink" title="🌍向Slice添加元素"></a>🌍向Slice添加元素</h3><blockquote><ul><li>添加元素时如果超越cap，系统会重新分配更大的底层数组</li><li>由于是值传递的关系，必须接收append的返回值</li><li>s &#x3D; append(s, val)</li></ul></blockquote><h2 id="🌞🌞Map"><a href="#🌞🌞Map" class="headerlink" title="🌞🌞Map"></a>🌞🌞Map</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:    <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;course&quot;</span>:  <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">    <span class="string">&quot;site&quot;</span>:    <span class="string">&quot;imooc&quot;</span></span><br><span class="line">    <span class="string">&quot;quality&quot;</span>: <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map[K]V, map[K1]map[K2]V</li></ul><p>Map的操作</p><ul><li>创建：make(map[string]int)</li><li>获取元素：m[key]</li><li>key不存在时，获得Value类型的初始值</li><li>用value, ok:&#x3D;m[key]来判断是否存在key</li><li>用delete删除一个key</li></ul><p>Map的遍历</p><ul><li>使用range遍历key，或者遍历key, value对</li><li>不保证遍历顺序，如需顺序，需手动对key排序</li></ul><p>Map的key可以是哪些？</p><ul><li>map使用哈希表，必须可是比较相等</li><li>除了slice,map,function的内建类型都可以作为key</li><li>Struct类型不包含上述字段，也可作为key</li></ul></blockquote><h2 id="🍠🍠rune"><a href="#🍠🍠rune" class="headerlink" title="🍠🍠rune"></a>🍠🍠rune</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rune相当于是go的char</span></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123; <span class="comment">// ch is a rune = int32</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;(%d %X) &quot;</span>, i, ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得字符数量</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(s))</span><br><span class="line"></span><br><span class="line">bytes := []<span class="type">byte</span>(s)   <span class="comment">// []byte获得字节</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123; <span class="comment">// len获得字节长度</span></span><br><span class="line">    ch, size := utf8.DecodeRune(bytes) <span class="comment">// ch is a rune = int32</span></span><br><span class="line">    bytes = bytes[size:]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c &quot;</span>, ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用range遍历pos，rune对</li><li>使用utf8.RuneCountInString获得字符数量</li><li>使用len获得字节长度</li><li>使用[]byte获得字节</li></ul></blockquote><h1 id="🔥🔥🔥面向对象"><a href="#🔥🔥🔥面向对象" class="headerlink" title="🔥🔥🔥面向对象"></a>🔥🔥🔥面向对象</h1><blockquote><ul><li>go语言仅支持封装，不支持继承和多态，更多的组合的形式</li><li>go语言没有class，只有struct</li></ul></blockquote><h2 id="❤️❤️结构体"><a href="#❤️❤️结构体" class="headerlink" title="❤️❤️结构体"></a>❤️❤️结构体</h2><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    value       <span class="type">int</span></span><br><span class="line">    left, right *Node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="💕结构的创建"><a href="#💕结构的创建" class="headerlink" title="💕结构的创建"></a>💕结构的创建</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line">root.left.right = createNode(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>使用自定义工厂函数（相当于是构造函数）</li><li><font color="skyblue">注意返回了局部变量的地址</font></li></ul></blockquote><h3 id="💜为结构定义方法"><a href="#💜为结构定义方法" class="headerlink" title="💜为结构定义方法"></a>💜为结构定义方法</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node TreeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">    fmt.Println(node.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显示定义和命名方法接收者（表示只有TreeNode类型的变量才能使用print方法）</li></ul></blockquote><h3 id="🍅使用指针作为方法接收者"><a href="#🍅使用指针作为方法接收者" class="headerlink" title="🍅使用指针作为方法接收者"></a>🍅使用指针作为方法接收者</h3><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *TreeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Setting Value to nil node. Ignored.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    node.value = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有使用指针才可以改变结构内容</li><li><strong>nil指针也可以调用方法（所以要判断node &#x3D;&#x3D; nil）</strong></li></ul></blockquote><h3 id="✌值接收者-vs-指针接收者"><a href="#✌值接收者-vs-指针接收者" class="headerlink" title="✌值接收者  vs 指针接收者"></a>✌值接收者  vs 指针接收者</h3><blockquote><ul><li>要改变内容必须使用指针接收者</li><li>结构过大也考虑使用指针接收者</li><li>一致性：如有指针接收者，最好都是指针接收者</li><li><font color="skyblue">值接收者是go语言特有的</font></li><li><font color="red">值接收者可以接收“值&#x2F;指针”，但是指针接收者只能接受指针</font></li></ul></blockquote><h2 id="💪💪封装"><a href="#💪💪封装" class="headerlink" title="💪💪封装"></a>💪💪封装</h2><blockquote><ul><li>名字一般使用CamelCase（驼峰命名）</li><li>首字母大写：public</li><li>首字母小写：private</li></ul></blockquote><h3 id="📢包"><a href="#📢包" class="headerlink" title="📢包"></a>📢包</h3><blockquote><ul><li>每个目录一个包</li><li>main包包含可执行入口</li><li>为结构定义的方法必须放在同一个包内</li><li>可以是不同文件</li></ul><p>如何扩充系统类型或者别人的类型</p><ul><li>定义别名: 最简单</li><li>使用组合：最常用</li><li>使用内嵌：需要省下许多代码</li></ul></blockquote><h1 id="📣📣📣go语言的依赖管理"><a href="#📣📣📣go语言的依赖管理" class="headerlink" title="📣📣📣go语言的依赖管理"></a>📣📣📣go语言的依赖管理</h1><blockquote><ul><li>依赖的概念：就是用别人写好的库</li><li>依赖管理的三个阶段：GOPATH, GOVENDOR, go mod(好用)</li></ul><p>GOVENDOR</p><ul><li>每个项目有自己的vendor目录，存放第三方库</li><li>大量第三方依赖管理工具：glide，dep，go dep, …</li></ul><p><img src="/2023/06/04/go-basic-learning-week01/image-20230605092356671.png" alt="image-20230605092356671"></p><p><img src="/2023/06/04/go-basic-learning-week01/image-20230605092459676.png" alt="image-20230605092459676"></p><p>go mod</p><ul><li>由go命令统一的管理，用户不必关心目录结构</li><li>初始化：go mod init</li><li>增加依赖：go get  或者 go get -u</li><li>更新依赖：go get[@v…], go mod tidy</li><li>将旧项目迁移到go mod: go mod init, go build .&#x2F;…</li></ul><p><strong>每一个package main 都应该有自己的包</strong></p><p><img src="/2023/06/04/go-basic-learning-week01/image-20230605101457247.png" alt="image-20230605101457247"></p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉第一周golang的基础学习到这里就结束啦，这只是go语言的开始，期待下周的学习，我们下周见 拜拜咯~~💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goland使用教程</title>
      <link href="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：一起来学go(狗)语言。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>初次探索Go语言，吾以恬静心神，观照Goland与Vscode二者，于其中得心应手者实为Goland。不意，行使Goland之时，频频陷入疑团，宛如荆棘环绕之森，真不胜其烦繁也。——CharGpt</p></blockquote><h1 id="📢📢📢安装go的SDK"><a href="#📢📢📢安装go的SDK" class="headerlink" title="📢📢📢安装go的SDK"></a>📢📢📢安装go的SDK</h1><blockquote><p>go官网：<a href="https://go.dev/">The Go Programming Language</a>下载想要的SDK版本（需要科学上网）</p></blockquote><h2 id="🌻🌻go-SDK-的环境设置"><a href="#🌻🌻go-SDK-的环境设置" class="headerlink" title="🌻🌻go SDK 的环境设置"></a>🌻🌻go SDK 的环境设置</h2><h3 id="📣GOROOT"><a href="#📣GOROOT" class="headerlink" title="📣GOROOT"></a>📣GOROOT</h3><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603202957499.png" alt="image-20230603202957499"></p><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603203241454.png" alt="image-20230603203241454"></p><h3 id="🏅GOPATH-（选弄）"><a href="#🏅GOPATH-（选弄）" class="headerlink" title="🏅GOPATH （选弄）"></a>🏅GOPATH （选弄）</h3><blockquote><p>GOPATH选弄的原因在：<a href="https://blog.csdn.net/QianLiStudent/article/details/116306997">golang调用本地包报错原因及解决方案</a></p><p>用于存放以后go用到的依赖</p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603203052430.png" alt="image-20230603203052430"></p><h3 id="🍉配置go-SDK-选弄"><a href="#🍉配置go-SDK-选弄" class="headerlink" title="🍉配置go SDK (选弄)"></a>🍉配置go SDK (选弄)</h3><blockquote><p>windows+R+cmd 输入下面两条指令</p><p>go env -w G0111MODULE&#x3D;on<br>go env -w GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p><p>如果上面两条指令执行失败换下面两条指令：</p><p>set G0111MODULE&#x3D;on </p><p>set GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230604151105652.png" alt="image-20230604151105652"></p><h1 id="💜💜💜goland创建项目"><a href="#💜💜💜goland创建项目" class="headerlink" title="💜💜💜goland创建项目"></a>💜💜💜goland创建项目</h1><blockquote><p>一定要选择Go。原因：<a href="https://www.cnblogs.com/Da-Mao/p/17025294.html#:~:text=%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%20%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%B9%8B%E5%89%8D%E9%A6%96%E5%85%88%E8%AF%B4%E4%B8%80%E4%B8%8B%EF%BC%8Cgo%20module%20%E6%98%AFGo%E8%AF%AD%E8%A8%80%E4%BB%8E%201.11%20%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%E5%AE%98%E6%96%B9%E6%8E%A8%E5%87%BA%E7%9A%84%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BB%8E%20Go1.13%20%E7%89%88%E6%9C%AC%E5%BC%80%E5%A7%8B%EF%BC%8Cgo,%E6%88%90%E4%B8%BA%E4%BA%86Go%E8%AF%AD%E8%A8%80%E9%BB%98%E8%AE%A4%E7%9A%84%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%8Cgo%E8%AF%AD%E8%A8%80%E5%AE%98%E6%96%B9%E6%8F%90%E5%80%A1%E4%BD%BF%E7%94%A8gomod%E7%AE%A1%E7%90%86%E5%8C%85%E3%80%82%20goland2020.3.x%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E7%89%88%E6%9C%AC%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%EF%BC%8C%E9%80%89%E9%A1%B9%E9%87%8C%E9%9D%A2%E6%B2%A1%E6%9C%89go%20module%EF%BC%88vgo%EF%BC%89%E8%BF%99%E4%B8%AA%E9%80%89%E9%A1%B9%E4%BA%86%EF%BC%8C%E5%9B%A0%E4%B8%BAgoland%E5%BC%80%E5%8F%91%E8%80%85%E6%8A%8A%E4%BB%A5%E5%89%8Dgo%20module%EF%BC%88vgo%EF%BC%89%E8%BF%99%E4%B8%AA%E9%80%89%E9%A1%B9%20%E5%8F%98%E6%88%90%E4%BA%86%20go%20%E9%80%89%E9%A1%B9%EF%BC%88%E6%88%91%E6%83%B3%E5%8F%AF%E8%83%BD%E8%BF%98%E6%98%AF%E5%9B%A0%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E5%AE%98%E6%96%B9%E6%91%92%E5%BC%83%E4%BA%86go%20path%E7%AE%A1%E7%90%86%E5%8C%85%EF%BC%8C%E8%AF%B4%E7%9A%84%E4%B8%8D%E5%AF%B9%E7%9A%84%E8%BF%98%E8%AF%B7%E8%A7%81%E8%B0%85%EF%BC%89">对于goland相对较新一些版本新建项目时没有go modi模式选项的坑</a></p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230604155358038.png" alt="image-20230604155358038"></p><blockquote><p>这个go.mod要有 module 和 go版本就行</p><p>这里建议选择<font color="skyblue">go 1.16以上，因为在1.16以上才有debug功能</font></p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603185515267.png" alt="image-20230603185515267"></p><blockquote><p>添加一个插件可以进行<font color="skyblue">自动保存</font> 相当于idea: crlt + alt + L</p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603185710085.png" alt="image-20230603185710085"></p><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603185759454.png" alt="image-20230603185759454"></p><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603185830103.png" alt="image-20230603185830103"></p><blockquote><p>配置FIle Watcher后就会保存.go文件了</p></blockquote><blockquote><p>如果项目跑不起来的话将<font color="skyblue">Edit Cofigurations中的Run kind改为file</font></p></blockquote><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603190035470.png" alt="image-20230603190035470"></p><p><img src="/2023/06/03/goland%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230603190057111.png" alt="image-20230603190057111"></p><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉goland真的很好用好吧💪。</p><p>未完结尽情期待喲~🌟</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goland </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级好用的工具集合</title>
      <link href="/2023/05/27/%E8%B6%85%E7%BA%A7%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/"/>
      <url>/2023/05/27/%E8%B6%85%E7%BA%A7%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：暂时木有哈哈。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>适合自己的工具能大大提升自身的学习效率💯</p></blockquote><h2 id="🍚🍚油猴-🍭-greasemonkey"><a href="#🍚🍚油猴-🍭-greasemonkey" class="headerlink" title="🍚🍚油猴 🍭 greasemonkey"></a>🍚🍚油猴 🍭 greasemonkey</h2><blockquote><p>油猴主要是有大量用于浏览器的脚本。</p><p>安装教程如下：<a href="https://zhuanlan.zhihu.com/p/128453110">Tampermonkey油猴插件——安装与使用教程 - 知乎 (zhihu.com)</a></p></blockquote><blockquote><p>官方脚本下载：<a href="https://greasyfork.org/zh-CN">Greasy Fork - 安全、实用的用户脚本大全</a></p></blockquote><blockquote><p>介绍我经常使用的两个脚本</p></blockquote><p><strong>懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、知乎增强、短视频无水印下载、百</strong></p><p><img src="/2023/05/27/%E8%B6%85%E7%BA%A7%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/image-20230527100157522.png" alt="image-20230527100157522"></p><p><strong>🔥持续更新🔥 CSDN广告完全过滤、人性化脚本优化：🆕 不用再登录了！让你体验令人惊喜的崭新</strong></p><p><img src="/2023/05/27/%E8%B6%85%E7%BA%A7%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/image-20230527100412882.png" alt="image-20230527100412882"></p><h2 id="🏌🏌utools"><a href="#🏌🏌utools" class="headerlink" title="🏌🏌utools"></a>🏌🏌utools</h2><blockquote><p><a href="https://www.lzwgxust.top/post/c6f514bb.html">utools | 楚门的世界</a></p></blockquote><h2 id="简账"><a href="#简账" class="headerlink" title="简账"></a>简账</h2><blockquote><p><a href="https://www.lzwgxust.top/post/cbfb4db0.html">好用的记账网站</a></p></blockquote><h2 id="闪击PPT"><a href="#闪击PPT" class="headerlink" title="闪击PPT"></a>闪击PPT</h2><blockquote><p><a href="https://www.lzwgxust.top/categories/tool/%E9%97%AA%E5%87%BBppt/">闪击ppt | 楚门的世界</a></p></blockquote><h2 id="baiduwangpan"><a href="#baiduwangpan" class="headerlink" title="baiduwangpan"></a>baiduwangpan</h2><blockquote><p><a href="https://www.lzwgxust.top/post/7f7f39a9.html">如何实现0元百度网盘不限速?</a></p></blockquote><h2 id="Bitwarden"><a href="#Bitwarden" class="headerlink" title="Bitwarden"></a>Bitwarden</h2><blockquote><p>好用得密码保存软件，手机、PC、浏览器插件都可同步数据</p><p><a href="https://github.com/bitwarden">Bitwarden · GitHub</a></p></blockquote><h2 id="cpolar"><a href="#cpolar" class="headerlink" title="cpolar"></a>cpolar</h2><blockquote><p><a href="https://www.lzwgxust.top/post/d36fddee.html">cpolar简易实现内网穿透 </a></p></blockquote><h2 id="Listen1：已淘汰"><a href="#Listen1：已淘汰" class="headerlink" title="Listen1：已淘汰"></a>Listen1：已淘汰</h2><blockquote><p>想听免费的歌吗？Listen1 满足你的所有听歌需求  </p><p><a href="https://listen1.github.io/listen1/">Listen 1 音乐播放器</a></p></blockquote><h2 id="分区助手"><a href="#分区助手" class="headerlink" title="分区助手"></a>分区助手</h2><blockquote><p>只能感慨太强大了！！！ 可以帮你分盘、帮你移动软件</p><p><a href="https://www.disktool.cn/">傲梅分区助手、轻松备份、数据恢复(恢复之星)、远程控制（AnyViewer）</a></p></blockquote><h2 id="greasemonkey：推荐"><a href="#greasemonkey：推荐" class="headerlink" title="greasemonkey：推荐"></a>greasemonkey：推荐</h2><blockquote><p>又一个免费的听歌软件！</p></blockquote><h2 id="webcatalog"><a href="#webcatalog" class="headerlink" title="webcatalog"></a>webcatalog</h2><blockquote><p>一个可以把你滴网页 变成 app的软件</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utools </tag>
            
            <tag> 油猴 </tag>
            
            <tag> BitWarden </tag>
            
            <tag> spotify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8安装Mysql5.7</title>
      <link href="/2023/05/20/Centos8%E5%AE%89%E8%A3%85Mysql5-7/"/>
      <url>/2023/05/20/Centos8%E5%AE%89%E8%A3%85Mysql5-7/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：暂时木有哈哈。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言📣"><a href="#前言📣" class="headerlink" title="前言📣"></a>前言📣</h1><blockquote><p>在Centos8上用原来Centos7上安装MySQL5.7的方法会安装失败，显示mysql-community-server安装错误。我们用新的方法在Centos8上安装MySQL5.7</p><p>好博客：[centos mysql重启_mob64ca12e732bb的技术博客_51CTO博客](<a href="https://blog.51cto.com/u_16213393/7182719#:~:text=CentOS%E4%B8%ADMySQL%E9%87%8D%E5%90%AF%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3">https://blog.51cto.com/u_16213393/7182719#:~:text=CentOS中MySQL重启操作详解</a> 1 1. 检查MySQL服务状态 在开始重启MySQL服务之前，我们首先需要检查当前MySQL服务的运行状态。 我们可以使用以下命令检查MySQL服务是否正在运行： systemctl status,可以使用以下命令检查MySQL服务的运行状态： … 4 4. 总结 通过本文，我们学习了在CentOS中重启MySQL服务的方法。 我们可以使用systemctl命令或者service命令来重启MySQL服务。 )</p></blockquote><h2 id="一、👻👻👻安装MySQL"><a href="#一、👻👻👻安装MySQL" class="headerlink" title="一、👻👻👻安装MySQL"></a>一、👻👻👻安装MySQL</h2><h3 id="🌳添加mysql存储库"><a href="#🌳添加mysql存储库" class="headerlink" title="🌳添加mysql存储库"></a>🌳添加mysql存储库</h3><blockquote><p>禁用mysql 默认的AppStream存储库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf remove @mysql</span><br><span class="line">sudo dnf module reset mysql &amp;&amp; sudo dnf module <span class="built_in">disable</span> mysql</span><br></pre></td></tr></table></figure><blockquote><p>centos8没有mysql存储库，因此我们将使用centos7存储库，创建一个新的存储库文件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure><blockquote><p>将一下数据插入上面的存储库中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[mysql-connectors-community]</span><br><span class="line">name=MySQL Connectors Community</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/7/$basear/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[mysql-tools-community]</span><br><span class="line">name=MySQL Tools Community</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-tools-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h3 id="🌵安装mysql（这里我选择的是mysql5-7）"><a href="#🌵安装mysql（这里我选择的是mysql5-7）" class="headerlink" title="🌵安装mysql（这里我选择的是mysql5.7）"></a>🌵安装mysql（这里我选择的是mysql5.7）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf --enablerepo=mysql57-community install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="🌲如果安装失败，使用以下方法进行安装"><a href="#🌲如果安装失败，使用以下方法进行安装" class="headerlink" title="🌲如果安装失败，使用以下方法进行安装"></a>🌲如果安装失败，使用以下方法进行安装</h3><blockquote><p>先下载rpm包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-common-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-libs-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-client-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.27-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>再安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-common-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">yum install -y mysql-community-libs-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">yum install -y mysql-community-client-5.7.27-1.el6.x86_64.rpm</span><br><span class="line">yum install -y mysql-community-server-5.7.27-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="🍀下载完成后检查版本"><a href="#🍀下载完成后检查版本" class="headerlink" title="🍀下载完成后检查版本"></a>🍀下载完成后检查版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># rpm -qi mysql-community-server</span></span><br><span class="line"> Name        : mysql-community-server</span><br><span class="line"> Version     : 5.7.29</span><br><span class="line"> Release     : 1.el7</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> Install Date: Sat 22 Feb 2020 11:04:07 AM CST</span><br><span class="line"> Group       : Applications/Databases</span><br><span class="line"> Size        : 801919839</span><br><span class="line"> License     : Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Under GPLv2 license as shown <span class="keyword">in</span> the Description field.</span><br><span class="line"> Signature   : DSA/SHA1, Thu 19 Dec 2019 04:12:40 PM CST, Key ID 8c718d3b5072e1f5</span><br><span class="line"> Source RPM  : mysql-community-5.7.29-1.el7.src.rpm</span><br><span class="line"> Build Date  : Wed 18 Dec 2019 09:31:48 PM CST</span><br><span class="line"> Build Host  : loki02.no.oracle.com</span><br><span class="line"> Relocations : (not relocatable)</span><br><span class="line"> Packager    : MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;</span><br><span class="line"> Vendor      : Oracle and/or its affiliates</span><br><span class="line"> URL         : http://www.mysql.com/</span><br><span class="line"> Summary     : A very fast and reliable SQL database server</span><br></pre></td></tr></table></figure><blockquote><p>出现以上信息说明安装成功啦🌟</p></blockquote><h3 id="🌍检查mysql源是否安装成功"><a href="#🌍检查mysql源是否安装成功" class="headerlink" title="🌍检查mysql源是否安装成功"></a>🌍检查mysql源是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>出现以下信息说明安装成功啦🌟</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql-connectors-community MySQL Connectors Community                       141</span><br><span class="line">mysql-tools-community      MySQL Tools Community                            105</span><br><span class="line">mysql57-community          MySQL 5.7 Community Server</span><br></pre></td></tr></table></figure><h3 id="🌞启动mysql"><a href="#🌞启动mysql" class="headerlink" title="🌞启动mysql"></a>🌞启动mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h3 id="🍠查看启动状态"><a href="#🍠查看启动状态" class="headerlink" title="🍠查看启动状态"></a>🍠查看启动状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><blockquote><p>出现一下信息，则启动成功🌟</p></blockquote><p><img src="/2023/05/20/Centos8%E5%AE%89%E8%A3%85Mysql5-7/image-20230520152129942.png" alt="image-20230520152129942"></p><h3 id="🔥设置开机自启动"><a href="#🔥设置开机自启动" class="headerlink" title="🔥设置开机自启动"></a>🔥设置开机自启动</h3><blockquote><p>systemctl enable mysqld</p></blockquote><h3 id="❤️刷新所有修改过的配置文件"><a href="#❤️刷新所有修改过的配置文件" class="headerlink" title="❤️刷新所有修改过的配置文件"></a>❤️刷新所有修改过的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h3 id="💕获取安装mysql后生成的临时密码，用于登录"><a href="#💕获取安装mysql后生成的临时密码，用于登录" class="headerlink" title="💕获取安装mysql后生成的临时密码，用于登录"></a>💕获取安装mysql后生成的临时密码，用于登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/2023/05/20/Centos8%E5%AE%89%E8%A3%85Mysql5-7/image-20230520152337197.png" alt="image-20230520152337197"></p><h3 id="💜Login-mysql"><a href="#💜Login-mysql" class="headerlink" title="💜Login  mysql"></a>💜Login  mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><blockquote><p>再输入上面查找得到的临时密码即可进入mysql</p></blockquote><h3 id="🍅修改登录密码"><a href="#🍅修改登录密码" class="headerlink" title="🍅修改登录密码"></a>🍅修改登录密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接将root权限修改为可以通过远程访问(但不推荐)</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; UPDATE user SET Host=<span class="string">&#x27;%&#x27;</span> WHERE User=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h3 id="✌设置默认编码为utf-8（mysql安装后默认不支持中文）"><a href="#✌设置默认编码为utf-8（mysql安装后默认不支持中文）" class="headerlink" title="✌设置默认编码为utf-8（mysql安装后默认不支持中文）"></a>✌设置默认编码为utf-8（mysql安装后默认不支持中文）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># 进入文件后添加下面的配置即可</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h3 id="💪重启MySQL服务并进入MySQL"><a href="#💪重启MySQL服务并进入MySQL" class="headerlink" title="💪重启MySQL服务并进入MySQL"></a>💪重启MySQL服务并进入MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; systemctl restart mysqld</span><br><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出现如下则说明编码修改完成🌟</p></blockquote><p><img src="/2023/05/20/Centos8%E5%AE%89%E8%A3%85Mysql5-7/image-20230520152840279.png" alt="image-20230520152840279"></p><h3 id="📢quit-mysql"><a href="#📢quit-mysql" class="headerlink" title="📢quit mysql"></a>📢quit mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure><blockquote><p>使用本机电脑navicat&#x2F;sqlyog等一系列客户端工具连接服务器上的mysql，用户名和密码为远程用户的用户名和密码，如果是将root权限修改为可以远程访问，就用root访问。</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown编辑语法</title>
      <link href="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[toc]<br><font face="zhuZiAWan" size="3"></font></p><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：暂时木有哈哈。随着专业的深入会越来越广哦…一起期待。<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p><p>🌳🌵🌲🍀🌍🌞🍠🔥❤️💕💜🍅✌💪📢📣🌻🏅🍉</p><p>🌟👻🍱🍘🍚🍛🥡🏌💦🦸‍♂🤔🫡💯🐋🐙🍭🧋🎊</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最初开始写博文的时候，是用的富文本编辑器，简单粗暴，哪里亮了点哪里，但是其功能较单一，有时候不能很好的实现想要呈现的结果（特别是文章最开头的目录部分），于是便转至markdown编辑器了。<br>此博文会持续更新,记录写博文常用的markdown语法<br>CSDN自带的MarkDown文档指导：<br>（1）、打开markdown编辑器<br>（2）、点击“发布文章”下栏中的帮助文档<br>（3）、点击箭头指的标识，下方即可展示对应的MarkDown语法教学。</p><h1 id="一、🌳🌳🌳目录与标题"><a href="#一、🌳🌳🌳目录与标题" class="headerlink" title="一、🌳🌳🌳目录与标题"></a>一、🌳🌳🌳目录与标题</h1><h3 id="🌵1、标题：“-”-“标题内容”"><a href="#🌵1、标题：“-”-“标题内容”" class="headerlink" title="🌵1、标题：“#”+“标题内容”"></a>🌵1、标题：“#”+“标题内容”</h3><blockquote><p>以此博文为例，编辑内容如下：</p><p><img src="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/image-20230511153809824.png" alt="image-20230511153809824"></p><p>结果呈现如下：</p><p><img src="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/image-20230511154421304.png" alt="image-20230511154421304"></p><p><font color="red">显然：#号越多标题级数越高（一二三……），字体越小。</font></p></blockquote><h3 id="🌲2、目录：-TOC-你定义的目录标题"><a href="#🌲2、目录：-TOC-你定义的目录标题" class="headerlink" title="🌲2、目录：@+[TOC]+(你定义的目录标题)"></a>🌲2、目录：@+[TOC]+(你定义的目录标题)</h3><blockquote><p>以此博文为例，编辑内容如下：</p></blockquote><h1 id="二、🌟🌟🌟内容渲染"><a href="#二、🌟🌟🌟内容渲染" class="headerlink" title="二、🌟🌟🌟内容渲染"></a>二、🌟🌟🌟内容渲染</h1><blockquote><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>Markdown内嵌HTML，所以可以用html语法来进行编辑。</p><h3 id="🔥1、改变颜色"><a href="#🔥1、改变颜色" class="headerlink" title="🔥1、改变颜色"></a>🔥1、改变颜色</h3><p>语法：<code>&lt;font color=&#39;purple&#39;&gt;此段文字颜色为紫色&lt;/font&gt;</code><br>效果呈现：<font color="purple">此段文字颜色为紫色</font><br>在purple位置改成你想要的颜色英文即可。</p><h3 id="🍀2、加入下划线"><a href="#🍀2、加入下划线" class="headerlink" title="🍀2、加入下划线"></a>🍀2、加入下划线</h3><p>语法：<code>&lt;u&gt;此段含下划线&lt;/u&gt;</code><br>效果呈现：<u>此段含下划线</u></p><h3 id="🌍3、引用"><a href="#🌍3、引用" class="headerlink" title="🌍3、引用"></a>🌍3、引用</h3><p>语法：&gt;+文本</p><h3 id="🌞4、空格"><a href="#🌞4、空格" class="headerlink" title="🌞4、空格"></a>🌞4、空格</h3><p>语法：<br>不换行空格：<code> </code><br>半角空格：<code> </code><br>全角空格：<code>&amp;emsp</code></p><p><img src="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/image-20230511191009562.png" alt="image-20230511191009562"></p><p>结果呈现：<br>此段前有一个<code> </code>（不换行空格）<br> 此段前有一个<code>&amp;ensp；</code>（半角空格）<br> 此段前有一个<code> </code>（全角空格）</p><h3 id="🍠5、分割线"><a href="#🍠5、分割线" class="headerlink" title="🍠5、分割线"></a>🍠5、分割线</h3><p>三个语法皆可：<br><code>***</code>：三个*号<br><code>---</code>：三个-号<br><code>___</code>：三个_（英文下划线）号<br>效果呈现：</p><h3 id="🌻6、设置图像大小且居中"><a href="#🌻6、设置图像大小且居中" class="headerlink" title="🌻6、设置图像大小且居中"></a>🌻6、设置图像大小且居中</h3><p><img src="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/image-20230511191201948.png" alt="image-20230511191201948">设置图片居中</p><p>代码：<code>#pic_center</code></p><p><img src="/2023/05/11/MarkDown%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95/image-20230511191456521.png" alt="image-20230511191456521"></p><h5 id="设置图片大小"><a href="#设置图片大小" class="headerlink" title="设置图片大小"></a>设置图片大小</h5><p>代码：<code>=500x400</code>（前边有一个空格）</p><h5 id="设置图片居中且自定义大小"><a href="#设置图片居中且自定义大小" class="headerlink" title="设置图片居中且自定义大小"></a>设置图片居中且自定义大小</h5><p>代码：<code>#pic_center =500x400</code> （其中为英文的“x”，居中要在设置大小前，两者间有一个空格）</p><h3 id="👻7、好看的小符号"><a href="#👻7、好看的小符号" class="headerlink" title="👻7、好看的小符号"></a>👻7、好看的小符号</h3><p>枯燥的文字容易使读者视觉疲劳，一些可爱的小符号会让人眼前一亮。<br>直接复制粘贴如下图案至MarkDown编辑面板即可。<br>图案如下：<br>🌳🌵🌲🍀🌍🌞🍠🔥❤️💕💜🍅✌💪<br>📢📣🌻🏅🍉🌟👻<br>结果呈现如下：</p></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulimall-springboot启动失败</title>
      <link href="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><font face="zhuZiAWan" size="3"><blockquote><p>✨你好啊，我是“ 罗师傅”，是一名程序猿哦。<br>🌍主页链接：<a href="https://luozongwei.github.io/">楚门的世界 - 一个热爱学习和运动的程序猿</a><br>☀️博文主更方向为：分享自己的快乐<br>❤️一个“不想让我曾没有做好而成为你的遗憾”的博主。<br>💪很高兴与你相遇，一起加油！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>启动springboot项目，Unable to start web server； nested exception is org.springframework.beans.factory</p></blockquote><h2 id="一、👻👻👻问题描述"><a href="#一、👻👻👻问题描述" class="headerlink" title="一、👻👻👻问题描述"></a>一、👻👻👻问题描述</h2><p>(1) 启动SpringBoot项目时出现异常：</p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511200131462.png" alt="image-20230511200131462"></p><p>(2)由于在使用springBoot创建项目的时候创建了cloud依赖，后面又改了springBoot的版本。</p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511200327492.png" alt="image-20230511200327492"></p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511200422022.png" alt="image-20230511200422022"></p><h2 id="二、🌟🌟🌟异常原因"><a href="#二、🌟🌟🌟异常原因" class="headerlink" title="二、🌟🌟🌟异常原因"></a>二、🌟🌟🌟异常原因</h2><blockquote><ul><li>根本原因：springboot父工程的依赖版本，与springcloud某个组件依赖版本不匹配。</li><li>直接原因：利用IDEA快捷创建boot项目且导入某个cloud组件依赖时。IDEA会默认使用最新版本组件（包括boot项目也会使用最新版本创建），后面一旦改动boot项目版本就会导致两者之间的版本冲突。</li></ul></blockquote><h2 id="三、✌✌✌解决方法"><a href="#三、✌✌✌解决方法" class="headerlink" title="三、✌✌✌解决方法"></a>三、✌✌✌解决方法</h2><p><a href="https://spring.io/projects/spring-cloud">Spring Cloud</a></p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511200901766.png" alt="image-20230511200901766"></p><blockquote><p>springboot:2.1.8.RELEASE 官方建议<font color="red"> Greenwich.SR6</font><br> 当然选择低一点版本也可以哈我用的<font color="red"> Greenwich.SR3</font></p></blockquote><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511201039947.png" alt="image-20230511201039947"></p><p><a href="https://mvnrepository.com/">Maven仓库地址</a></p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511201604915.png" alt="image-20230511201604915"></p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511201639512.png" alt="image-20230511201639512"></p><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511211611993.png" alt="image-20230511211611993"></p><h2 id="四、🌞🌞🌞测试结果"><a href="#四、🌞🌞🌞测试结果" class="headerlink" title="四、🌞🌞🌞测试结果"></a>四、🌞🌞🌞测试结果</h2><blockquote><p>springBoot正常启动</p></blockquote><p><img src="/2023/05/11/gulimall-springboot%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/image-20230511211808733.png" alt="image-20230511211808733"></p><h2 id="五、🍀🍀🍀注意"><a href="#五、🍀🍀🍀注意" class="headerlink" title="五、🍀🍀🍀注意"></a>五、🍀🍀🍀注意</h2><blockquote><ul><li>当boot项目中导入cloud组件时，尤其需要注意两者之间的版本是否匹配！！！</li><li>boot项目中只要存在一个cloud组件版本与boot项目版本不匹配，都会出现很多异常，包括无法启动。</li></ul></blockquote><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulimail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-markdown问题解决</title>
      <link href="/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3"><h1 id="创建markdown"><a href="#创建markdown" class="headerlink" title="创建markdown"></a>创建markdown</h1><ol><li>首先在Hexo的根目录下打开git 输入 hxeo n 文件名</li><li>其次&#x2F;Blogroot&#x2F;source&#x2F;_post 即可看到对应的md文件和文件夹</li></ol><p><img src="/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230507101807999.png" alt="image-20230507101807999"></p><p><img src="/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230507101924378.png" alt="image-20230507101924378"></p><h1 id="markdown的使用"><a href="#markdown的使用" class="headerlink" title="markdown的使用"></a>markdown的使用</h1><ol><li>首先在文件头部添加文件的基本信息，这些基本信息可以被hexo框架读取+渲染</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--- （主要这里的---不能少，不然hexo识别不到）</span><br><span class="line">title: hexo-markdown问题解决</span><br><span class="line"><span class="built_in">date</span>: 2023-05-07 10:14:45</span><br><span class="line">author: luozongwei</span><br><span class="line">categories:</span><br><span class="line">  - hexo</span><br><span class="line">tags:</span><br><span class="line">  - hexo</span><br><span class="line">  - markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="2"><li>最重要的是markdown中的图片显示问题，这里我提供两个解决方法</li></ol><p>第一个是直接使用markdown语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片显示名称](图片路径) 如下面图片所示</span><br><span class="line">![demo01](/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/demo01.png) </span><br><span class="line">这里的%是因为我的文件名用了中文</span><br><span class="line">注意这里非常重要的一点你是必须在前面加上hexo-markdown加上  / or ./ 否则上传的时候显示不了</span><br></pre></td></tr></table></figure><p><img src="/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230508094219242.png" alt="image-20230508094219242"></p><p><img src="/2023/05/06/hexo-markdown%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20230508094322483.png" alt="image-20230508094322483"></p><h1 id="对于hexo背景图片的修改"><a href="#对于hexo背景图片的修改" class="headerlink" title="对于hexo背景图片的修改"></a>对于hexo背景图片的修改</h1><p>在_config.butterfly.yml 下修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Avatar (头像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># img: https://i.loli.net/2021/02/24/5O1day2nriDzjSu.png</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/favicon.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page 背景图片</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/background.png</span></span><br></pre></td></tr></table></figure><h1 id="对于可能遇到hexo插件问题"><a href="#对于可能遇到hexo插件问题" class="headerlink" title="对于可能遇到hexo插件问题"></a>对于可能遇到hexo插件问题</h1><p>因为要使用到一下hexo的插件，因此在下面举了一些例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-cli 是 hexo的指令集 下载后可以使用 hexo s;hexo g等等</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># butterfly主题进行渲染</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"><span class="comment"># 保证markdown中的图片路径即正常显示</span></span><br><span class="line"> npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<font face="zhuZiAWan" size="3">首先声明是在[Hexo+阿里云&GitHub 搭建个人博客 | 海拥 (haiyong.site)](https://haiyong.site/post/cda958f2.html)基础上添加了自己在学习中遇到的错误，事先声明。<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>安装必要的软件 (本人是在Windows11系统下实现)</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p><a href="https://blog.csdn.net/weixin_52799373/article/details/123840137">nodejs安装教程</a> </p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">git安装教程</a></p><h2 id="hexo框架安装"><a href="#hexo框架安装" class="headerlink" title="hexo框架安装"></a>hexo框架安装</h2><p>官方地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><ol><li>首先需要建立博客文件夹，建议建在非系统盘，例如，那么这个目录F:\lwsj\myblog, 就是我们博客的根目录了。<br>因为每个人的命名习惯不同，本帖之后会以 [Blogroot] 指代博客根目录。</li><li>使用 npm 安装 Hexo, 在 [Blogroot] （就是你想要放hexo框架的根目录）路径下右键 -&gt;Git Bash Here, 输入</li></ol><p><strong>这里注意一点npm …一般要管理员权限才能执行</strong> （Windows11）</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507093706677.png" alt="image-20230507093706677"></p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507093821967.png" alt="image-20230507093821967"></p><p>这样就以管理员的权限进入到[Blogroot]目录了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line"><span class="comment">#将npm源替换为阿里的镜像。之后的安装就会迅速很多了。</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># hexo-cli 是 hexo的指令集。</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化 Hexo 博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 本地创建一个目录用于存放博客</span></span><br><span class="line">hexo init</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol><p>然后在浏览器中打开 localhost:4000 , 就能看到 (最初的hexo框架的样子)</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507094233583.png" alt="image-20230507094233583"></p><p>＞通过以上 3 种方式部署 Hexo 博客之后，就拥有了一个最简单的个人博客网站了，下面讲讲博客的简单初始化。</p><h1 id="Hexo-基础修改"><a href="#Hexo-基础修改" class="headerlink" title="Hexo 基础修改"></a>Hexo 基础修改</h1><h2 id="修改网站关键信息"><a href="#修改网站关键信息" class="headerlink" title="修改网站关键信息"></a>修改网站关键信息</h2><p>Hexo 初始化后，博客网站有一些关键信息是默认的，需要修改为我们自己的信息。 （要熟练使用ctrl+F进行搜索）</p><h3 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h3><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的站点配置文件 _config.yml：</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507094503955.png" alt="image-20230507094503955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 罗师傅</span><br><span class="line">subtitle: <span class="string">&#x27;一个热爱学习和运动的程序猿&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;&#x27;</span></span><br><span class="line">keywords:</span><br><span class="line">author: lwsj</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Butterfly主题安装"><a href="#Butterfly主题安装" class="headerlink" title="Butterfly主题安装"></a>Butterfly主题安装</h2><p>在你的 Hexo 根目录里执行：（为了让你的页面变得更好看）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装完后将会在\Blogroot\themes 下看到butterfly，双击进去</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507095154252.png" alt="image-20230507095154252"></p><p>修改主题配置文件 <code>_config.butterfly.yml</code>：（这里要做一个说明）</p><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把<strong>主题目录</strong>(就是butterfly下)的 <code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code> 去，以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507095256770.png" alt="image-20230507095256770"></p><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code>，把主题改为 butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：（为了将butterfly主题渲染出来）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h3><p>看上面我指定链接的博客即可<a href="https://haiyong.site/post/cda958f2.html">Hexo+阿里云&amp;GitHub 搭建个人博客 | 海拥 (haiyong.site)</a></p><p>修改后如下: (本人已经做了删减了)</p><p><img src="/2023/05/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230507100426785.png" alt="image-20230507100426785"></p><h1 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h1><p>看海拥博主的博客<a href="https://haiyong.site/post/cda958f2.html">Hexo+阿里云&amp;GitHub 搭建个人博客 | 海拥 (haiyong.site)</a></p><p>这里对于最后的上传做个说明：<strong>一定要进行hexo clean，不然github刷新有点问题。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line">等价于 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h1 id="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"><a href="#❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！" class="headerlink" title="❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！"></a>❤️❤️❤️忙碌的敲代码也不要忘了浪漫鸭！</h1><blockquote><p>🍉🍉🍉此博文会持续更新，记得常回来看看哦，一起加油做出更好看更有用的博文呀💪。</p></blockquote><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=244692322&bvid=BV1ov411C7YV&cid=238308474&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></font>]]></content>
      
      
      <categories>
          
          <category> 百宝箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
